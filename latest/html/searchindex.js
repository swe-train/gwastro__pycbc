Search.setIndex({"docnames": ["_include/distributions-table", "_include/inference_data_opts-table", "_include/inference_io_inheritance_diagrams", "_include/models-table", "_include/psd_models-table", "_include/sampler_inheritance_diagrams", "_include/samplers-table", "_include/transforms-table", "_include/waveform-parameters", "apps", "banksim", "build_gh_pages", "building_bundled_executables", "catalog", "credit", "dataquality", "detector", "devs", "distributions", "docker", "documentation", "extend", "faithsim", "fft", "filter", "formats/hdf_format", "frame", "genindex", "gw150914", "hwinj", "index", "inference", "inference/examples/analytic", "inference/examples/bbh", "inference/examples/gw150914", "inference/examples/hierarchical", "inference/examples/lisa_smbhb_inj_pe", "inference/examples/lisa_smbhb_ldc_pe", "inference/examples/margtime", "inference/examples/relative", "inference/examples/sampler_platter", "inference/examples/single", "inference/io", "inference/models", "inference/sampler_api", "inference/viz", "install", "install_cuda", "install_lalsuite", "install_virtualenv", "modules", "noise", "psd", "pycbc", "pycbc.catalog", "pycbc.coordinates", "pycbc.distributions", "pycbc.events", "pycbc.fft", "pycbc.filter", "pycbc.frame", "pycbc.inference", "pycbc.inference.io", "pycbc.inference.jump", "pycbc.inference.models", "pycbc.inference.sampler", "pycbc.inject", "pycbc.io", "pycbc.live", "pycbc.neutron_stars", "pycbc.noise", "pycbc.population", "pycbc.psd", "pycbc.results", "pycbc.strain", "pycbc.tmpltbank", "pycbc.types", "pycbc.vetoes", "pycbc.waveform", "pycbc.workflow", "pycbc_condition_strain", "release", "tmpltbank", "tutorials", "upload_to_gracedb", "waveform", "waveform_plugin", "workflow", "workflow/datafind", "workflow/hdf_coincidence", "workflow/initialization", "workflow/injections", "workflow/matched_filter", "workflow/pycbc_make_inference_inj_workflow", "workflow/pycbc_make_inference_workflow", "workflow/pycbc_make_offline_search_workflow", "workflow/pycbc_make_psd_estimation_workflow", "workflow/pygrb", "workflow/segments", "workflow/splittable", "workflow/template_bank"], "filenames": ["_include/distributions-table.rst", "_include/inference_data_opts-table.rst", "_include/inference_io_inheritance_diagrams.rst", "_include/models-table.rst", "_include/psd_models-table.rst", "_include/sampler_inheritance_diagrams.rst", "_include/samplers-table.rst", "_include/transforms-table.rst", "_include/waveform-parameters.rst", "apps.rst", "banksim.rst", "build_gh_pages.rst", "building_bundled_executables.rst", "catalog.rst", "credit.rst", "dataquality.rst", "detector.rst", "devs.rst", "distributions.rst", "docker.rst", "documentation.rst", "extend.rst", "faithsim.rst", "fft.rst", "filter.rst", "formats/hdf_format.rst", "frame.rst", "genindex.rst", "gw150914.rst", "hwinj.rst", "index.rst", "inference.rst", "inference/examples/analytic.rst", "inference/examples/bbh.rst", "inference/examples/gw150914.rst", "inference/examples/hierarchical.rst", "inference/examples/lisa_smbhb_inj_pe.rst", "inference/examples/lisa_smbhb_ldc_pe.rst", "inference/examples/margtime.rst", "inference/examples/relative.rst", "inference/examples/sampler_platter.rst", "inference/examples/single.rst", "inference/io.rst", "inference/models.rst", "inference/sampler_api.rst", "inference/viz.rst", "install.rst", "install_cuda.rst", "install_lalsuite.rst", "install_virtualenv.rst", "modules.rst", "noise.rst", "psd.rst", "pycbc.rst", "pycbc.catalog.rst", "pycbc.coordinates.rst", "pycbc.distributions.rst", "pycbc.events.rst", "pycbc.fft.rst", "pycbc.filter.rst", "pycbc.frame.rst", "pycbc.inference.rst", "pycbc.inference.io.rst", "pycbc.inference.jump.rst", "pycbc.inference.models.rst", "pycbc.inference.sampler.rst", "pycbc.inject.rst", "pycbc.io.rst", "pycbc.live.rst", "pycbc.neutron_stars.rst", "pycbc.noise.rst", "pycbc.population.rst", "pycbc.psd.rst", "pycbc.results.rst", "pycbc.strain.rst", "pycbc.tmpltbank.rst", "pycbc.types.rst", "pycbc.vetoes.rst", "pycbc.waveform.rst", "pycbc.workflow.rst", "pycbc_condition_strain.rst", "release.rst", "tmpltbank.rst", "tutorials.rst", "upload_to_gracedb.rst", "waveform.rst", "waveform_plugin.rst", "workflow.rst", "workflow/datafind.rst", "workflow/hdf_coincidence.rst", "workflow/initialization.rst", "workflow/injections.rst", "workflow/matched_filter.rst", "workflow/pycbc_make_inference_inj_workflow.rst", "workflow/pycbc_make_inference_workflow.rst", "workflow/pycbc_make_offline_search_workflow.rst", "workflow/pycbc_make_psd_estimation_workflow.rst", "workflow/pygrb.rst", "workflow/segments.rst", "workflow/splittable.rst", "workflow/template_bank.rst"], "titles": ["&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Applications and Workflows", "Calculating the Effectualness (Fitting Factor) of Template Banks", "Building Documentation for GitHub Pages", "Building Bundled Executables", "Catalog of Observed Gravitational-wave Mergers", "Use of PyCBC in Scientific Publications", "Query times of valid data, hardware injections, and more.", "Gravitational-wave Detectors", "Documentation for Developers", "Using PyCBC Distributions from PyCBC Inference", "Running PyCBC under Docker", "Documenting PyCBC code", "Extending PyCBC with external plugins", "Dag Generator for Doing Faithfulness Comparisons", "Performing FFTs in PyCBC", "Filtering", "HDF files within the PyCBC workflow", "Reading Gravitational-wave Frames", "Index", "Signal Processing with GW150914", "Hardware injection waveform generation", "PyCBC: Powering Gravitational-wave Astronomy", "PyCBC inference documentation (<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc.inference</span></code>)", "Running on an analytic distribution", "Simulated BBH example", "GW150914 example with gaussian noise model", "Using the hierarchical model", "LISA SMBHB injection and parameter estimation", "LISA parameter estimation for simulated SMBHB from LDC", "Marginalized time model", "Using the relative model", "Trying out different samplers", "Using the single template model", "Inference IO", "Details of common Models in PyCBC Inference", "Sampler API", "Plotting the posteriors (<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc_inference_plot_posterior</span></code>)", "Installing PyCBC", "Instructions to add CUDA support (optional)", "Installing lalsuite for PyCBC", "Setting up virtualenv", "pycbc", "Generating Noise", "Handling PSDs", "pycbc package", "pycbc.catalog package", "pycbc.coordinates package", "pycbc.distributions package", "pycbc.events package", "pycbc.fft package", "pycbc.filter package", "pycbc.frame package", "pycbc.inference package", "pycbc.inference.io package", "pycbc.inference.jump package", "pycbc.inference.models package", "pycbc.inference.sampler package", "pycbc.inject package", "pycbc.io package", "pycbc.live package", "pycbc.neutron_stars package", "pycbc.noise package", "pycbc.population package", "pycbc.psd package", "pycbc.results package", "pycbc.strain package", "pycbc.tmpltbank package", "pycbc.types package", "pycbc.vetoes package", "pycbc.waveform package", "pycbc.workflow package", "<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc_condition_strain</span></code>: operations with strain data files", "Creating Releases of PyCBC", "PyCBC template bank generation documentation (<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc.tmpltbank</span></code>)", "Library Examples and Interactive Tutorials", "Uploading triggers to gracedb", "Waveforms", "Making new waveform approximants available to PyCBC", "Workflow: the inspiral analysis workflow generator (<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc.workflow</span></code>)", "The workflow datafind and validation module", "HDF5 Based Coincidence Code", "Pycbc\u2019s workflow module configuration file(s) and command line interface", "The workflow injection generation module", "The workflow matched-filter module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc_make_inference_inj_workflow</span></code>: A parameter estimation workflow generator for injections", "<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc_make_inference_workflow</span></code>: A parameter estimation workflow generator", "<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc_make_offline_search_workflow</span></code>: A workflow to search for gravitational waves", "<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc_make_psd_estimation_workflow</span></code>: A workflow generator for noise estimation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc_make_offline_grb_workflow</span></code>: A GRB triggered CBC analysis workflow generator", "The workflow segment generation module", "The workflow table splitting module", "The workflow template bank generation module"], "terms": {"name": [0, 1, 3, 4, 6, 7, 10, 11, 12, 13, 15, 16, 19, 22, 25, 26, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 48, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "class": [0, 3, 6, 7, 16, 20, 31, 44, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 73, 74, 75, 76, 77, 78, 79, 82, 83, 88, 90, 91, 92, 94, 98, 99, 100], "arbitrari": [0, 16, 31, 41, 50, 53, 57, 64, 66, 67, 75, 78, 79, 86], "pycbc": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 22, 24, 26, 28, 29, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45, 47, 49, 51, 52, 83, 84, 85, 89, 94, 95, 96, 97], "distribut": [0, 10, 29, 31, 33, 36, 37, 39, 41, 47, 50, 53, 57, 61, 63, 64, 65, 70, 71, 73, 79, 83, 93, 95], "cos_angl": [0, 31, 38, 41, 56], "angular": [0, 8, 31, 50, 53, 55, 59, 61, 69, 78, 79], "cosangl": [0, 31, 53, 56], "extern": [0, 31, 40, 43, 44, 50, 53, 59, 78, 79], "external_func_fromfil": [0, 31, 56], "distributionfunctionfromfil": [0, 31, 53, 56], "fisher_ski": [0, 31, 56], "sky_loc": [0, 31, 50, 53], "fisherski": [0, 31, 53, 56], "fixed_sampl": [0, 31, 41, 56], "fixedsampl": [0, 31, 50, 53], "fromfil": [0, 31, 53, 56], "gaussian": [0, 1, 18, 31, 33, 35, 36, 40, 43, 50, 52, 53, 57, 64, 66, 77, 78, 82, 83, 92, 93, 94, 100], "independent_chip_chieff": [0, 31, 56], "spin": [0, 8, 10, 13, 14, 22, 29, 31, 33, 39, 41, 43, 50, 53, 57, 59, 64, 67, 68, 69, 71, 75, 78, 79, 83, 89, 90, 91, 94, 95, 100], "independentchipchieff": [0, 31, 53, 56], "mchirp_from_uniform_mass1_mass2": [0, 31, 35, 56], "mass": [0, 8, 10, 13, 29, 31, 33, 35, 36, 37, 38, 39, 41, 43, 50, 53, 57, 64, 67, 69, 71, 74, 75, 78, 79, 82, 83, 90, 92, 94, 99, 100], "mchirpfromuniformmass1mass2": [0, 18, 31, 53, 56], "q_from_uniform_mass1_mass2": [0, 31, 35, 56], "qfromuniformmass1mass2": [0, 18, 31, 53, 56], "sin_angl": [0, 31, 33, 38, 39, 41, 56, 94], "sinangl": [0, 31, 53, 56], "uniform": [0, 10, 22, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 50, 53, 57, 64, 65, 67, 71, 83, 91, 93, 94, 95], "uniform_angl": [0, 31, 33, 38, 41, 56, 94], "uniformangl": [0, 31, 53, 56], "uniform_f0_tau": [0, 31, 56], "qnm": [0, 31, 50, 53, 78], "uniformf0tau": [0, 31, 53, 56], "uniform_log10": [0, 31, 56, 93], "uniform_log": [0, 31, 50, 53], "uniformlog10": [0, 31, 53, 56], "uniform_power_law": [0, 31, 56], "power_law": [0, 31, 50, 53], "uniformpowerlaw": [0, 31, 53, 56], "uniform_radiu": [0, 31, 33, 38, 39, 41, 56], "uniformradiu": [0, 31, 53, 56], "uniform_ski": [0, 31, 33, 35, 41, 56, 94], "uniformski": [0, 31, 53, 56], "uniform_solidangl": [0, 31, 33, 56, 94], "uniformsolidangl": [0, 18, 31, 53, 56], "syntax": [1, 12, 20, 31, 53, 56, 63, 64, 67, 78, 79, 92, 93, 95, 96], "descript": [1, 8, 25, 31, 37, 53, 57, 67, 73, 75, 78, 79, 81, 82, 86, 87, 88, 91, 92, 94, 96, 99, 100], "instrument": [1, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 53, 66, 72, 80, 82, 83, 94, 98], "analyz": [1, 31, 33, 35, 40, 42, 57, 64, 67, 73, 74, 77, 79, 92, 93, 94, 96, 97], "eg": [1, 29, 31, 46, 56, 62, 73, 75, 79], "h1": [1, 13, 15, 16, 25, 26, 28, 29, 31, 33, 34, 35, 38, 39, 41, 53, 54, 57, 60, 64, 67, 68, 74, 76, 78, 79, 80, 82, 85, 88, 90, 94, 95, 96, 97, 98, 99, 100], "l1": [1, 13, 15, 16, 25, 28, 29, 31, 33, 34, 35, 38, 39, 41, 53, 54, 57, 60, 64, 68, 74, 78, 79, 82, 85, 88, 90, 92, 94, 95, 96, 97, 98, 100], "trigger": [1, 9, 31, 33, 34, 35, 36, 37, 38, 50, 53, 59, 60, 67, 68, 71, 72, 73, 74, 77, 79, 81, 82, 87, 89, 94, 95, 98], "time": [1, 8, 10, 12, 13, 14, 22, 23, 25, 26, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 49, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100], "trigger_tim": [1, 31, 33, 73, 94], "refer": [1, 8, 12, 16, 20, 24, 29, 31, 33, 43, 44, 53, 57, 59, 61, 64, 66, 67, 71, 72, 73, 74, 77, 78, 79, 80, 82, 85, 86, 87, 90, 92, 93, 95, 100], "gp": [1, 10, 13, 16, 22, 25, 28, 29, 31, 53, 57, 60, 64, 66, 70, 71, 72, 73, 74, 76, 78, 79, 80, 82, 85, 91, 92, 97, 100], "geocent": [1, 31, 57], "from": [1, 10, 11, 12, 14, 15, 16, 19, 20, 23, 26, 28, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 99, 100], "which": [1, 8, 10, 12, 15, 16, 17, 18, 23, 25, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "anlaysi": [1, 31], "psd": [1, 4, 10, 16, 22, 24, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 50, 51, 53, 57, 59, 61, 62, 64, 70, 74, 75, 76, 77, 78, 82, 83, 84, 85, 87, 92, 94, 95, 96, 98, 100], "start": [1, 8, 10, 12, 15, 19, 22, 25, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 45, 46, 49, 53, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], "end": [1, 8, 10, 15, 22, 23, 25, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 45, 53, 57, 58, 59, 60, 61, 62, 64, 65, 66, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 84, 85, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 100], "option": [1, 10, 12, 16, 19, 22, 29, 31, 33, 38, 40, 41, 43, 45, 46, 48, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "ar": [1, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100], "measur": [1, 10, 30, 31, 33, 53, 58, 59, 61, 66, 72, 74, 82, 92, 100], "The": [1, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 89, 90, 93, 94, 95, 96, 97], "integ": [1, 12, 23, 31, 53, 57, 58, 61, 62, 63, 64, 65, 72, 73, 74, 75, 76, 77, 78, 79, 82, 88, 89, 92, 100], "second": [1, 8, 11, 16, 18, 24, 26, 29, 31, 33, 45, 51, 52, 53, 54, 57, 58, 59, 60, 61, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 88, 89, 90, 92, 95, 98, 100], "us": [1, 8, 10, 11, 15, 16, 20, 21, 22, 24, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 42, 43, 44, 45, 47, 48, 49, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 97, 98], "default": [1, 8, 10, 12, 16, 23, 31, 45, 46, 48, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 88, 90, 91, 92, 94, 95, 97, 100], "i": [1, 8, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100], "0": [1, 8, 10, 12, 13, 15, 16, 18, 19, 22, 23, 24, 25, 26, 28, 29, 31, 33, 35, 36, 37, 38, 39, 40, 41, 46, 47, 49, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85, 86, 89, 90, 91, 92, 94, 95, 97, 98, 100], "e": [1, 9, 12, 16, 19, 20, 25, 31, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 48, 53, 56, 57, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 78, 79, 81, 82, 85, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100], "provid": [1, 9, 12, 16, 20, 23, 24, 25, 26, 29, 30, 31, 33, 35, 39, 41, 42, 43, 44, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85, 87, 88, 90, 91, 92, 93, 94, 95, 97, 99, 100], "analysi": [1, 9, 12, 14, 17, 23, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 43, 46, 53, 59, 64, 71, 72, 73, 74, 77, 79, 82, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100], "should": [1, 9, 10, 11, 12, 17, 20, 23, 25, 29, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "ifo": [1, 13, 16, 25, 28, 29, 31, 38, 39, 41, 53, 54, 57, 59, 60, 62, 64, 66, 67, 68, 71, 72, 73, 74, 76, 78, 79, 82, 87, 88, 90, 91, 92, 94, 95, 96, 97, 100], "respect": [1, 8, 10, 18, 31, 33, 40, 42, 53, 56, 64, 69, 71, 76, 78, 86, 94, 95, 98], "If": [1, 10, 11, 12, 14, 20, 23, 24, 26, 29, 30, 31, 32, 33, 34, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100], "invers": [1, 23, 29, 31, 33, 34, 35, 36, 38, 39, 41, 50, 53, 56, 57, 58, 61, 64, 65, 71, 72, 74, 75, 76, 77, 78, 82, 89, 92, 94, 95, 100], "length": [1, 10, 16, 18, 22, 23, 25, 29, 31, 33, 34, 35, 36, 38, 39, 41, 44, 45, 52, 53, 57, 58, 59, 61, 62, 64, 65, 67, 68, 70, 72, 73, 74, 76, 77, 78, 79, 82, 85, 90, 92, 94, 95, 96, 97, 100], "given": [1, 8, 10, 12, 16, 18, 25, 29, 31, 43, 44, 47, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "pad": [1, 18, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 53, 59, 60, 62, 64, 74, 78, 79, 80, 82, 92, 94, 95, 96, 97, 100], "half": [1, 31, 61, 66, 74, 76, 78, 82, 92, 100], "account": [1, 10, 11, 16, 22, 31, 33, 41, 43, 46, 48, 53, 56, 57, 59, 71, 74, 75, 76, 82, 93, 94, 95, 96, 97], "wrap": [1, 31, 53, 59, 62, 67, 78, 95], "around": [1, 28, 31, 33, 41, 53, 54, 55, 56, 57, 59, 60, 64, 75, 76, 78, 79, 82, 83, 88, 94, 95], "effect": [1, 10, 13, 20, 31, 33, 40, 53, 57, 59, 62, 65, 67, 72, 78, 82, 94, 95], "estim": [1, 9, 14, 21, 30, 31, 33, 34, 35, 38, 39, 41, 43, 44, 50, 53, 56, 57, 59, 61, 62, 64, 65, 71, 73, 74, 75, 76, 78, 79, 82, 83, 89, 92, 95, 100], "data": [1, 9, 12, 14, 17, 26, 28, 30, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 49, 50, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 82, 83, 88, 90, 91, 92, 93, 94, 96, 98, 100], "condit": [1, 31, 42, 53, 56, 64, 65, 74, 76, 78, 82, 90, 92], "low": [1, 10, 14, 18, 22, 24, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 53, 56, 59, 62, 64, 66, 67, 69, 70, 71, 72, 76, 77, 78, 80, 82, 89, 90, 92, 94, 95, 96, 100], "freq": [1, 13, 31, 53, 59, 64, 72, 74, 75, 76, 78, 82, 92, 100], "flow": [1, 24, 31, 36, 46, 51, 52, 59, 68, 72, 75, 76, 78, 80, 82, 85, 86, 92, 100], "frequenc": [1, 8, 10, 13, 14, 16, 22, 23, 24, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 43, 52, 53, 56, 59, 62, 64, 66, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 86, 92, 94, 95, 96, 99, 100], "cutoff": [1, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 53, 64, 66, 70, 72, 75, 76, 77, 78, 82, 92, 94, 95, 96, 99, 100], "need": [1, 8, 10, 11, 12, 18, 23, 26, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100], "when": [1, 8, 10, 12, 15, 16, 18, 22, 23, 29, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 44, 46, 48, 49, 53, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "creat": [1, 12, 17, 18, 19, 23, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 70, 72, 73, 74, 75, 76, 78, 79, 82, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], "fake": [1, 31, 33, 35, 36, 74, 79, 80, 82, 92, 93, 100], "strain": [1, 9, 13, 16, 24, 29, 31, 33, 34, 35, 36, 38, 39, 41, 50, 51, 52, 53, 54, 59, 60, 62, 64, 66, 72, 77, 78, 79, 82, 83, 85, 90, 92, 94, 95, 96, 100], "model": [1, 3, 21, 32, 33, 36, 37, 40, 42, 46, 48, 53, 55, 57, 61, 62, 65, 68, 71, 72, 74, 76, 78, 79, 80, 82, 85, 87, 92, 93, 94, 95, 96, 100], "": [1, 8, 13, 14, 15, 18, 19, 20, 23, 24, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 42, 44, 48, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "select": [1, 10, 18, 30, 31, 43, 45, 53, 54, 57, 58, 59, 60, 67, 71, 73, 77, 78, 79, 82, 83, 86, 92, 100], "method": [1, 10, 16, 29, 31, 33, 35, 36, 42, 44, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 72, 74, 76, 77, 78, 79, 82, 83, 88, 90, 91, 92, 95, 96, 97, 99, 100], "gener": [1, 8, 9, 16, 17, 24, 26, 28, 30, 31, 33, 35, 36, 37, 38, 39, 41, 42, 44, 48, 50, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 74, 75, 76, 79, 83, 86, 88, 90, 99], "file": [1, 9, 11, 12, 16, 17, 20, 28, 32, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 53, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 85, 87], "asd": [1, 10, 31, 72, 73, 79, 82, 92, 94, 100], "mutual": [1, 31, 82, 92, 100], "exclus": [1, 31, 79, 82, 92, 100], "get": [1, 12, 15, 16, 29, 31, 33, 34, 38, 44, 48, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 78, 79, 82, 85, 88, 92, 95, 97, 98, 100], "analyt": [1, 3, 4, 18, 31, 33, 40, 41, 50, 53, 56, 61, 69, 70, 77, 82, 83, 92, 100], "choos": [1, 8, 10, 18, 31, 33, 37, 39, 41, 52, 53, 57, 58, 61, 64, 67, 71, 72, 78, 79, 82, 83, 85, 88, 91, 92, 94, 95, 99, 100], "ani": [1, 10, 11, 13, 14, 18, 20, 25, 30, 31, 35, 37, 38, 41, 42, 43, 44, 49, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 86, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99], "avail": [1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 29, 30, 31, 32, 42, 44, 46, 47, 48, 49, 52, 53, 54, 57, 58, 60, 61, 64, 66, 67, 72, 73, 78, 79, 80, 82, 85, 88, 90, 92, 95, 96, 97, 99, 100], "extra": [1, 12, 31, 36, 46, 57, 62, 65, 67, 78, 79, 82, 92, 93, 95, 100], "arg": [1, 31, 32, 36, 37, 38, 39, 41, 45, 53, 56, 57, 58, 61, 62, 64, 65, 67, 68, 71, 74, 77, 78, 79, 82, 85, 86, 92, 94, 100], "detector": [1, 10, 13, 14, 15, 18, 26, 29, 30, 31, 33, 35, 50, 55, 57, 59, 60, 61, 62, 64, 66, 67, 72, 73, 74, 76, 77, 78, 79, 80, 83, 87, 89, 92, 94, 95, 96, 97, 98], "param": [1, 31, 33, 35, 36, 37, 53, 54, 56, 57, 58, 61, 62, 63, 64, 65, 67, 71, 73, 74, 75, 76, 78, 79, 82, 92, 93, 94, 100], "valu": [1, 10, 12, 18, 22, 23, 25, 29, 31, 33, 36, 43, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "argument": [1, 10, 12, 16, 19, 22, 26, 31, 32, 33, 34, 38, 39, 40, 41, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 82, 86, 88, 90, 91, 92, 93, 94, 95, 97, 99, 100], "pass": [1, 8, 12, 29, 31, 33, 34, 35, 38, 39, 41, 53, 56, 57, 59, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 86, 90, 92, 93, 94, 95, 96, 97, 100], "ascii": [1, 10, 22, 31, 53, 62, 65, 72, 76, 82, 92, 95, 100], "averag": [1, 31, 33, 53, 57, 62, 65, 71, 72, 74, 82, 92, 96, 97, 100], "mean": [1, 8, 16, 18, 31, 33, 34, 35, 36, 38, 42, 44, 53, 56, 57, 59, 61, 64, 67, 71, 72, 76, 77, 78, 79, 82, 90, 92, 94, 95, 96, 98, 100], "median": [1, 29, 31, 33, 34, 35, 36, 38, 39, 41, 54, 57, 72, 73, 74, 82, 92, 94, 95, 96, 100], "segment": [1, 31, 33, 34, 35, 36, 38, 39, 41, 50, 53, 57, 59, 61, 64, 66, 72, 73, 74, 76, 77, 78, 80, 82, 88, 90, 92, 94, 95, 96, 97, 100], "requir": [1, 10, 12, 19, 22, 23, 31, 33, 35, 39, 40, 41, 42, 43, 44, 46, 47, 48, 52, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 78, 79, 82, 85, 86, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100], "stride": [1, 29, 31, 33, 34, 35, 36, 38, 39, 41, 58, 67, 72, 77, 82, 92, 94, 95, 96, 100], "separ": [1, 10, 20, 22, 31, 35, 43, 44, 52, 53, 56, 57, 61, 63, 64, 65, 67, 72, 74, 76, 78, 79, 82, 90, 92, 94, 95, 97, 98, 100], "between": [1, 8, 10, 12, 18, 19, 29, 31, 35, 43, 44, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 87, 88, 89, 92, 93, 94, 95, 97, 98, 99, 100], "consecut": [1, 31, 72, 76, 82, 92, 100], "num": [1, 18, 31, 53, 56, 57, 64, 67, 73, 76, 78, 79, 82, 92, 93, 95, 97, 99, 100], "onli": [1, 8, 10, 12, 18, 23, 25, 29, 31, 33, 34, 35, 38, 40, 41, 42, 44, 48, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100], "thi": [1, 8, 10, 11, 12, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "number": [1, 10, 14, 18, 22, 23, 24, 25, 26, 29, 31, 32, 33, 34, 41, 44, 48, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100], "more": [1, 10, 22, 23, 29, 30, 31, 32, 33, 35, 40, 42, 43, 44, 46, 53, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 88, 90, 92, 93, 94, 95, 97, 98, 99, 100], "than": [1, 10, 22, 31, 33, 40, 41, 42, 43, 44, 48, 49, 53, 56, 57, 59, 61, 62, 63, 64, 65, 67, 72, 73, 74, 75, 76, 78, 79, 80, 82, 88, 90, 92, 93, 94, 95, 97, 98, 100], "make": [1, 10, 11, 16, 21, 22, 28, 31, 32, 33, 35, 43, 44, 46, 47, 48, 53, 55, 56, 57, 59, 62, 64, 65, 66, 72, 73, 74, 75, 78, 79, 81, 82, 83, 85, 87, 89, 90, 91, 92, 93, 94, 95, 99, 100], "excess": [1, 31, 82, 92, 100], "enough": [1, 31, 33, 42, 65, 74, 76, 78, 82, 92, 94, 100], "code": [1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 28, 31, 33, 42, 44, 46, 51, 52, 53, 57, 58, 65, 67, 71, 72, 73, 74, 75, 77, 78, 79, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "fail": [1, 31, 36, 53, 57, 62, 64, 75, 78, 79, 81, 82, 89, 92, 93, 94, 100], "maximum": [1, 10, 29, 31, 39, 48, 53, 56, 57, 59, 61, 63, 64, 65, 69, 71, 72, 73, 74, 75, 76, 78, 79, 82, 92, 94, 95, 100], "impuls": [1, 31, 72, 80, 82, 92, 100], "respons": [1, 13, 16, 29, 31, 37, 53, 57, 59, 64, 66, 72, 74, 76, 78, 79, 80, 82, 85, 88, 91, 92, 95, 97, 98, 99, 100], "overwhiten": [1, 31, 64, 74, 77, 82, 92, 100], "filter": [1, 10, 13, 22, 28, 29, 30, 31, 33, 34, 36, 38, 43, 50, 53, 64, 66, 67, 70, 71, 72, 74, 76, 77, 78, 79, 80, 82, 83, 85, 94, 95, 99, 100], "invpsd": [1, 31, 36, 74, 76, 82, 92, 100], "trunc": [1, 31, 36, 82, 92, 100], "hann": [1, 31, 36, 72, 76, 82, 92, 100], "what": [1, 10, 13, 16, 20, 23, 29, 31, 33, 35, 42, 44, 46, 53, 56, 57, 61, 62, 64, 65, 66, 67, 73, 78, 79, 80, 82, 83, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 100], "truncat": [1, 31, 56, 64, 66, 67, 72, 76, 82, 92, 95, 100], "appli": [1, 10, 16, 22, 31, 33, 34, 38, 42, 44, 53, 56, 57, 59, 61, 62, 64, 65, 66, 67, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 88, 90, 92, 93, 94, 95, 98, 100], "hard": [1, 31, 56, 72, 75, 76, 82, 91, 92, 94, 99, 100], "output": [1, 20, 23, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 45, 46, 53, 58, 59, 60, 62, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100], "write": [1, 17, 29, 31, 42, 44, 53, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 73, 75, 78, 79, 80, 81, 82, 83, 86, 87, 88, 92, 93, 94, 95, 97, 100], "specifi": [1, 10, 12, 16, 22, 29, 31, 33, 35, 44, 45, 46, 48, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100], "psdvar": [1, 31, 82, 92, 100], "calcul": [1, 9, 22, 24, 29, 30, 31, 33, 37, 39, 41, 43, 53, 55, 56, 57, 58, 59, 61, 62, 64, 65, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 87, 88, 89, 92, 93, 94, 95, 98, 100], "variabl": [1, 16, 18, 29, 31, 33, 35, 36, 37, 45, 47, 53, 56, 57, 59, 62, 64, 65, 67, 72, 73, 78, 79, 82, 88, 90, 92, 94, 95, 97, 100], "short": [1, 31, 53, 59, 72, 79, 82, 89, 92, 97, 100], "outlier": [1, 31, 72, 82, 92, 100], "remov": [1, 11, 12, 20, 28, 31, 33, 41, 48, 53, 57, 62, 64, 67, 72, 73, 74, 75, 76, 78, 79, 80, 82, 88, 89, 90, 91, 92, 94, 95, 98, 100], "long": [1, 31, 33, 53, 62, 65, 66, 72, 74, 78, 82, 90, 92, 94, 96, 97, 100], "durat": [1, 10, 22, 25, 28, 29, 31, 33, 36, 53, 54, 57, 59, 60, 63, 70, 72, 74, 75, 76, 78, 79, 80, 82, 85, 92, 94, 97, 100], "hertz": [1, 31, 74, 76, 82, 92, 100], "minimum": [1, 29, 31, 53, 56, 57, 61, 63, 64, 65, 71, 72, 73, 74, 75, 78, 82, 90, 92, 94, 95, 97, 100], "consid": [1, 30, 31, 33, 53, 57, 58, 59, 60, 61, 62, 67, 72, 74, 75, 77, 78, 79, 82, 90, 92, 95, 97, 100], "bandpass": [1, 31, 72, 82, 92, 100], "high": [1, 10, 16, 18, 24, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 53, 56, 57, 59, 64, 69, 71, 74, 76, 77, 78, 80, 82, 92, 94, 95, 96, 100], "obtain": [1, 31, 33, 44, 56, 57, 62, 65, 71, 74, 75, 77, 78, 79, 80, 82, 88, 92, 95, 97, 100], "h": [1, 28, 29, 31, 32, 34, 38, 39, 41, 45, 56, 59, 60, 62, 64, 66, 69, 74, 78, 79, 82, 88, 92, 95, 97, 99, 100], "t": [1, 12, 13, 15, 16, 20, 21, 24, 29, 31, 36, 37, 38, 39, 41, 51, 52, 53, 57, 59, 60, 62, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 85, 86, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100], "These": [1, 11, 15, 16, 20, 22, 23, 25, 26, 29, 30, 31, 32, 33, 41, 42, 44, 47, 48, 53, 56, 58, 62, 64, 65, 66, 67, 75, 77, 78, 79, 80, 82, 84, 85, 86, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100], "either": [1, 10, 31, 40, 41, 42, 43, 46, 48, 52, 53, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 72, 73, 76, 77, 78, 79, 80, 82, 90, 91, 92, 93, 94, 95, 100], "read": [1, 9, 10, 17, 22, 28, 29, 30, 31, 33, 35, 42, 44, 48, 50, 53, 56, 57, 59, 60, 62, 63, 64, 65, 66, 67, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100], "ie": [1, 29, 31, 67, 75, 79, 88, 90, 92, 95, 97, 98, 100], "group": [1, 10, 22, 31, 42, 53, 56, 57, 58, 59, 61, 62, 64, 67, 68, 71, 73, 75, 76, 78, 79, 82, 84, 89, 90, 93, 94, 95, 96, 97, 98], "support": [1, 8, 10, 16, 21, 31, 39, 40, 41, 42, 43, 44, 52, 53, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 74, 75, 76, 78, 79, 80, 82, 85, 88, 90, 96, 98], "multipl": [1, 12, 22, 23, 25, 31, 33, 34, 42, 43, 44, 48, 53, 56, 57, 61, 62, 64, 65, 67, 72, 75, 78, 79, 82, 83, 88, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100], "simultan": [1, 11, 31], "highpass": [1, 31, 53, 59, 64, 76, 82, 83, 92, 100], "corrupt": [1, 28, 29, 31, 33, 59, 76, 80, 82, 92, 95, 100], "8": [1, 13, 24, 28, 29, 31, 33, 34, 35, 38, 39, 41, 53, 56, 57, 59, 63, 64, 67, 69, 72, 73, 75, 76, 78, 79, 81, 82, 92, 94, 95, 96, 97, 98, 100], "taper": [1, 29, 31, 33, 35, 66, 74, 76, 78, 82, 92, 100], "zero": [1, 23, 24, 29, 31, 53, 56, 57, 59, 60, 64, 65, 67, 71, 72, 73, 74, 76, 77, 78, 79, 82, 85, 92, 95, 100], "suppli": [1, 31, 57, 59, 73, 75, 79, 82, 88, 91, 92, 97, 98, 99, 100], "window": [1, 10, 19, 31, 33, 57, 59, 66, 67, 72, 73, 74, 76, 78, 79, 82, 89, 90, 92, 95, 97, 100], "sampl": [1, 10, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 52, 53, 56, 57, 58, 59, 61, 62, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 86, 92, 93, 94, 95, 96, 99, 100], "rate": [1, 10, 22, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 50, 57, 58, 59, 62, 63, 64, 66, 68, 70, 71, 72, 74, 76, 78, 79, 80, 82, 92, 94, 95, 96, 100], "hz": [1, 8, 13, 24, 31, 33, 34, 38, 51, 52, 53, 56, 57, 59, 72, 76, 78, 80, 82, 85, 86, 92, 100], "channel": [1, 26, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 60, 66, 72, 74, 76, 78, 79, 80, 82, 90, 92, 94, 95, 96, 97, 98, 100], "contain": [1, 10, 11, 12, 19, 20, 22, 26, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 46, 53, 54, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "gravit": [1, 9, 14, 23, 31, 34, 38, 39, 41, 43, 53, 60, 64, 69, 71, 78, 79, 82, 83, 85, 86, 87, 90, 91, 92, 94, 97, 100], "frame": [1, 12, 18, 20, 28, 29, 31, 32, 34, 36, 37, 38, 39, 41, 45, 50, 53, 55, 64, 65, 66, 74, 78, 79, 82, 83, 87, 88, 90, 92, 94, 95, 96, 97, 98, 100], "cach": [1, 12, 29, 31, 53, 60, 64, 74, 78, 79, 82, 88, 92, 95, 97, 100], "frame_cach": [1, 31, 82, 92, 100], "locat": [1, 10, 22, 26, 29, 31, 33, 34, 35, 38, 41, 43, 46, 47, 53, 57, 58, 59, 60, 64, 65, 67, 73, 75, 76, 77, 78, 79, 82, 83, 85, 88, 91, 92, 94, 95, 96, 97, 98, 100], "frame_fil": [1, 26, 31, 60, 79, 82, 92, 100], "list": [1, 10, 12, 15, 16, 20, 22, 26, 29, 31, 33, 35, 44, 45, 48, 52, 53, 54, 56, 57, 59, 60, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100], "hdf": [1, 12, 17, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 45, 50, 52, 53, 56, 57, 60, 61, 62, 64, 65, 66, 71, 73, 75, 76, 78, 79, 80, 82, 84, 89, 91, 92, 93, 95, 96, 100], "store": [1, 10, 22, 25, 31, 42, 48, 50, 53, 56, 57, 59, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 82, 88, 90, 91, 92, 94, 95, 98, 99, 100], "hdf_store_fil": [1, 31], "seri": [1, 29, 31, 41, 43, 57, 59, 60, 62, 64, 66, 68, 72, 73, 74, 76, 77, 78, 82, 83, 85, 86, 92, 95, 100], "format": [1, 10, 16, 20, 25, 31, 37, 42, 52, 53, 54, 56, 57, 61, 62, 63, 64, 66, 67, 69, 71, 73, 75, 76, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 98, 100], "type": [1, 15, 19, 23, 24, 26, 28, 29, 31, 34, 35, 43, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100], "frame_typ": [1, 29, 31, 60], "replac": [1, 11, 19, 31, 34, 44, 48, 53, 55, 64, 72, 76, 79, 80, 82, 88, 90, 92, 94, 95, 96, 97, 98, 100], "datafind": [1, 31, 50, 53, 60, 82, 87, 90, 92, 95, 96, 97, 98, 99, 100], "siev": [1, 31, 60, 82, 92, 100], "frame_siev": [1, 31, 82, 92, 100], "where": [1, 11, 12, 15, 20, 23, 29, 31, 33, 42, 43, 44, 47, 48, 49, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], "url": [1, 12, 28, 29, 31, 60, 67, 79, 82, 86, 88, 90, 92, 95, 96, 97, 98, 100], "match": [1, 10, 12, 22, 25, 29, 31, 51, 53, 56, 57, 59, 60, 62, 63, 64, 65, 66, 72, 74, 75, 76, 77, 78, 79, 80, 83, 88, 89, 94, 95, 99, 100], "regular": [1, 11, 31, 50, 53, 60, 82, 88, 92, 95, 100], "express": [1, 31, 60, 82, 88, 92, 100], "choic": [1, 8, 10, 22, 31, 46, 53, 57, 58, 61, 69, 71, 72, 76, 78, 82, 88, 91, 92, 99, 100], "nois": [1, 9, 10, 24, 31, 33, 35, 36, 38, 39, 43, 50, 52, 53, 57, 59, 64, 68, 71, 72, 80, 82, 83, 92, 93, 94, 100], "zeronois": [1, 31, 82, 92, 100], "seed": [1, 10, 18, 22, 24, 31, 32, 33, 34, 35, 36, 38, 39, 41, 51, 52, 56, 61, 62, 64, 65, 70, 74, 79, 80, 82, 92, 93, 94, 95, 99, 100], "color": [1, 15, 31, 32, 33, 36, 37, 39, 41, 50, 51, 52, 53, 70, 79, 82, 92, 94, 100], "fake_strain_flow": [1, 31, 82, 92, 100], "fake_strain_filter_dur": [1, 31, 82, 92, 100], "fake_strain_sample_r": [1, 31, 82, 92, 100], "inject": [1, 9, 10, 22, 30, 31, 35, 37, 43, 50, 53, 57, 61, 62, 64, 71, 73, 74, 76, 78, 82, 83, 90, 92, 95, 97, 98, 100], "parametersof": [1, 31, 82, 92, 100], "cbc": [1, 9, 10, 12, 15, 29, 31, 33, 53, 56, 66, 67, 71, 72, 78, 79, 82, 85, 86, 87, 88, 90, 91, 92, 94, 95, 96, 98, 99, 100], "signal": [1, 10, 14, 24, 30, 31, 33, 35, 36, 37, 39, 41, 43, 53, 55, 57, 59, 64, 65, 66, 68, 71, 72, 74, 78, 79, 82, 83, 86, 87, 91, 92, 93, 95, 97, 100], "ad": [1, 14, 31, 33, 34, 38, 42, 44, 47, 53, 56, 57, 60, 61, 62, 64, 66, 67, 74, 75, 76, 78, 79, 81, 82, 83, 84, 89, 90, 91, 92, 93, 95, 99, 100], "sgburst": [1, 31, 78, 79, 82, 92, 100], "sine": [1, 31, 56, 57, 66, 77, 78, 82, 92, 100], "burst": [1, 30, 31, 66, 78, 82, 92, 97, 100], "add": [1, 11, 12, 16, 19, 22, 25, 31, 33, 36, 43, 46, 48, 49, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100], "scale": [1, 31, 53, 56, 57, 61, 63, 65, 66, 70, 71, 73, 75, 79, 82, 92, 100], "factor": [1, 9, 16, 31, 33, 43, 53, 56, 57, 58, 59, 61, 64, 65, 66, 71, 73, 74, 75, 77, 78, 79, 82, 89, 92, 94, 95, 100], "val": [1, 31, 57, 62, 65, 72, 73, 75], "divid": [1, 10, 23, 31, 33, 57, 59, 62, 74, 75, 82, 92, 100], "befor": [1, 12, 23, 31, 33, 34, 37, 38, 41, 47, 48, 53, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 72, 74, 75, 76, 78, 79, 80, 82, 84, 90, 92, 93, 94, 95, 97, 99, 100], "typic": [1, 12, 19, 26, 31, 46, 53, 58, 59, 65, 71, 76, 78, 82, 85, 92, 95, 100], "similar": [1, 20, 31, 33, 36, 42, 45, 53, 57, 58, 62, 66, 67, 75, 76, 79, 82, 90, 92, 93, 98, 99, 100], "f": [1, 8, 10, 22, 25, 29, 31, 33, 37, 38, 39, 41, 53, 56, 59, 64, 67, 71, 72, 73, 74, 75, 77, 78, 82, 85, 86, 90, 91, 92, 95, 100], "ref": [1, 12, 31, 82, 92, 100], "an": [1, 10, 12, 14, 16, 18, 20, 22, 23, 25, 26, 28, 29, 31, 33, 36, 40, 42, 43, 44, 45, 46, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "xml": [1, 10, 29, 31, 57, 66, 67, 72, 73, 75, 78, 79, 82, 84, 89, 90, 91, 92, 95, 96, 97, 99, 100], "final": [1, 20, 31, 33, 35, 42, 44, 46, 53, 56, 57, 61, 64, 65, 74, 75, 76, 78, 79, 82, 92, 95, 96, 98, 100], "overrid": [1, 19, 23, 31, 42, 44, 53, 60, 62, 64, 65, 67, 76, 78, 79, 82, 83, 92, 93, 94, 95, 97, 100], "f_final": [1, 8, 31, 36, 78, 82, 92, 100], "field": [1, 31, 53, 62, 64, 65, 66, 67, 73, 78, 82, 92, 98, 100], "gate": [1, 31, 50, 53, 64, 76, 78, 79, 80, 82, 92, 100], "text": [1, 20, 31, 42, 53, 62, 72, 73, 76, 81, 82, 92, 95, 100], "each": [1, 10, 14, 20, 22, 23, 25, 26, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "line": [1, 8, 12, 16, 20, 31, 36, 37, 41, 45, 50, 53, 56, 57, 58, 61, 62, 64, 66, 68, 73, 75, 76, 78, 79, 80, 87, 88, 91, 92, 93, 94, 95, 96, 97, 99, 100], "unit": [1, 16, 18, 29, 31, 53, 55, 56, 57, 59, 64, 65, 69, 71, 72, 78, 82, 100], "gps_time": [1, 31, 53, 74, 82, 92, 100], "zeros_half_width": [1, 31, 82, 92, 100], "pad_half_width": [1, 31, 82, 92, 100], "autog": [1, 31, 79, 82, 92, 100], "threshold": [1, 29, 31, 53, 57, 59, 61, 64, 66, 67, 71, 73, 74, 75, 77, 78, 82, 89, 92, 95, 100], "sigma": [1, 31, 53, 56, 57, 59, 71, 75, 78, 79, 82, 92, 100], "find": [1, 12, 20, 31, 53, 56, 57, 60, 61, 64, 69, 71, 72, 74, 75, 76, 78, 79, 82, 83, 87, 88, 90, 92, 95, 96, 97, 100], "glitch": [1, 31, 72, 74, 80, 82, 92, 100], "produc": [1, 20, 25, 31, 42, 53, 56, 57, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 82, 88, 90, 92, 94, 95, 97, 98, 100], "deviat": [1, 18, 31, 35, 43, 53, 61, 71, 78, 82, 92, 100], "larger": [1, 31, 50, 53, 56, 57, 59, 62, 64, 67, 74, 75, 78, 79, 82, 92, 94, 100], "whiten": [1, 13, 31, 53, 61, 64, 72, 74, 76, 82, 83, 92, 100], "max": [1, 10, 22, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 50, 53, 56, 59, 61, 62, 63, 64, 65, 71, 73, 76, 82, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 100], "iter": [1, 31, 32, 33, 36, 37, 39, 44, 53, 57, 59, 61, 62, 63, 64, 65, 66, 73, 75, 79, 82, 92, 94, 100], "cluster": [1, 10, 22, 29, 30, 31, 33, 34, 48, 53, 57, 59, 67, 73, 74, 79, 82, 88, 92, 93, 94, 95, 97, 100], "detect": [1, 14, 30, 31, 33, 54, 57, 59, 74, 78, 79, 82, 85, 86, 90, 91, 92, 94, 95, 100], "width": [1, 31, 53, 61, 63, 64, 73, 75, 78, 82, 92, 100], "after": [1, 12, 23, 31, 32, 33, 34, 36, 37, 38, 39, 41, 48, 53, 56, 59, 60, 64, 65, 66, 67, 71, 73, 75, 78, 79, 82, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100], "over": [1, 10, 31, 33, 35, 38, 39, 43, 53, 57, 59, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 89, 92, 94, 95, 96, 97, 100], "ignor": [1, 31, 33, 56, 57, 59, 61, 62, 64, 72, 77, 78, 79, 82, 88, 92, 93, 94, 97, 98, 100], "avoid": [1, 29, 31, 42, 43, 44, 67, 74, 75, 78, 82, 90, 92, 94, 100], "ring": [1, 31, 53, 57, 82, 92, 100], "paint": [1, 31, 74, 76, 82, 92, 100], "normal": [1, 31, 32, 40, 53, 56, 57, 59, 60, 61, 64, 65, 70, 71, 74, 75, 76, 77, 78, 79, 82, 87, 92, 95, 97, 98, 99, 100], "constant": [1, 31, 43, 53, 56, 59, 64, 70, 74, 76, 78, 82, 91, 92, 99, 100], "zpk": [1, 31, 50, 53, 82, 92, 100], "z": [1, 8, 12, 18, 31, 32, 33, 36, 37, 38, 39, 41, 45, 53, 55, 59, 61, 64, 67, 69, 71, 72, 78, 81, 82, 92, 94, 100], "pole": [1, 31, 53, 56, 59, 74, 82, 85, 92, 100], "gain": [1, 10, 31, 43, 59, 74, 82, 92, 100], "A": [1, 8, 9, 10, 14, 15, 16, 18, 23, 29, 31, 35, 37, 42, 43, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 84, 85, 86, 88, 89, 90, 91, 92, 98, 99, 100], "transfer": [1, 19, 31, 59, 74, 82, 92, 95, 100], "function": [1, 4, 8, 15, 16, 18, 20, 31, 35, 37, 40, 41, 42, 43, 44, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100], "p": [1, 18, 19, 31, 32, 37, 46, 48, 49, 53, 55, 56, 57, 59, 61, 63, 64, 69, 71, 73, 78, 82, 92, 93, 95, 97, 100], "k": [1, 31, 53, 55, 56, 57, 59, 61, 63, 64, 67, 71, 73, 82, 92, 100], "centraltim": [1, 31], "halfdur": [1, 31], "taperdur": [1, 31], "one": [1, 12, 14, 19, 22, 23, 25, 29, 31, 33, 35, 36, 37, 42, 43, 44, 46, 49, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], "first": [1, 8, 12, 18, 19, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 46, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 92, 94, 95, 97, 98, 99, 100], "allow": [1, 8, 10, 16, 19, 23, 25, 29, 31, 35, 43, 45, 53, 56, 57, 60, 63, 64, 65, 67, 69, 72, 74, 75, 76, 78, 79, 82, 87, 88, 90, 92, 95, 100], "sharper": [1, 31], "sinc": [1, 11, 12, 18, 29, 31, 33, 34, 38, 42, 44, 48, 61, 62, 63, 64, 65, 67, 78, 91, 93, 94, 95, 98, 100], "blur": [1, 31], "comput": [1, 8, 19, 23, 31, 32, 33, 34, 37, 44, 46, 48, 52, 53, 56, 57, 58, 59, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 91, 92, 94, 95, 98, 100], "prior": [1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 53, 56, 57, 61, 62, 64, 65, 67, 71, 79, 93, 94, 95], "fft": [1, 24, 29, 31, 36, 50, 53, 72, 74, 77, 78, 83, 85, 92, 95], "ing": [1, 31, 59, 74], "quer": [1, 31], "qualiti": [1, 31, 59, 64, 74, 78, 87, 92, 94, 95, 97, 98], "dq": [1, 15, 31, 50, 57, 60, 64, 87, 88, 94], "dq_segment_nam": [1, 31], "statu": [1, 26, 30, 31, 53, 58, 60, 64, 74, 93, 94, 95, 97], "flag": [1, 8, 10, 26, 31, 53, 59, 60, 64, 68, 78, 79, 82, 83, 84, 88, 90, 94, 95], "queri": [1, 30, 31, 53, 54, 60, 64, 79, 82, 83, 87, 88, 92, 95, 98, 100], "sourc": [1, 10, 11, 12, 13, 15, 18, 24, 26, 28, 29, 30, 31, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 85, 86, 88, 90, 91, 92, 94, 95, 98, 99, 100], "gwosc": [1, 15, 28, 31, 34, 38, 50, 53, 80, 94, 98], "dqsegdb": [1, 15, 31, 53], "look": [1, 31, 54, 56, 57, 59, 60, 62, 63, 64, 65, 66, 67, 75, 76, 77, 78, 79, 85, 86, 87, 90, 91, 93, 94, 95, 98], "inform": [1, 10, 15, 16, 20, 22, 31, 32, 33, 36, 41, 42, 53, 54, 56, 57, 60, 61, 62, 65, 67, 71, 72, 73, 75, 78, 79, 83, 88, 90, 91, 92, 94, 95, 97, 98, 99, 100], "try": [1, 28, 30, 31, 42, 44, 53, 62, 63, 64, 65, 66, 67, 75, 76, 78, 82, 83, 94, 95], "server": [1, 31, 53, 60, 64, 79, 83, 87, 88, 90, 94, 95, 98], "dq_server": [1, 31], "veto": [1, 24, 31, 50, 53, 73, 79, 90, 92, 96, 97], "defin": [1, 8, 31, 33, 36, 37, 42, 44, 53, 56, 57, 59, 60, 62, 63, 64, 65, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 88, 90, 92, 93, 94, 96, 97], "veto_defin": [1, 31, 53, 79], "path": [1, 10, 11, 12, 16, 18, 22, 25, 26, 29, 31, 34, 38, 47, 48, 49, 53, 56, 57, 60, 61, 62, 64, 65, 66, 67, 71, 72, 73, 74, 76, 79, 82, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "themselv": [1, 31, 44, 53, 67, 79, 82, 88, 99], "set": [1, 8, 10, 11, 12, 16, 18, 22, 23, 24, 26, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100], "cpnest_fil": [2, 42], "infer": [2, 3, 5, 6, 9, 30, 33, 34, 38, 40, 41, 44, 45, 50, 53, 56, 76, 79, 83, 86], "io": [2, 11, 29, 31, 44, 50, 53, 56, 61, 64, 65, 66], "cpnest": [2, 5, 6, 31, 42, 44, 62, 65], "cpnestfil": [2, 42], "base_nested_sampl": [2, 42, 53, 61], "basenestedsamplerfil": [2, 42, 61, 62], "base_sampl": [2, 42, 53, 61], "basesamplerfil": [2, 42, 61, 62], "base_hdf": [2, 42, 53, 61], "baseinferencefil": [2, 42, 61, 62, 64, 65], "dynesty_fil": [2, 42, 62], "dynesti": [2, 5, 6, 31, 35, 36, 37, 38, 41, 42, 44, 53, 61, 79], "dynestyfil": [2, 42, 61, 62], "commonnestedmetadataio": [2, 42, 61, 62], "emcee_fil": [2, 42, 62], "emce": [2, 5, 6, 31, 32, 42, 44, 53, 61, 94], "emceefil": [2, 42, 61, 62], "base_mcmc": [2, 5, 42, 44, 53, 61], "ensemblemcmcmetadataio": [2, 42, 61, 62], "commonmcmcmetadataio": [2, 42, 61, 62], "emcee_pt_fil": [2, 42, 62], "emcee_pt": [2, 5, 6, 31, 33, 34, 39, 40, 42, 44, 53, 61], "emceeptfil": [2, 42, 61, 62, 65], "base_multitemp": [2, 5, 42, 44, 53, 61], "commonmultitemperedmetadataio": [2, 42, 61, 62], "epsie_fil": [2, 42, 62], "epsi": [2, 5, 6, 31, 42, 44, 53, 61, 63], "epsiefil": [2, 42, 61, 62], "mcmcmetadataio": [2, 42, 61, 62], "multinest_fil": [2, 42, 62], "multinest": [2, 5, 6, 31, 42, 44, 53, 61], "multinestfil": [2, 42, 61, 62], "nessai_fil": [2, 42, 62], "nessai": [2, 5, 6, 31, 42, 44, 53, 61], "nessaifil": [2, 42, 61, 62], "posterior_fil": [2, 42, 62, 64, 79], "posterior": [2, 32, 33, 36, 37, 38, 39, 41, 53, 61, 64, 65, 71, 73, 79, 93, 94], "posteriorfil": [2, 42, 61, 62], "ptemcee_fil": [2, 42, 62], "ptemce": [2, 5, 6, 31, 42, 44, 53, 61], "ptemceefil": [2, 42, 61, 62, 65], "snowline_fil": [2, 42, 62], "snowlin": [2, 5, 6, 31, 42, 44, 53, 61], "snowlinefil": [2, 42, 61, 62], "ultranest_fil": [2, 42, 62], "ultranest": [2, 5, 6, 31, 42, 44, 53, 61], "ultranestfil": [2, 42, 61, 62], "brute_lisa_sky_modes_margin": [3, 31, 43, 64], "brute_marg": [3, 31, 53, 61], "brutelisaskymodesmargin": [3, 31, 61, 64], "brute_parallel_gaussian_margin": [3, 31, 64], "bruteparallelgaussianmargin": [3, 31, 61, 64], "gated_gaussian_margpol": [3, 31, 64], "gated_gaussian_nois": [3, 31, 53, 61], "gatedgaussianmargpol": [3, 31, 61, 64], "gatedgaussiannois": [3, 31, 61, 64], "gaussian_nois": [3, 31, 33, 38, 43, 53, 61], "gaussiannois": [3, 31, 33, 43, 61, 64], "hierarch": [3, 31, 43, 53, 61, 79], "hierarchicalmodel": [3, 31, 35, 43, 61, 64], "joint_primary_margin": [3, 31, 64], "jointprimarymarginalizedmodel": [3, 31, 61, 64], "marginalized_hmpolphas": [3, 31, 43, 64], "marginalized_gaussian_nois": [3, 31, 43, 53, 61], "marginalizedhmpolphas": [3, 31, 43, 61, 64], "marginalized_phas": [3, 31, 33, 43, 64, 93, 94], "marginalizedphasegaussiannois": [3, 31, 33, 43, 61, 64], "marginalized_polar": [3, 31, 43, 64], "marginalizedpolar": [3, 31, 43, 61, 64], "marginalized_tim": [3, 31, 38, 43, 64], "marginalizedtim": [3, 31, 38, 43, 61, 64], "multi_sign": [3, 31, 43, 64], "multisignalmodel": [3, 31, 43, 61, 64], "rel": [3, 12, 16, 31, 35, 36, 37, 41, 53, 57, 61, 64, 69, 71, 72, 73, 75, 76, 77, 78, 85, 92, 95], "relbin": [3, 31, 43, 53, 61, 94], "relative_tim": [3, 31, 43, 64], "relativetim": [3, 31, 43, 61, 64], "relative_time_dom": [3, 31, 43, 64], "relativetimedom": [3, 31, 61, 64], "single_templ": [3, 31, 41, 43, 53, 61, 79], "singletempl": [3, 31, 41, 43, 61, 64], "test_eggbox": [3, 31, 64], "testeggbox": [3, 31, 61, 64], "test_norm": [3, 31, 32, 40, 64], "testnorm": [3, 31, 32, 61, 64], "test_posterior": [3, 31, 64], "testposterior": [3, 31, 61, 64], "test_prior": [3, 31, 64], "testprior": [3, 31, 61, 64], "test_rosenbrock": [3, 31, 64], "testrosenbrock": [3, 31, 61, 64], "test_volcano": [3, 31, 64], "testvolcano": [3, 31, 61, 64], "advbnsoptimizedsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "advdesignsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "advearlyhighsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "advearlylowsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "advlatehighsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "advlatelowsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "advmidhighsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "advmidlowsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "advo3lowt1800545": [4, 31, 53, 72, 82, 92, 100], "advo4intermediatet1800545": [4, 31, 53, 72, 82, 92, 100], "advo4t1800545": [4, 31, 53, 72, 82, 92, 100], "advvirgo": [4, 31, 53, 72, 82, 92, 100], "cosmicexplorerp1600143": [4, 31, 53, 72, 82, 92, 100], "cosmicexplorerpessimisticp1600143": [4, 31, 53, 72, 82, 92, 100], "cosmicexplorerwidebandp1600143": [4, 31, 53, 72, 82, 92, 100], "einsteintelescopep1600143": [4, 31, 53, 72, 82, 92, 100], "geohf": [4, 31, 53, 72, 82, 92, 100], "geo": [4, 31, 53, 72, 82, 92, 100], "kagra128mpct1800545": [4, 31, 53, 72, 82, 92, 100], "kagra25mpct1800545": [4, 31, 53, 72, 82, 92, 100], "kagra80mpct1800545": [4, 31, 53, 72, 82, 92, 100], "kagradesignsensitivityt1600593": [4, 31, 53, 72, 82, 92, 100], "kagraearlysensitivityt1600593": [4, 31, 53, 72, 82, 92, 100], "kagralatesensitivityt1600593": [4, 31, 53, 72, 82, 92, 100], "kagramidsensitivityt1600593": [4, 31, 53, 72, 82, 92, 100], "kagraopeningsensitivityt1600593": [4, 31, 53, 72, 82, 92, 100], "kagra": [4, 31, 53, 72, 82, 92, 100], "tama": [4, 31, 53, 72, 82, 92, 100], "virgo": [4, 14, 15, 30, 31, 53, 54, 72, 80, 82, 92, 94, 98, 100], "aligo140mpct1800545": [4, 31, 53, 72, 82, 92, 100], "aligo175mpct1800545": [4, 31, 53, 72, 82, 92, 100], "aligoaplusdesignsensitivityt1800042": [4, 31, 53, 72, 82, 92, 100], "aligoadvo3lowt1800545": [4, 31, 53, 72, 82, 92, 100], "aligoadvo4intermediatet1800545": [4, 31, 53, 72, 82, 92, 100], "aligoadvo4t1800545": [4, 31, 53, 72, 80, 82, 92, 100], "aligobhbh20deggwinc": [4, 31, 53, 72, 82, 92, 100], "aligobhbh20deg": [4, 31, 53, 72, 82, 92, 100], "aligobnsoptimizedsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "aligodesignsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "aligodesignsensitivityt1800044": [4, 31, 53, 72, 82, 92, 100], "aligoearlyhighsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "aligoearlylowsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "aligohighfrequencygwinc": [4, 31, 53, 72, 82, 92, 100], "aligohighfrequ": [4, 31, 53, 72, 82, 92, 100], "aligokagra128mpct1800545": [4, 31, 53, 72, 82, 92, 100], "aligokagra25mpct1800545": [4, 31, 53, 72, 82, 92, 100], "aligokagra80mpct1800545": [4, 31, 53, 72, 82, 92, 100], "aligolatehighsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "aligolatelowsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "aligomidhighsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "aligomidlowsensitivityp1200087": [4, 31, 53, 72, 82, 92, 100], "aligonsnsoptgwinc": [4, 31, 53, 72, 82, 92, 100], "aligonsnsopt": [4, 31, 53, 72, 82, 92, 100], "aligonosrmhighpow": [4, 31, 53, 72, 82, 92, 100], "aligonosrmlowpowergwinc": [4, 31, 53, 72, 82, 92, 100], "aligonosrmlowpow": [4, 31, 53, 72, 82, 92, 100], "aligoo3lowt1800545": [4, 31, 53, 72, 82, 92, 100], "aligoquantumbhbh20deg": [4, 31, 53, 72, 82, 92, 100], "aligoquantumhighfrequ": [4, 31, 53, 72, 82, 92, 100], "aligoquantumnsnsopt": [4, 31, 53, 72, 82, 92, 100], "aligoquantumnosrmhighpow": [4, 31, 53, 72, 82, 92, 100], "aligoquantumnosrmlowpow": [4, 31, 53, 72, 82, 92, 100], "aligoquantumzerodethighpow": [4, 31, 53, 72, 82, 92, 100], "aligoquantumzerodetlowpow": [4, 31, 53, 72, 82, 92, 100], "aligotherm": [4, 31, 53, 72, 82, 92, 100], "aligozerodethighpowergwinc": [4, 31, 53, 72, 82, 92, 100], "aligozerodethighpow": [4, 22, 24, 31, 51, 52, 53, 64, 72, 82, 85, 92, 96, 100], "aligozerodetlowpowergwinc": [4, 31, 53, 72, 82, 92, 100], "aligozerodetlowpow": [4, 31, 52, 53, 72, 82, 92, 100], "aligoaligo140mpct1800545": [4, 31, 53, 72, 82, 92, 100], "aligoaligo175mpct1800545": [4, 31, 53, 72, 82, 92, 100], "aligoaligodesignsensitivityt1800044": [4, 31, 33, 35, 53, 72, 82, 92, 100], "aligoaligoo3lowt1800545": [4, 31, 53, 72, 82, 92, 100], "analytical_psd_lisa_tdi_ae_confus": [4, 31, 53, 72, 82, 92, 100], "analytical_spac": [4, 31, 50, 53, 82], "analytical_psd_lisa_tdi_a": [4, 31, 36, 53, 72, 82, 92, 100], "analytical_psd_lisa_tdi_t": [4, 31, 36, 53, 72, 82, 92, 100], "analytical_psd_lisa_tdi_xyz": [4, 31, 53, 72, 82, 92, 100], "analytical_psd_taiji_tdi_ae_confus": [4, 31, 53, 72, 82, 92, 100], "analytical_psd_taiji_tdi_a": [4, 31, 53, 72, 82, 92, 100], "analytical_psd_taiji_tdi_t": [4, 31, 53, 72, 82, 92, 100], "analytical_psd_taiji_tdi_xyz": [4, 31, 53, 72, 82, 92, 100], "analytical_psd_tianqin_tdi_ae_confus": [4, 31, 53, 72, 82, 92, 100], "analytical_psd_tianqin_tdi_a": [4, 31, 53, 72, 82, 92, 100], "analytical_psd_tianqin_tdi_t": [4, 31, 53, 72, 82, 92, 100], "analytical_psd_tianqin_tdi_xyz": [4, 31, 53, 72, 82, 92, 100], "eligomodel": [4, 31, 53, 72, 82, 92, 100], "eligoshot": [4, 31, 53, 72, 82, 92, 100], "flat_un": [4, 31, 53, 72, 82, 92, 100], "iligomodel": [4, 10, 31, 53, 72, 82, 92, 100], "iligosrd": [4, 31, 53, 72, 82, 92, 100], "iligoseism": [4, 31, 53, 72, 82, 92, 100], "iligoshot": [4, 31, 53, 72, 82, 92, 100], "iligotherm": [4, 31, 53, 72, 82, 92, 100], "sh_transformed_psd_lisa_tdi_xyz": [4, 31, 53, 72, 82, 92, 100], "sampler": [5, 6, 32, 33, 34, 35, 36, 37, 38, 39, 53, 56, 61, 62, 63, 64, 67, 71, 79, 93, 94], "cpnestsampl": [5, 6, 31, 44], "base": [5, 8, 14, 24, 26, 31, 42, 44, 50, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 86, 87, 90, 91, 95, 97], "basesampl": [5, 44, 61, 65], "dummi": [5, 6, 31, 41, 44, 53, 61, 67], "dummysampl": [5, 6, 31, 44, 61, 65], "dynestysampl": [5, 6, 31, 44, 61, 65], "emceeensemblesampl": [5, 6, 31, 42, 44, 61, 65], "ensemblesupport": [5, 44, 61, 65], "basemcmc": [5, 44, 61, 65], "emceeptsampl": [5, 6, 31, 44, 61, 65], "multitemperedsupport": [5, 44, 61, 65], "epsiesampl": [5, 6, 31, 44, 61, 65], "multinestsampl": [5, 6, 31, 44, 61, 65], "nessaisampl": [5, 6, 31, 44, 61, 65], "ptemceesampl": [5, 6, 31, 44, 61, 65], "refin": [5, 6, 31, 44, 53, 61], "refinesampl": [5, 6, 31, 44, 61, 65], "snowlinesampl": [5, 6, 31, 44, 61, 65], "ultranestsampl": [5, 6, 31, 44, 61, 65], "align_total_spin": [7, 31, 53, 97], "transform": [7, 18, 23, 33, 34, 35, 36, 37, 38, 39, 50, 55, 56, 58, 59, 64, 65, 72, 75, 76, 78, 79, 87, 92, 94], "aligntotalspin": [7, 31, 50, 53], "aligned_mass_spin_to_cartesian_spin": [7, 31, 53], "alignedmassspintocartesianspin": [7, 31, 50, 53], "cartesian_spin_1_to_spherical_spin_1": [7, 31, 53], "cartesianspin1tosphericalspin1": [7, 31, 50, 53], "cartesian_spin_2_to_spherical_spin_2": [7, 31, 53], "cartesianspin2tosphericalspin2": [7, 31, 50, 53], "cartesian_spin_to_aligned_mass_spin": [7, 31, 53], "cartesianspintoalignedmassspin": [7, 31, 50, 53], "cartesian_spin_to_chi_p": [7, 31, 53], "cartesianspintochip": [7, 31, 50, 53], "cartesian_spin_to_precession_mass_spin": [7, 31, 53], "cartesianspintoprecessionmassspin": [7, 31, 50, 53], "cartesian_to_spher": [7, 31, 53, 55], "cartesiantospher": [7, 31, 50, 53], "chirp_distance_to_dist": [7, 31, 53], "chirpdistancetodist": [7, 31, 50, 53], "custom": [7, 20, 31, 33, 35, 36, 37, 41, 47, 53, 56, 62, 63, 64, 78, 83, 94, 97], "customtransform": [7, 31, 50, 53], "custom_multi": [7, 31, 53], "customtransformmultioutput": [7, 31, 50, 53], "distance_to_chirp_dist": [7, 31, 53], "distancetochirpdist": [7, 31, 50, 53], "distance_to_redshift": [7, 31, 53], "distancetoredshift": [7, 31, 50, 53], "expon": [7, 31, 50, 53, 64, 92, 100], "geo_to_lisa": [7, 31, 53, 55], "geotolisa": [7, 31, 50, 53], "geo_to_ssb": [7, 31, 53, 55], "geotossb": [7, 31, 50, 53], "lambda_from_multiple_tov_fil": [7, 31, 53], "lambdafrommultipletovfil": [7, 31, 50, 53], "lambda_from_tov_fil": [7, 31, 53], "lambdafromtovfil": [7, 31, 50, 53], "lisa_to_geo": [7, 31, 53, 55], "lisatogeo": [7, 31, 50, 53], "lisa_to_ssb": [7, 31, 53, 55], "lisatossb": [7, 31, 50, 53], "log": [7, 10, 13, 19, 22, 29, 31, 32, 41, 42, 49, 50, 53, 56, 57, 59, 61, 62, 64, 65, 67, 71, 74, 75, 76, 79, 82, 85, 86, 92, 94, 95, 99, 100], "logist": [7, 31, 50, 53], "logit": [7, 31, 50, 53], "mass1_mass2_to_mchirp_eta": [7, 31, 50, 53], "mass1mass2tomchirpeta": [7, 31, 50, 53], "mass1_mass2_to_mchirp_q": [7, 31, 33, 53, 94], "mass1mass2tomchirpq": [7, 31, 50, 53], "mchirp_eta_to_mass1_mass2": [7, 31, 39, 50, 53], "mchirpetatomass1mass2": [7, 31, 50, 53], "mchirp_q_to_mass1_mass2": [7, 31, 36, 37, 50, 53], "mchirpqtomass1mass2": [7, 31, 50, 53], "precession_mass_spin_to_cartesian_spin": [7, 31, 53], "precessionmassspintocartesianspin": [7, 31, 50, 53], "spherical_spin_1_to_cartesian_spin_1": [7, 31, 53], "sphericalspin1tocartesianspin1": [7, 31, 50, 53], "spherical_spin_2_to_cartesian_spin_2": [7, 31, 53], "sphericalspin2tocartesianspin2": [7, 31, 50, 53], "spherical_to_cartesian": [7, 18, 31, 33, 53, 55, 94], "sphericaltocartesian": [7, 31, 50, 53], "ssb_to_geo": [7, 31, 53, 55], "ssbtogeo": [7, 31, 50, 53], "ssb_to_lisa": [7, 31, 53, 55], "ssbtolisa": [7, 31, 50, 53], "paramet": [8, 10, 14, 18, 21, 29, 30, 32, 33, 35, 38, 39, 42, 45, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 85, 86, 88, 89, 90, 91, 92, 95, 98, 99, 100], "mass1": [8, 10, 16, 22, 24, 28, 29, 31, 33, 35, 36, 37, 38, 39, 41, 45, 53, 56, 61, 64, 67, 71, 75, 78, 79, 82, 83, 85, 90, 91, 92, 94, 95, 96, 100], "compon": [8, 10, 29, 31, 33, 38, 48, 53, 56, 57, 59, 64, 67, 68, 71, 75, 78, 79, 82, 100], "object": [8, 12, 14, 18, 26, 31, 33, 44, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 88, 90, 92, 100], "binari": [8, 18, 29, 30, 31, 33, 35, 36, 37, 53, 54, 57, 67, 71, 78, 82, 84, 87, 94, 95, 97, 100], "solar": [8, 18, 29, 31, 33, 53, 69, 78, 82, 100], "mass2": [8, 10, 16, 22, 24, 28, 29, 31, 33, 35, 36, 37, 38, 39, 41, 45, 53, 56, 61, 64, 67, 71, 75, 78, 79, 82, 83, 85, 90, 91, 92, 94, 95, 96, 100], "spin1x": [8, 31, 33, 53, 67, 78, 79, 94], "x": [8, 12, 18, 31, 32, 33, 40, 42, 53, 55, 56, 57, 59, 60, 61, 62, 64, 65, 67, 69, 71, 72, 73, 75, 78, 79, 81, 90, 92, 94, 96, 98], "dimensionless": [8, 31, 53, 67, 69, 71, 78], "spin1i": [8, 31, 33, 53, 67, 78, 79, 94], "y": [8, 12, 18, 29, 31, 32, 33, 40, 53, 55, 56, 59, 64, 67, 69, 72, 73, 78, 81, 94], "spin1z": [8, 31, 33, 36, 37, 39, 41, 53, 64, 67, 71, 75, 78, 79, 85, 94], "spin2x": [8, 31, 33, 53, 67, 78, 79, 94], "spin2i": [8, 31, 33, 53, 67, 78, 79, 94], "spin2z": [8, 31, 33, 36, 37, 53, 64, 67, 71, 75, 78, 85, 94], "eccentr": [8, 31, 78], "lambda1": [8, 31, 53, 67, 75, 78], "tidal": [8, 10, 31, 53, 78], "deform": [8, 10, 31, 53, 78], "1": [8, 10, 13, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 49, 51, 52, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], "lambda2": [8, 31, 53, 67, 75, 78], "2": [8, 10, 13, 15, 16, 18, 22, 23, 24, 25, 28, 29, 31, 32, 34, 35, 36, 37, 38, 45, 47, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85, 86, 89, 90, 91, 92, 94, 95, 98, 100], "dquad_mon1": [8, 31, 78], "quadrupol": [8, 31, 53, 78], "monopol": [8, 31, 53, 78], "m_1": [8, 31, 53, 56, 73, 78], "5": [8, 10, 13, 16, 18, 22, 24, 28, 29, 31, 33, 36, 37, 38, 39, 41, 46, 47, 53, 56, 57, 59, 61, 62, 64, 65, 67, 71, 72, 73, 74, 75, 76, 78, 79, 82, 85, 89, 90, 92, 95, 97, 100], "dquad_mon2": [8, 31, 78], "m_2": [8, 31, 53, 56, 73, 78], "lambda_octu1": [8, 31, 78], "octupolar": [8, 31, 78], "lambda_octu2": [8, 31, 78], "quadfmode1": [8, 31, 78], "quadrupolar": [8, 31, 78], "mode": [8, 12, 29, 31, 33, 37, 38, 43, 53, 59, 62, 64, 67, 71, 73, 76, 78, 83, 92, 95, 100], "quadfmode2": [8, 31, 78], "octufmode1": [8, 31, 78], "octufmode2": [8, 31, 78], "dchi0": [8, 31, 78], "0pn": [8, 31, 78], "testinggr": [8, 31, 78], "dchi1": [8, 31, 78], "5pn": [8, 31, 53, 75, 78, 82, 95, 100], "dchi2": [8, 31, 78], "1pn": [8, 31, 75, 78, 82, 100], "dchi3": [8, 31, 78], "dchi4": [8, 31, 78], "2pn": [8, 31, 53, 75, 78, 82, 100], "dchi5": [8, 31, 78], "dchi5l": [8, 31, 78], "logrithm": [8, 31, 78], "dchi6": [8, 31, 78], "3pn": [8, 31, 53, 75, 78, 82, 100], "dchi6l": [8, 31, 78], "dchi7": [8, 31, 78], "3": [8, 10, 13, 18, 28, 31, 39, 40, 41, 46, 47, 52, 53, 54, 56, 57, 58, 60, 62, 64, 65, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 85, 86, 90, 91, 92, 93, 94, 95, 97, 98, 100], "dalpha1": [8, 31, 78], "merger": [8, 14, 28, 31, 33, 35, 39, 41, 43, 53, 54, 71, 78, 82, 83, 85, 86, 94], "ringdown": [8, 29, 31, 33, 50, 53, 66], "dalpha2": [8, 31, 78], "dalpha3": [8, 31, 78], "dalpha4": [8, 31, 78], "dalpha5": [8, 31, 78], "dbeta1": [8, 31, 78], "intermedi": [8, 31, 64, 74, 78, 79, 82, 92, 94, 95], "dbeta2": [8, 31, 78], "dbeta3": [8, 31, 78], "distanc": [8, 10, 16, 18, 22, 29, 31, 33, 35, 36, 37, 38, 39, 41, 43, 45, 50, 53, 64, 66, 67, 71, 73, 74, 75, 78, 82, 89, 91, 93, 94, 95], "luminos": [8, 31, 53, 67, 71, 78, 94], "mpc": [8, 31, 53, 67, 71, 78, 94], "coa_phas": [8, 25, 31, 33, 36, 37, 38, 41, 43, 45, 57, 67, 78, 85, 94], "coales": [8, 31, 78], "phase": [8, 10, 24, 25, 28, 31, 33, 38, 43, 53, 57, 58, 59, 64, 66, 74, 75, 76, 77, 78, 83, 92, 94, 95], "rad": [8, 31, 53, 56, 78, 79], "inclin": [8, 10, 16, 29, 31, 33, 35, 36, 37, 38, 39, 41, 43, 45, 53, 57, 64, 67, 69, 78, 79, 85, 93, 94, 95], "angl": [8, 18, 31, 33, 35, 41, 43, 53, 55, 56, 57, 64, 67, 69, 72, 74, 78, 94], "orbit": [8, 31, 43, 53, 55, 59, 64, 69, 71, 75, 78, 82, 100], "momentum": [8, 31, 53, 69, 78], "l": [8, 10, 19, 22, 29, 31, 34, 38, 39, 41, 44, 53, 56, 60, 64, 67, 72, 78, 79, 85, 88, 91, 95], "sight": [8, 31, 53, 78], "long_asc_nod": [8, 31, 78], "longitud": [8, 16, 31, 53, 55, 78], "ascend": [8, 31, 75, 78], "node": [8, 10, 31, 48, 53, 65, 78, 79, 82, 87, 88, 90, 91, 95, 97], "axi": [8, 18, 31, 45, 53, 59, 67, 73, 78, 95], "mean_per_ano": [8, 31, 78], "anomali": [8, 31, 78], "periastron": [8, 31, 78], "delta_t": [8, 16, 23, 24, 26, 28, 31, 51, 52, 53, 58, 59, 64, 66, 70, 72, 74, 76, 78, 85, 86], "step": [8, 10, 12, 22, 29, 31, 32, 42, 44, 45, 57, 59, 61, 65, 70, 72, 74, 76, 78, 79, 82, 86, 91, 94, 95, 100], "waveform": [8, 9, 10, 12, 16, 21, 22, 24, 28, 30, 33, 35, 36, 37, 38, 39, 41, 48, 50, 53, 56, 59, 61, 62, 64, 66, 67, 68, 71, 73, 74, 76, 77, 82, 83, 87, 91, 92, 94, 95, 100], "f_lower": [8, 16, 24, 28, 31, 33, 35, 36, 37, 38, 39, 41, 53, 57, 64, 66, 67, 78, 85, 86, 94], "approxim": [8, 10, 12, 13, 16, 21, 22, 24, 25, 28, 29, 31, 33, 35, 36, 37, 38, 39, 41, 43, 53, 56, 57, 64, 66, 67, 68, 71, 75, 76, 77, 78, 79, 82, 85, 92, 94, 95, 96, 97, 100], "string": [8, 19, 31, 48, 52, 53, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 88, 90, 91, 92, 95, 97, 98, 99, 100], "indic": [8, 10, 31, 53, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 82, 90, 92, 95, 97], "chosen": [8, 31, 53, 64, 69, 70, 72, 75, 76, 78, 79, 82], "f_ref": [8, 31, 33, 35, 36, 53, 78, 94], "phase_ord": [8, 31, 53, 66, 78, 85], "pn": [8, 10, 22, 31, 53, 64, 75, 78, 82, 85, 90, 92, 95, 100], "order": [8, 10, 20, 22, 29, 31, 33, 36, 38, 39, 43, 44, 45, 48, 53, 56, 57, 59, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 78, 79, 80, 82, 85, 90, 92, 93, 94, 95, 97, 98, 100], "all": [8, 10, 11, 12, 14, 16, 18, 19, 20, 22, 25, 26, 29, 31, 33, 35, 36, 37, 42, 43, 44, 45, 48, 49, 53, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100], "implement": [8, 14, 24, 30, 31, 43, 44, 48, 57, 58, 59, 62, 64, 65, 66, 67, 78, 79, 82, 85, 88, 89, 90, 94, 95], "spin_ord": [8, 31, 53, 78], "correct": [8, 10, 16, 23, 29, 31, 34, 43, 46, 49, 53, 57, 61, 64, 65, 67, 71, 74, 75, 78, 81, 82, 95, 100], "tidal_ord": [8, 31, 78], "amplitude_ord": [8, 31, 78], "amplitud": [8, 10, 29, 31, 33, 34, 38, 53, 55, 57, 59, 66, 72, 74, 75, 78, 83], "eccentricity_ord": [8, 31, 78], "frame_axi": [8, 31, 78], "among": [8, 31, 43, 78, 79], "orbital_l": [8, 31, 78], "view": [8, 16, 31, 53, 67, 76, 78, 82, 95], "total_j": [8, 31, 78], "modes_choic": [8, 31, 78], "turn": [8, 31, 35, 44, 59, 63, 64, 65, 66, 73, 78, 82, 94], "side_band": [8, 31, 78], "sideband": [8, 31, 78], "mode_arrai": [8, 31, 37, 78, 85], "m": [8, 10, 11, 13, 22, 29, 31, 33, 53, 55, 56, 59, 61, 64, 67, 69, 72, 74, 78, 82, 85, 91, 95, 100], "includ": [8, 10, 12, 14, 19, 20, 22, 29, 30, 31, 33, 35, 41, 42, 43, 46, 48, 53, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67, 71, 73, 74, 75, 76, 78, 79, 82, 83, 86, 88, 89, 90, 92, 93, 94, 95, 97, 98, 100], "featur": [8, 25, 31, 35, 41, 44, 46, 47, 53, 67, 76, 78, 79, 82, 90, 95, 97], "By": [8, 16, 23, 31, 32, 37, 38, 39, 41, 44, 45, 53, 55, 56, 60, 63, 64, 65, 67, 74, 76, 78, 79, 85, 86, 92, 93, 100], "none": [8, 31, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 85, 88, 90, 91, 92, 95, 98, 99, 100], "let": [8, 29, 31, 44, 57, 64, 75, 76, 78, 79, 82, 85, 86, 90, 94, 97, 98], "lalsimul": [8, 12, 31, 33, 34, 48, 53, 72, 78, 83, 95], "behaviour": [8, 31, 53, 76, 78, 79, 88], "exampl": [8, 10, 11, 12, 13, 15, 16, 19, 20, 23, 24, 28, 29, 30, 32, 36, 37, 39, 40, 42, 43, 45, 48, 49, 53, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 73, 76, 78, 79, 80, 81, 85, 86, 89, 91, 92, 95, 96, 97, 99, 100], "numrel_data": [8, 31, 78], "nr": [8, 31, 78], "delta_f": [8, 23, 24, 28, 31, 51, 52, 53, 58, 59, 64, 68, 72, 74, 76, 77, 78, 82, 85, 86, 100], "made": [8, 10, 22, 31, 35, 44, 53, 56, 57, 60, 61, 64, 67, 73, 78, 79, 81, 82, 88, 89, 92, 94, 95, 100], "f_final_func": [8, 31, 78], "tc": [8, 31, 33, 35, 36, 37, 38, 39, 41, 43, 45, 53, 64, 66, 67, 78, 94], "coalesc": [8, 30, 31, 33, 35, 38, 39, 41, 53, 59, 64, 71, 78, 79, 82, 87, 94, 95, 97], "gw": [8, 16, 30, 31, 46, 53, 54, 55, 64, 72, 83, 86, 92], "reach": [8, 31, 65, 73, 79, 82], "origin": [8, 11, 24, 31, 53, 55, 56, 57, 62, 64, 74, 75, 76, 78, 79, 88, 95], "certain": [8, 18, 31, 48, 52, 56, 71, 90, 95], "coordin": [8, 16, 18, 31, 33, 36, 37, 50, 53, 56, 65, 69, 75, 82, 94, 97], "system": [8, 12, 14, 20, 23, 31, 33, 46, 47, 48, 49, 53, 56, 64, 69, 71, 75, 78, 82, 89, 90, 92, 95], "ra": [8, 16, 29, 31, 33, 35, 38, 39, 41, 43, 45, 53, 56, 61, 63, 64, 67, 73, 78, 93, 94, 97], "right": [8, 31, 33, 44, 53, 56, 57, 59, 64, 72, 73, 76, 77, 78, 80, 85, 92, 93, 94, 98], "ascens": [8, 31, 53, 56, 78, 85], "dec": [8, 16, 29, 31, 33, 35, 38, 39, 41, 43, 45, 53, 56, 57, 64, 67, 73, 78, 93, 94, 97], "declin": [8, 16, 31, 53, 56, 78, 85], "polar": [8, 18, 29, 31, 33, 35, 36, 37, 38, 39, 41, 43, 45, 53, 55, 56, 57, 59, 64, 66, 67, 69, 72, 78, 85, 86, 93, 94], "eclipticlatitud": [8, 31, 36, 37, 53], "ssb": [8, 31, 36, 53, 55], "lisa": [8, 31, 43, 50, 53, 55, 64, 72, 82], "coord": [8, 31, 53], "eclipticlongitud": [8, 31, 36, 37, 53], "user": [9, 10, 12, 20, 23, 25, 29, 33, 44, 46, 48, 49, 52, 53, 60, 64, 66, 69, 71, 78, 79, 82, 90, 92, 95, 97, 100], "who": [9, 17, 35, 42, 53, 79], "interest": [9, 17, 26, 28, 30, 31, 57, 79], "tool": [9, 10, 12, 26, 29, 30, 31, 46, 53, 57, 61, 67, 78, 80, 87, 95, 97], "variou": [9, 31, 43, 53, 57, 58, 59, 64, 72, 73, 75, 76, 78, 79, 82, 88, 90, 92, 94, 96, 97, 98, 100], "other": [9, 11, 12, 20, 23, 25, 29, 30, 31, 37, 40, 41, 42, 43, 44, 49, 53, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 71, 72, 73, 75, 76, 78, 79, 81, 82, 85, 86, 87, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100], "task": [9, 15, 53, 95, 96], "g": [9, 12, 16, 19, 20, 25, 26, 31, 34, 42, 43, 44, 48, 53, 56, 57, 61, 62, 64, 65, 66, 67, 68, 71, 73, 74, 75, 76, 78, 79, 81, 82, 85, 88, 90, 92, 94, 95, 97, 98, 99, 100], "templat": [9, 12, 22, 25, 28, 29, 30, 31, 37, 43, 48, 53, 57, 58, 59, 64, 66, 67, 71, 72, 73, 74, 75, 77, 78, 79, 89, 90, 92, 95, 96, 97, 99], "bank": [9, 12, 25, 29, 30, 48, 50, 53, 57, 59, 66, 67, 71, 73, 75, 77, 79, 89, 90, 92, 95, 96, 97, 99], "hardwar": [9, 30, 53, 74, 83, 98], "test": [9, 10, 12, 16, 26, 31, 32, 33, 37, 38, 39, 40, 41, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 74, 75, 76, 77, 79, 82, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 98, 100], "document": [9, 12, 16, 19, 30, 34, 38, 40, 44, 56, 64, 65, 67, 71, 75, 76, 78, 79, 83, 84, 88, 89, 91, 92, 93, 98, 99, 100], "pycbc_make_psd_estimation_workflow": 9, "pycbc_make_offline_search_workflow": 9, "search": [9, 10, 21, 25, 48, 53, 56, 57, 67, 72, 73, 76, 77, 78, 79, 80, 82, 86, 87, 88, 89, 91, 92, 96, 97, 98], "wave": [9, 14, 23, 31, 34, 38, 39, 41, 43, 53, 60, 64, 67, 71, 78, 79, 83, 85, 86, 87, 90, 91, 92, 94, 97, 100], "pycbc_make_offline_grb_workflow": 9, "grb": [9, 30, 43, 57, 71, 79], "tmpltbank": [9, 50, 53, 76, 87, 90, 92, 95, 97, 99], "effectu": 9, "fit": [9, 40, 43, 53, 57, 59, 69, 71, 72, 76, 78, 79, 82, 94, 95], "dag": [9, 10, 79, 82, 88], "do": [9, 10, 11, 12, 14, 19, 23, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 53, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100], "faith": 9, "comparison": [9, 18, 72, 76, 82, 89], "upload": [9, 53, 67, 73, 79], "gracedb": [9, 67, 73, 79], "pycbc_condition_strain": [9, 79], "oper": [9, 12, 31, 58, 66, 67, 76, 79, 92, 99], "page": [10, 12, 14, 17, 18, 20, 22, 29, 30, 31, 40, 43, 48, 73, 76, 79, 81, 82, 84, 87, 88, 89, 90, 95, 97, 98], "describ": [10, 20, 22, 24, 29, 31, 33, 47, 48, 53, 56, 58, 64, 74, 75, 76, 78, 79, 82, 84, 88, 90, 91, 92, 94, 95, 98, 99, 100], "how": [10, 15, 16, 17, 18, 20, 23, 24, 28, 30, 31, 32, 35, 36, 37, 43, 45, 46, 48, 52, 53, 57, 58, 61, 62, 64, 72, 75, 78, 79, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100], "banksim": [10, 22, 82], "facil": 10, "within": [10, 12, 16, 17, 22, 26, 30, 44, 52, 53, 55, 56, 57, 58, 60, 61, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 78, 79, 82, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100], "maxim": [10, 57, 59, 64, 65, 75, 76, 77, 78, 92], "purpos": [10, 16, 31, 35, 42, 53, 62, 64, 74, 82, 84, 90, 95, 98], "investig": [10, 82, 88], "construct": [10, 25, 56, 59, 62, 64, 65, 73, 75, 79, 82, 87, 90, 91, 92, 95, 98, 99, 100], "new": [10, 12, 16, 17, 21, 31, 33, 42, 43, 44, 46, 53, 55, 56, 57, 59, 62, 65, 66, 67, 72, 73, 74, 75, 76, 78, 79, 81, 82, 85, 90, 91, 92, 94, 97, 98, 99, 100], "well": [10, 12, 23, 31, 56, 57, 60, 62, 64, 66, 67, 73, 75, 82, 90, 93, 95, 96], "act": [10, 31, 33, 53, 60, 61, 62, 64, 65, 79, 88, 89], "saniti": [10, 74, 75, 79, 88], "check": [10, 11, 12, 18, 31, 32, 33, 49, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 66, 74, 75, 76, 78, 79, 81, 82, 87, 88, 90, 92, 94, 95, 96, 97, 98], "methodologi": 10, "therefor": [10, 12, 29, 33, 35, 42, 52, 53, 56, 64, 78, 79, 82, 90, 93, 94, 95, 97, 100], "run": [10, 11, 12, 14, 22, 23, 26, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 53, 56, 57, 60, 61, 62, 64, 65, 68, 71, 73, 75, 77, 78, 79, 80, 82, 85, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100], "same": [10, 16, 18, 20, 22, 23, 25, 29, 31, 32, 33, 34, 35, 36, 38, 43, 44, 45, 48, 53, 56, 57, 59, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 75, 76, 77, 78, 79, 82, 85, 90, 92, 93, 94, 95, 96, 97, 100], "rang": [10, 18, 37, 41, 52, 53, 56, 57, 59, 61, 64, 71, 72, 74, 75, 76, 79, 80, 82, 90, 92, 94, 98, 100], "sensit": [10, 14, 33, 35, 50, 57, 59, 71, 72, 92, 94], "curv": [10, 33, 53, 71, 72], "here": [10, 15, 18, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 44, 47, 53, 56, 57, 58, 59, 62, 64, 65, 66, 67, 71, 72, 75, 76, 78, 79, 82, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "mai": [10, 12, 16, 24, 25, 28, 30, 31, 35, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 71, 75, 76, 78, 79, 82, 86, 88, 89, 90, 92, 93, 94, 95, 97, 98, 100], "optim": [10, 23, 38, 40, 43, 53, 57, 58, 59, 61, 64, 68, 78, 79, 82, 91, 92, 95], "exhaust": 10, "confid": [10, 34, 38, 53, 71, 73, 94], "recov": [10, 33, 41, 57, 79, 93, 95, 97], "design": [10, 31, 33, 35, 38, 43, 57, 59, 67, 79, 82, 87, 88, 90, 92, 98, 100], "accept": [10, 31, 53, 56, 61, 62, 65, 67, 75, 79, 82, 85, 94], "up": [10, 11, 16, 22, 29, 31, 33, 35, 37, 38, 39, 40, 41, 43, 46, 48, 53, 57, 58, 59, 60, 62, 64, 65, 72, 73, 75, 77, 78, 79, 82, 87, 88, 90, 91, 92, 93, 94, 96, 98, 99, 100], "singl": [10, 14, 18, 22, 26, 29, 31, 42, 43, 44, 50, 53, 56, 58, 59, 60, 61, 62, 64, 65, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 88, 89, 91, 92, 93, 94, 95, 98, 100], "below": [10, 12, 14, 15, 17, 18, 22, 24, 29, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 56, 57, 59, 65, 67, 72, 75, 76, 77, 78, 79, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "inspinj": [10, 22, 79, 90, 91], "lower": [10, 22, 29, 33, 50, 53, 54, 56, 57, 59, 64, 68, 71, 72, 75, 77, 78, 82, 91, 92, 94, 95, 100], "15": [10, 13, 18, 22, 28, 31, 33, 34, 35, 36, 38, 39, 41, 53, 69, 71, 72, 74, 80, 82, 84, 89, 92, 94, 96, 100], "distr": [10, 22, 29, 57, 91, 95], "fix": [10, 29, 31, 33, 39, 41, 42, 43, 44, 46, 52, 53, 56, 57, 62, 64, 65, 67, 71, 79, 89, 97, 99], "inc": [10, 16, 73], "min": [10, 18, 22, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 50, 53, 56, 57, 61, 63, 64, 73, 76, 82, 89, 90, 91, 92, 94, 95, 96, 97, 100], "componentmass": [10, 22, 91, 95], "disabl": [10, 22, 48, 60, 90, 91, 92, 95, 100], "milkywai": [10, 22], "1000": [10, 22, 24, 29, 31, 33, 38, 40, 41, 52, 53, 56, 57, 63, 64, 65, 73, 78, 82, 89, 91, 94, 95], "random": [10, 18, 22, 29, 33, 42, 53, 56, 62, 64, 65, 67, 70, 75, 79, 82, 91, 93, 95, 99, 100], "mtotal": [10, 12, 22, 53, 61, 63, 67, 75, 82, 89, 91, 92, 95], "4": [10, 12, 13, 15, 18, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 52, 53, 56, 57, 64, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 85, 90, 92, 94, 95, 96, 98, 100], "spintaylort4": [10, 29, 85, 97], "align": [10, 14, 22, 50, 53, 58, 59, 68, 71, 75, 78], "enabl": [10, 22, 23, 29, 38, 41, 43, 48, 53, 64, 67, 69, 73, 82, 88, 90, 92, 93, 94, 95, 99, 100], "18": [10, 31, 33, 35, 53, 57], "spin1": [10, 22, 29, 37, 53, 82], "05": [10, 18, 59, 82, 85, 97], "spin2": [10, 22, 29, 37, 53, 82], "6": [10, 13, 15, 18, 33, 34, 35, 38, 47, 49, 53, 56, 57, 64, 67, 69, 71, 72, 73, 75, 78, 79, 82, 85, 86, 90, 91, 92, 94, 95], "d": [10, 16, 21, 22, 29, 31, 43, 45, 49, 53, 56, 57, 59, 61, 64, 67, 73, 74, 75, 91, 95], "1000000000": [10, 16, 22, 53, 82, 98], "1000010000": 10, "interv": [10, 22, 29, 31, 33, 40, 45, 53, 56, 57, 62, 65, 71, 72, 73, 76, 78, 79, 89, 91, 92, 94, 95], "execut": [10, 17, 22, 23, 29, 31, 45, 46, 48, 53, 57, 58, 64, 66, 73, 74, 75, 79, 82, 86, 87, 95, 96], "home": [10, 12, 19, 20, 22, 47, 49, 79, 82, 90, 91, 95, 99, 100], "ahnitz": [10, 22, 95], "local": [10, 12, 19, 46, 47, 48, 49, 53, 55, 59, 60, 67, 71, 79, 82, 88, 90, 92, 95, 97, 98, 100], "bin": [10, 18, 19, 20, 22, 25, 29, 32, 33, 34, 36, 37, 46, 47, 48, 49, 50, 53, 57, 61, 64, 71, 74, 75, 77, 78, 79, 82, 89, 90, 92, 95, 99], "pycbc_banksim": [10, 82], "usr1": [10, 22, 95], "gpu": [10, 13, 16, 23, 47, 76, 78, 82, 85, 92, 95, 97, 99, 100], "per": [10, 22, 29, 31, 33, 40, 53, 57, 65, 71, 72, 79, 82, 88, 94, 96, 99, 100], "job": [10, 12, 22, 33, 34, 79, 82, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "50": [10, 18, 31, 38, 41, 52, 56, 59, 64, 73, 74, 82, 85, 86, 94, 95], "100": [10, 16, 18, 22, 31, 32, 33, 36, 38, 39, 40, 41, 45, 53, 56, 57, 59, 64, 67, 71, 72, 75, 78, 79, 82, 85, 86, 92, 93, 95, 96], "taylorf2": [10, 22, 39, 41, 53, 67, 75, 78, 82, 85, 92, 100], "7": [10, 13, 16, 19, 36, 46, 47, 49, 53, 56, 65, 67, 69, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 86, 92, 93, 94, 95], "40": [10, 16, 28, 29, 53, 65, 67, 72, 82, 85, 89, 92, 95, 100], "30": [10, 16, 22, 24, 29, 38, 39, 41, 48, 51, 52, 56, 64, 67, 74, 76, 78, 82, 85, 90, 91, 92, 94, 95, 100], "4096": [10, 16, 22, 24, 29, 34, 38, 51, 52, 54, 64, 72, 78, 82, 85, 86, 92, 94, 95, 96, 97, 100], "256": [10, 29, 33, 34, 35, 38, 66, 82, 94, 95, 96, 97, 100], "mchirp": [10, 13, 31, 33, 36, 37, 39, 53, 56, 57, 63, 64, 67, 68, 71, 78, 83, 89, 92, 94, 95, 97, 99], "10": [10, 15, 16, 18, 29, 32, 33, 34, 35, 36, 39, 40, 41, 45, 53, 56, 57, 59, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 78, 79, 80, 82, 85, 86, 89, 90, 92, 93, 94, 95, 96, 100], "There": [10, 15, 22, 29, 31, 40, 43, 45, 53, 65, 66, 67, 79, 82, 86, 88, 89, 90, 95, 97, 98, 100], "four": [10, 14, 22, 33, 67, 80, 95], "section": [10, 14, 22, 29, 31, 32, 33, 35, 36, 41, 49, 53, 56, 59, 61, 63, 64, 65, 73, 74, 76, 79, 80, 82, 86, 87, 89, 93, 94, 95, 96, 98], "must": [10, 12, 20, 22, 23, 29, 31, 33, 34, 35, 38, 42, 44, 48, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 75, 76, 77, 78, 79, 82, 86, 88, 90, 91, 92, 93, 94, 95, 98, 99, 100], "present": [10, 15, 22, 23, 25, 57, 64, 65, 67, 72, 74, 75, 76, 78, 79, 82, 85, 88, 90, 92, 94, 95, 97, 99, 100], "paramat": [10, 22], "fed": [10, 22, 94, 97], "directli": [10, 16, 20, 22, 25, 29, 30, 41, 53, 57, 64, 65, 73, 75, 76, 78, 79, 82, 85, 86, 90, 91, 92, 97, 98, 99, 100], "lalapps_inspinj": [10, 22, 48, 79, 90, 95, 97], "program": [10, 22, 31, 42, 53, 58, 61, 62, 68, 75, 82, 86, 92, 94, 95, 96, 97, 99, 100], "restrict": [10, 22, 43, 57, 59, 64, 71, 82, 84, 88, 89], "can": [10, 11, 12, 13, 14, 16, 18, 19, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "along": [10, 16, 22, 26, 31, 33, 45, 53, 59, 61, 62, 64, 65, 67, 76, 78, 79, 93, 94], "note": [10, 12, 16, 22, 23, 26, 28, 29, 30, 31, 33, 35, 36, 37, 38, 40, 41, 44, 48, 49, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 67, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99], "howev": [10, 12, 20, 22, 23, 31, 33, 38, 42, 43, 44, 47, 53, 61, 64, 67, 74, 78, 79, 82, 85, 86, 90, 91, 92, 93, 94, 95], "doe": [10, 20, 22, 43, 48, 53, 57, 58, 59, 61, 62, 63, 64, 65, 67, 73, 75, 76, 77, 78, 79, 82, 87, 88, 89, 92, 94, 95, 96, 98, 100], "determin": [10, 22, 29, 31, 33, 35, 42, 44, 48, 49, 53, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 73, 75, 76, 78, 79, 80, 82, 83, 87, 88, 89, 92, 93, 94, 95, 97, 100], "actual": [10, 22, 35, 38, 53, 58, 59, 65, 66, 67, 75, 76, 78, 79, 82, 88, 90, 92, 94, 95], "compar": [10, 22, 31, 42, 43, 57, 59, 61, 65, 67, 76, 77, 79, 85, 88, 92, 100], "That": [10, 22, 42, 44, 65, 76, 79, 94, 95, 98], "script": [10, 16, 17, 22, 36, 37, 38, 41, 46, 47, 48, 56, 73, 79, 82, 83, 90, 92, 93, 94, 95, 97, 99, 100], "copi": [10, 11, 20, 22, 26, 31, 34, 35, 46, 48, 50, 53, 61, 62, 64, 66, 67, 74, 76, 78, 79, 82, 88, 90, 91, 93, 95], "folder": [10, 22, 60, 65, 71, 97], "version": [10, 11, 12, 14, 19, 22, 28, 35, 36, 46, 47, 49, 50, 57, 58, 59, 62, 65, 67, 72, 78, 81, 82, 84, 86, 87, 89, 90, 92, 95, 97, 99, 100], "ha": [10, 11, 16, 20, 22, 29, 31, 33, 34, 35, 38, 43, 44, 46, 49, 53, 56, 57, 59, 61, 62, 64, 65, 66, 67, 70, 72, 73, 75, 76, 78, 79, 80, 82, 83, 84, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100], "directori": [10, 11, 12, 19, 20, 22, 34, 38, 45, 46, 47, 48, 49, 53, 56, 73, 78, 79, 82, 88, 90, 91, 92, 93, 94, 95, 96, 99, 100], "condor": [10, 22, 82, 94, 95, 96, 97], "It": [10, 12, 19, 23, 29, 30, 31, 32, 33, 37, 38, 39, 41, 43, 44, 45, 53, 57, 58, 59, 61, 62, 63, 64, 65, 67, 72, 75, 76, 78, 79, 82, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "sngl": [10, 79], "sim": 10, "inspir": [10, 14, 17, 53, 59, 76, 77, 79, 82, 89, 90, 95, 97, 100], "tabl": [10, 25, 29, 31, 53, 57, 62, 66, 67, 72, 73, 75, 78, 79, 82, 84, 88, 93, 94, 95, 98, 100], "its": [10, 14, 20, 31, 41, 42, 43, 44, 46, 53, 56, 57, 58, 59, 61, 62, 64, 65, 67, 69, 72, 73, 75, 76, 77, 78, 79, 82, 85, 90, 92, 93, 95, 96, 97, 98, 99, 100], "suggest": [10, 92, 93, 94], "split": [10, 22, 31, 33, 37, 58, 61, 67, 72, 76, 78, 79, 82, 89, 90, 94, 95], "smaller": [10, 22, 50, 53, 56, 57, 64, 67, 74, 75, 76, 82, 89, 92, 95, 100], "piec": [10, 43, 97, 99], "satisfi": [10, 12, 31, 33, 42, 44, 56, 65, 67], "direct": [10, 16, 20, 30, 53, 58, 75, 77, 90, 92, 95], "memori": [10, 31, 57, 58, 59, 65, 67, 74, 76, 77, 78, 79, 82, 89, 90, 92, 94, 95, 97], "pregener": [10, 79, 88, 91, 95, 97, 100], "begin": [10, 12, 29, 33, 34, 38, 45, 53, 56, 59, 60, 61, 62, 64, 65, 73, 74, 76, 78, 82, 92, 95], "caus": [10, 31, 33, 34, 53, 59, 62, 64, 67, 72, 79, 80, 82, 88, 92, 93, 94, 95, 98], "portion": [10, 22, 43, 59, 74, 76, 78, 80, 92], "proport": [10, 22, 53, 61, 71, 75, 82, 89, 100], "so": [10, 11, 12, 14, 18, 20, 23, 24, 29, 31, 33, 34, 38, 41, 42, 43, 44, 46, 48, 49, 53, 56, 57, 59, 61, 62, 63, 64, 65, 66, 67, 69, 72, 74, 75, 76, 78, 79, 82, 84, 85, 86, 88, 90, 92, 93, 94, 95, 98], "acceler": [10, 46, 47, 72, 92], "process": [10, 12, 16, 29, 37, 38, 42, 44, 48, 49, 53, 59, 61, 65, 67, 71, 75, 78, 79, 82, 83, 84, 85, 86, 88, 89, 92, 94, 95, 96, 98], "treat": [10, 35, 43, 53, 59, 61, 64, 93, 94, 95], "unreli": 10, "As": [10, 23, 29, 31, 33, 42, 44, 47, 53, 56, 57, 61, 62, 78, 79, 82, 88, 90, 93, 94, 97, 98, 99, 100], "automat": [10, 20, 22, 43, 64, 74, 76, 79, 80, 82, 86, 90, 91, 92, 93, 94, 98, 100], "twice": [10, 59, 74, 75, 90, 94], "kept": [10, 29, 31, 44, 76, 79, 95], "thei": [10, 23, 29, 31, 33, 35, 44, 52, 53, 56, 57, 58, 61, 62, 64, 65, 67, 72, 74, 75, 76, 78, 79, 80, 82, 89, 90, 93, 94, 95, 96, 98, 100], "equivel": 10, "sugar": [10, 57, 95], "atla": [10, 34, 93, 94, 95], "simul": [10, 22, 31, 34, 35, 36, 38, 66, 71, 75, 78, 79, 91, 92, 93, 96, 98], "ldg": [10, 22, 48, 82, 88, 93, 94, 95], "choosen": [10, 22], "accord": [10, 22, 53, 57, 71, 76, 91, 92, 98, 99, 100], "web": [10, 19, 22, 67, 95], "correspond": [10, 22, 25, 26, 31, 33, 37, 44, 48, 53, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 88, 90, 91, 92, 93, 94, 95, 97, 98, 100], "sent": [10, 22, 67, 79, 82, 88, 90, 91, 92, 99, 100], "notabl": 10, "exept": [10, 58], "paramt": [10, 22, 56], "relev": [10, 14, 22, 35, 42, 53, 62, 67, 75, 76, 82, 90, 97], "buffer": [10, 57, 59, 60, 62, 66, 74, 78, 92, 97], "greater": [10, 22, 31, 49, 53, 57, 61, 62, 72, 73, 75], "longest": [10, 22, 33, 67, 94], "onc": [10, 12, 19, 22, 23, 31, 46, 48, 49, 53, 58, 62, 72, 75, 79, 82, 85, 88, 90, 93, 94, 95, 96, 97], "been": [10, 22, 34, 38, 44, 46, 49, 56, 57, 59, 61, 62, 64, 65, 66, 67, 72, 75, 76, 78, 79, 82, 84, 86, 88, 90, 91, 92, 94, 95, 98, 100], "workspac": [10, 22], "place": [10, 12, 22, 25, 31, 33, 41, 49, 53, 56, 59, 64, 65, 67, 73, 74, 75, 76, 79, 82, 84, 90, 93, 95, 96, 97, 99, 100], "follow": [10, 11, 12, 16, 20, 22, 25, 26, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 48, 49, 53, 56, 59, 61, 64, 65, 66, 67, 73, 74, 75, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "command": [10, 11, 12, 19, 20, 22, 23, 31, 45, 46, 47, 48, 49, 53, 56, 57, 58, 61, 62, 64, 66, 68, 74, 75, 76, 79, 80, 87, 88, 91, 92, 93, 94, 95, 97, 99, 100], "submit": [10, 22, 79, 82, 93, 94], "pycbc_make_banksim": 10, "conf": [10, 16, 22, 88], "your_ini_fil": [10, 22], "ini": [10, 16, 32, 33, 34, 35, 36, 37, 38, 39, 41, 56, 72, 76, 79, 82, 83, 89, 91, 93, 94, 95, 96, 100], "shell": [10, 12, 19, 22, 47, 48, 49, 53, 79, 95], "sh": [10, 12, 22, 32, 33, 34, 36, 37, 46, 48, 64, 93, 94], "main": [10, 11, 22, 36, 42, 44, 46, 53, 82, 93, 95, 97], "call": [10, 11, 16, 23, 29, 31, 32, 35, 37, 38, 39, 41, 44, 45, 48, 52, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 78, 79, 82, 85, 86, 88, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100], "dat": 10, "space": [10, 12, 23, 29, 31, 33, 41, 43, 50, 52, 53, 56, 57, 61, 62, 64, 65, 68, 71, 72, 75, 76, 78, 79, 82, 89, 92, 94, 95, 97, 100], "earli": 10, "incomplet": 10, "partial_result": 10, "some": [10, 12, 16, 18, 20, 22, 23, 24, 28, 29, 33, 40, 42, 43, 44, 46, 47, 48, 52, 53, 56, 57, 58, 60, 62, 63, 64, 65, 67, 71, 73, 74, 75, 78, 79, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100], "basic": [10, 22, 29, 31, 33, 40, 53, 61, 67, 73, 75, 76, 78, 79, 80, 82, 89, 94, 96], "plot": [10, 18, 22, 24, 31, 32, 36, 37, 38, 39, 40, 41, 50, 51, 52, 53, 61, 62, 67, 71, 76, 83, 86, 87, 93, 94, 95, 96], "also": [10, 12, 13, 16, 18, 19, 22, 23, 24, 29, 30, 31, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 73, 74, 75, 76, 78, 79, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 100], "pycbc_banksim_plot": 10, "To": [10, 11, 12, 14, 16, 19, 23, 29, 31, 32, 33, 34, 35, 36, 37, 39, 41, 44, 46, 48, 53, 56, 57, 59, 62, 64, 65, 67, 73, 76, 78, 79, 81, 82, 84, 86, 89, 90, 93, 94, 95, 97, 98], "uberbank": [10, 82], "ligo": [10, 12, 14, 15, 24, 26, 28, 29, 30, 33, 34, 36, 39, 41, 42, 46, 48, 49, 53, 54, 67, 71, 73, 74, 79, 82, 84, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100], "we": [10, 11, 14, 15, 16, 18, 23, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 52, 53, 56, 57, 59, 60, 61, 64, 65, 66, 67, 71, 74, 75, 77, 78, 79, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100], "bn": [10, 13, 71, 82, 94], "nsbh": [10, 71, 82, 94], "bbh": [10, 31, 34, 38, 64, 71, 82, 94], "region": [10, 28, 43, 53, 56, 59, 60, 64, 65, 73, 76, 82, 92], "overlap": [10, 29, 33, 52, 53, 59, 64, 66, 72, 75, 76, 77, 78, 79, 82, 88, 90, 92, 95], "For": [10, 12, 16, 20, 23, 29, 32, 33, 35, 38, 39, 41, 42, 43, 44, 45, 46, 53, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100], "technic": [10, 53, 71, 72], "reason": [10, 23, 29, 33, 43, 44, 53, 58, 59, 64, 67, 71, 72, 74, 93, 94, 99], "conveni": [10, 23, 25, 31, 53, 62, 64, 65, 67, 75, 76, 78, 79], "total": [10, 29, 33, 53, 56, 57, 58, 64, 65, 67, 71, 74, 75, 77, 79, 82, 89, 90, 92, 95, 97, 100], "abov": [10, 11, 19, 29, 31, 33, 35, 42, 44, 46, 48, 53, 56, 57, 59, 61, 64, 66, 67, 72, 73, 75, 78, 79, 81, 82, 86, 87, 88, 90, 92, 93, 94, 95, 97, 98, 100], "propos": [10, 63, 65, 78, 82], "flat": [10, 18, 53, 71, 82], "n": [10, 23, 48, 53, 56, 57, 59, 63, 64, 65, 67, 69, 72, 73, 74, 75, 76, 77, 78, 79, 82, 90, 95, 99, 100], "bh": [10, 53, 67, 69, 75, 82, 90, 100], "99": [10, 33, 78, 82, 94], "limit": [10, 12, 31, 33, 53, 56, 57, 59, 60, 67, 73, 78, 82, 90, 94, 95, 100], "In": [10, 11, 12, 18, 20, 23, 29, 31, 33, 35, 36, 37, 39, 41, 42, 43, 44, 45, 48, 49, 53, 55, 56, 57, 59, 61, 62, 64, 65, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 82, 83, 86, 90, 91, 92, 93, 94, 95, 96, 98, 99], "addit": [10, 12, 14, 15, 29, 31, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 47, 53, 56, 57, 59, 61, 64, 66, 67, 73, 74, 75, 76, 78, 79, 82, 83, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100], "magnitud": [10, 18, 31, 53, 55, 67, 69, 74, 78, 82], "000": [10, 31, 94, 95], "much": [10, 18, 20, 29, 30, 33, 42, 43, 58, 78, 82, 85, 95, 98], "less": [10, 31, 49, 53, 56, 57, 64, 65, 75, 78, 82, 92], "seobnrv2": [10, 29, 48, 82, 85], "even": [10, 12, 33, 35, 53, 56, 59, 61, 64, 66, 67, 76, 78, 90, 91, 94, 98], "though": [10, 33, 42, 75, 78, 79, 82, 93, 98, 100], "seobnrv2_rom_doublespin": [10, 67, 78, 82, 85], "recoveri": [10, 93], "becaus": [10, 33, 36, 43, 44, 56, 59, 61, 63, 64, 65, 66, 82, 93, 94, 95, 98], "believ": 10, "accur": [10, 16, 18, 39, 56, 59, 78, 82], "rom": [10, 12], "verifi": [10, 53, 57, 58, 72, 74, 75, 82, 88], "instruct": [10, 12, 17, 30, 46, 48, 49, 81, 82, 90, 94, 95, 97, 98], "dchirp": 10, "150000": [10, 95], "25": [10, 22, 24, 28, 29, 33, 39, 53, 56, 57, 64, 72, 74, 76, 82, 90, 97, 100], "1000250000": 10, "alex": [10, 22, 58, 66, 86, 89], "nielsen": 10, "pysparedir": 10, "o1": [10, 16, 71, 82, 93, 94, 95], "pycbcofflin": [10, 95], "aligned_spin": 10, "template_bank": [10, 79, 90, 95, 100], "titosbank": 10, "hyperbank_parallel_phenomd2": 10, "gz": [10, 12, 29, 49, 78, 79, 82, 92, 99], "10000": [10, 18, 29, 35, 40, 41, 56, 64, 65, 71, 82, 95], "scheme": [10, 12, 23, 29, 38, 50, 58, 60, 76, 78, 79, 82, 85, 88, 90, 92, 95], "mkl": [10, 12, 23, 36, 38, 50, 53, 92, 95], "h1l1": [10, 67, 82, 84, 96, 97, 98], "er7_harm_mean_asd": 10, "1116700672": 10, "1630208": 10, "highmass": 10, "16384": [10, 22, 26, 29, 41, 70, 80, 82, 100], "1024": [10, 22, 28, 35, 39, 52, 82], "you": [10, 11, 12, 14, 15, 16, 19, 20, 21, 23, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 66, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100], "chang": [10, 11, 12, 23, 25, 32, 33, 34, 35, 36, 38, 39, 41, 44, 45, 46, 47, 48, 53, 56, 58, 60, 62, 64, 67, 71, 72, 73, 74, 75, 76, 78, 81, 82, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100], "your": [10, 11, 12, 19, 21, 23, 26, 29, 30, 33, 34, 35, 39, 40, 41, 42, 43, 44, 46, 47, 49, 53, 58, 72, 74, 75, 76, 82, 84, 85, 86, 88, 89, 90, 92, 93, 94, 95, 97], "suitabl": [10, 53, 78, 79, 82, 88, 92, 97], "possibli": [10, 48, 57, 64, 65], "whatev": [10, 43, 62, 67, 73, 75, 78, 79, 82, 88, 95, 98], "processing_schem": [10, 92], "best": [10, 42, 57, 94, 95], "work": [10, 12, 23, 32, 34, 44, 46, 48, 53, 57, 59, 60, 61, 62, 64, 65, 67, 75, 79, 82, 86, 88, 89, 90, 92, 94, 95, 97, 98, 100], "opt": [10, 12, 19, 46, 48, 50, 57, 58, 61, 62, 63, 64, 66, 72, 73, 74, 75, 76, 79, 90], "intel": [10, 12, 95], "2015": [10, 47, 82, 84, 94], "9895": 10, "highli": 10, "25hz": 10, "30hz": 10, "give": [10, 14, 15, 16, 31, 33, 38, 39, 41, 42, 44, 53, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 72, 73, 74, 75, 76, 78, 79, 82, 83, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100], "burn": [10, 31, 33, 39, 40, 45, 61, 62, 65, 94], "sky": [10, 16, 29, 33, 35, 38, 41, 43, 53, 55, 56, 59, 64, 72, 73, 77, 79, 83, 85, 94, 95, 97], "uniformli": [10, 18, 29, 53, 64, 76], "arcco": 10, "although": [10, 12, 33, 64, 82, 94, 95, 98], "matter": [10, 20, 32, 82, 94], "stochast": [10, 75], "placement": [10, 75], "like": [10, 12, 15, 21, 29, 31, 33, 35, 38, 40, 42, 43, 47, 53, 56, 57, 59, 61, 62, 64, 65, 67, 71, 76, 79, 80, 82, 85, 86, 90, 91, 93, 94, 95, 97, 98, 99, 100], "sbank": [10, 53, 100], "abl": [10, 29, 31, 42, 43, 44, 47, 52, 82, 84, 86, 88, 94, 97, 98], "guarante": [10, 42, 59], "point": [10, 16, 20, 32, 34, 36, 37, 38, 39, 41, 42, 44, 45, 48, 53, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 88, 92, 93, 94, 95, 96, 97, 98, 100], "cover": [10, 18, 53, 57, 72, 75, 79, 82, 88, 92, 100], "better": [10, 53, 65, 71, 78, 82, 94, 99], "97": [10, 75, 82, 100], "success": [10, 12, 53, 63, 92, 95], "further": [10, 31, 42, 43, 56, 57, 72, 76, 82, 99], "might": [10, 59, 64, 67, 72, 74, 75, 78, 79, 80, 82, 87, 90, 92, 95, 97, 98], "95": [10, 73, 82], "particular": [10, 35, 53, 54, 56, 57, 59, 60, 65, 66, 67, 72, 74, 79, 80, 90, 91, 95], "part": [10, 12, 49, 53, 56, 63, 64, 66, 67, 74, 75, 76, 78, 79, 82, 87, 88, 91, 92, 95, 98, 99, 100], "three": [10, 29, 33, 35, 37, 56, 71, 72, 73, 76, 89, 95, 97, 98], "while": [10, 26, 31, 36, 37, 43, 44, 53, 61, 64, 67, 73, 75, 78, 82, 85, 87, 94, 95], "successfulli": [10, 93, 94, 95], "possibl": [10, 14, 16, 20, 31, 33, 35, 40, 41, 43, 53, 54, 56, 57, 59, 62, 64, 67, 71, 73, 77, 78, 79, 82, 87, 89, 90, 91, 92, 94, 97, 98, 100], "due": [10, 33, 43, 53, 60, 71, 72, 78, 95], "differ": [10, 12, 18, 23, 26, 31, 33, 34, 35, 36, 38, 41, 42, 43, 44, 45, 47, 48, 53, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 74, 75, 78, 79, 80, 82, 86, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100], "sensitivit": 10, "two": [10, 11, 15, 22, 23, 28, 29, 31, 33, 35, 39, 41, 42, 52, 53, 56, 57, 58, 59, 61, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 79, 82, 85, 86, 89, 90, 92, 93, 94, 95, 96, 98], "precess": [10, 33, 53, 64, 71, 77, 79, 82, 94], "disrupt": 10, "etc": [10, 12, 21, 29, 30, 39, 41, 42, 43, 48, 53, 57, 60, 65, 67, 71, 78, 79, 82, 89, 90, 92, 95, 97], "level": [10, 11, 31, 42, 44, 48, 53, 56, 58, 62, 64, 65, 66, 67, 72, 78, 79, 81, 82, 87, 90, 92, 94, 95, 96, 97, 99, 100], "wa": [10, 29, 30, 31, 33, 34, 35, 42, 45, 53, 56, 59, 61, 62, 63, 64, 65, 67, 72, 73, 75, 76, 78, 79, 82, 84, 88, 90, 92, 93, 95, 97, 98], "coverag": [10, 53, 79, 82], "70": [10, 75, 82, 90, 100], "anti": 10, "spars": [10, 57, 92], "size": [10, 18, 23, 31, 41, 53, 56, 57, 58, 59, 61, 64, 65, 67, 73, 75, 76, 78, 79, 82, 89, 92, 95, 97], "too": [10, 49, 56, 57, 59, 67, 79, 82, 91, 92, 94, 95, 97, 99, 100], "tight": 10, "particularli": [10, 82], "problem": [10, 40, 43, 79, 82, 88, 95], "higher": [10, 33, 38, 41, 43, 46, 53, 56, 64, 71, 75, 78, 82, 85, 95], "speed": [10, 33, 37, 39, 41, 43, 48, 75, 78, 82, 92, 94, 100], "sped": 10, "reduc": [10, 24, 33, 34, 48, 53, 56, 57, 59, 66, 74, 76, 82, 95, 97], "instead": [10, 15, 18, 23, 29, 31, 33, 34, 42, 48, 53, 56, 59, 62, 64, 65, 67, 73, 75, 76, 78, 79, 82, 85, 86, 93, 95, 98, 100], "tighten": 10, "being": [10, 12, 31, 53, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 72, 75, 76, 77, 78, 79, 82, 86, 88, 90, 91, 92, 95, 96, 97, 98, 99, 100], "develop": [10, 11, 12, 14, 20, 25, 82, 86, 89, 90, 91, 92, 97, 99, 100], "dynam": [10, 12, 57, 74, 82, 92, 95, 100], "replic": [10, 26], "switch": [10, 53, 67, 78, 79, 98], "exist": [10, 12, 22, 23, 25, 26, 29, 31, 49, 53, 56, 57, 58, 59, 62, 64, 65, 66, 67, 71, 73, 75, 76, 78, 79, 82, 83, 88, 89, 90, 95, 96, 97, 99], "current": [10, 12, 19, 20, 23, 25, 26, 31, 33, 34, 36, 42, 44, 46, 47, 48, 53, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 71, 72, 74, 75, 76, 77, 78, 79, 82, 85, 88, 90, 91, 92, 95, 96, 98, 99, 100], "master": [10, 11, 19, 48, 53, 56, 65, 71, 73, 81, 95, 97], "built": [11, 12, 16, 20, 43, 52, 56, 72, 78, 79], "branch": [11, 12, 19, 46, 48, 81, 95], "repositori": [11, 12, 19, 20, 42, 44, 46, 48, 81, 95], "gh": 11, "have": [11, 12, 16, 20, 21, 23, 24, 26, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 52, 53, 56, 57, 59, 61, 62, 63, 64, 65, 66, 67, 73, 75, 76, 78, 79, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100], "alreadi": [11, 23, 30, 48, 49, 53, 57, 59, 61, 62, 64, 66, 67, 72, 75, 76, 78, 79, 82, 86, 90, 91, 100], "git": [11, 12, 19, 20, 46, 48, 53, 71, 79, 81, 90, 97, 98], "checkout": [11, 12, 48, 81], "orphan": 11, "rm": [11, 48, 95], "rf": [11, 48, 71, 78], "clean": [11, 12, 46, 75, 95], "dxf": 11, "touch": [11, 89], "nojekyl": 11, "mkdir": [11, 48, 49, 97], "latest": [11, 12, 14, 19, 34, 38, 48, 57, 60, 65, 72, 79, 82, 94, 95, 98], "commit": [11, 12, 81], "upstream": 11, "just": [11, 15, 26, 29, 32, 33, 34, 35, 36, 37, 38, 41, 42, 44, 48, 49, 53, 56, 57, 61, 62, 64, 65, 66, 67, 72, 73, 75, 76, 78, 79, 81, 82, 86, 91, 93, 94, 95, 98], "gwastro": [11, 42, 44, 46, 56, 86], "instal": [11, 12, 19, 20, 32, 37, 53, 67, 79, 84, 94, 95, 97], "cannot": [11, 42, 53, 57, 59, 64, 65, 67, 76, 78, 79, 82, 95, 99], "out": [11, 12, 23, 28, 29, 30, 31, 44, 53, 57, 58, 59, 61, 62, 64, 65, 67, 69, 71, 74, 75, 76, 78, 79, 82, 87, 90, 93, 94, 95, 97, 98], "anoth": [11, 12, 18, 29, 42, 53, 62, 64, 66, 67, 76, 79, 90, 95], "insid": [11, 19, 48, 53, 58, 79, 95], "assum": [11, 16, 29, 33, 34, 35, 36, 38, 43, 47, 48, 53, 55, 56, 57, 60, 61, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 82, 89, 93, 94, 95, 100], "cd": [11, 46, 48, 93, 94, 95, 97], "repo": [11, 12], "clone": [11, 12, 46, 48], "com": [11, 12, 46, 56, 65, 67, 75, 86, 90, 95, 97], "usernam": [11, 12], "_gh": 11, "now": [11, 12, 18, 29, 32, 33, 34, 35, 36, 37, 38, 39, 41, 47, 48, 49, 56, 57, 64, 76, 79, 82, 88, 89, 90, 92, 95, 97, 98, 99], "flush": 11, "content": [11, 23, 28, 50, 82, 87], "realli": [11, 53, 82], "under": [11, 24, 35, 46, 48, 53, 57, 60, 64, 75, 78, 82, 84, 85, 89, 90, 95], "control": [11, 53, 56, 82, 89, 92, 95, 96, 97, 100], "publish": [11, 42, 81, 95], "last": [11, 26, 31, 32, 33, 36, 37, 39, 44, 53, 57, 61, 62, 64, 65, 67, 75, 78, 79, 81, 82, 92, 93, 94, 95], "put": [11, 33, 36, 37, 56, 57, 58, 67, 73, 78, 79, 82, 88, 90, 94, 95, 99], "back": [11, 16, 53, 56, 57, 58, 62, 65, 74, 80, 81, 82, 90, 92, 95, 100], "top": [11, 20, 31, 48, 56, 62, 64, 66, 67, 78, 79, 87, 90, 95, 98], "python": [11, 12, 13, 14, 16, 28, 29, 31, 44, 46, 47, 48, 49, 53, 56, 57, 58, 62, 65, 67, 75, 76, 79, 83, 85, 86, 90, 92, 94, 99], "setup": [11, 31, 35, 46, 49, 53, 64, 65, 79, 81, 82, 86, 95], "py": [11, 13, 16, 18, 42, 44, 46, 53, 56, 57, 65, 66, 76, 78, 79, 81, 85, 86, 90, 92], "build_gh_pag": 11, "updat": [11, 12, 23, 33, 42, 53, 57, 60, 61, 64, 65, 67, 71, 72, 76, 78, 79, 81, 88, 92], "http": [11, 12, 24, 28, 29, 34, 37, 38, 39, 41, 48, 49, 53, 56, 57, 58, 59, 60, 64, 65, 67, 69, 71, 74, 75, 76, 77, 78, 79, 82, 85, 86, 88, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100], "html": [11, 20, 34, 38, 46, 73, 79, 82, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "Be": [11, 79, 82, 88, 95, 98], "care": [11, 23, 59, 67, 78, 79, 80, 82, 95, 98], "wrong": [11, 82], "delet": [11, 12, 31, 45, 62, 66, 79, 82, 90, 92, 95, 97], "accid": [11, 67], "reset": [11, 60, 64, 70, 74], "undo": 11, "weav": 12, "still": [12, 31, 33, 41, 64, 67, 82, 88, 91, 93, 94], "most": [12, 33, 36, 42, 43, 45, 46, 47, 53, 57, 58, 60, 61, 64, 67, 69, 73, 78, 79, 82, 88, 90, 93, 95, 97, 99, 100], "applic": [12, 23, 30, 36, 67, 76, 82, 88, 100], "standard": [12, 18, 31, 33, 46, 53, 56, 57, 58, 61, 62, 67, 71, 73, 75, 76, 79, 82, 85, 86, 88, 89, 90, 92, 93, 94, 95], "runtim": [12, 33, 34, 46, 79, 88, 97], "librari": [12, 30, 40, 47, 49, 53, 67, 73, 79, 88, 95], "environ": [12, 19, 46, 47, 49, 62, 64, 79, 88, 92, 94, 95, 97], "compat": [12, 19, 59, 64, 67, 86, 92, 100], "glibc": 12, "gcc": 12, "pycbc_inspir": [12, 20, 25, 57, 79, 95], "compil": [12, 53, 58], "full": [12, 17, 29, 30, 31, 38, 39, 53, 56, 58, 64, 67, 72, 75, 76, 78, 79, 82, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98], "open": [12, 16, 29, 34, 37, 53, 56, 60, 61, 62, 64, 65, 67, 73, 74, 75, 78, 84, 86], "scienc": [12, 29, 34, 60, 79, 86, 87, 88, 90, 92, 96, 97, 98, 100], "grid": [12, 16, 26, 28, 34, 43, 48, 49, 52, 64, 73, 78, 79, 82, 93, 94, 100], "access": [12, 16, 17, 23, 25, 26, 29, 30, 31, 46, 52, 53, 57, 65, 67, 76, 78, 79, 83, 86, 88, 90, 92, 95, 98], "osg": [12, 48, 79, 95], "mani": [12, 15, 22, 23, 29, 31, 35, 40, 53, 58, 62, 64, 65, 75, 78, 79, 82, 84, 89, 90, 94, 95, 97, 99], "machin": [12, 48, 79, 88, 95, 97], "einstein": [12, 95], "stricter": 12, "varieti": [12, 80], "both": [12, 29, 31, 33, 35, 43, 44, 53, 55, 56, 58, 62, 63, 64, 65, 67, 73, 75, 76, 77, 78, 79, 88, 90, 92, 94, 95, 97, 98, 100], "pyinstal": [12, 17], "c": [12, 13, 16, 19, 29, 31, 35, 49, 53, 56, 67, 74, 75, 77, 79, 90, 91, 92, 100], "interpert": 12, "pre": [12, 53, 56, 58, 64, 66, 67, 78, 79, 82, 84, 90, 92, 95, 100], "pycbc_build_eah": 12, "self": [12, 53, 55, 56, 57, 59, 61, 62, 64, 67, 75, 76, 78, 79, 86], "complet": [12, 33, 43, 72, 76, 78, 79, 82, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "static": [12, 29, 33, 35, 36, 41, 53, 56, 57, 58, 62, 64, 65, 66, 71, 77, 78, 79], "link": [12, 20, 37, 46, 53, 58, 72, 73, 79, 82, 87, 90, 92, 95, 97, 100], "linux": [12, 19, 49, 79], "backward": [12, 58], "forward": [12, 19, 53, 58, 92], "lowest": [12, 33, 78], "common": [12, 15, 31, 35, 42, 44, 46, 53, 56, 62, 64, 65, 73, 75, 76, 77, 78, 79, 80, 82, 90, 92, 95, 97, 99, 100], "denomin": [12, 53], "platform": [12, 19, 46], "rhel6": 12, "executal": 12, "rhel7": 12, "debian": 12, "wheezi": 12, "jessi": 12, "older": [12, 49, 81], "etch": 12, "softwar": [12, 19, 30, 42, 46, 48, 82, 91, 92, 95, 97, 100], "fftw": [12, 23, 36, 46, 48, 50, 53, 92], "download": [12, 19, 28, 32, 33, 34, 35, 36, 37, 38, 39, 41, 48, 80, 90, 93, 94, 95, 96, 97], "without": [12, 16, 25, 31, 48, 49, 52, 53, 56, 57, 62, 64, 67, 73, 75, 76, 78, 79, 82, 84, 85, 90, 92, 95, 97], "virtual": [12, 46, 47, 49, 62, 67], "deactiv": [12, 47, 48, 49, 73], "leav": [12, 47, 64, 90, 94, 95], "einsteinathom": 12, "forc": [12, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 62, 64, 78, 85, 86, 94], "debian4": 12, "help": [12, 20, 29, 30, 31, 33, 45, 62, 64, 67, 68, 73, 74, 75, 76, 78, 80, 82, 90, 92, 95, 96, 97, 99, 100], "mon": 12, "20": [12, 13, 16, 28, 31, 33, 34, 35, 36, 37, 38, 45, 53, 56, 57, 63, 64, 65, 67, 72, 74, 78, 84, 85, 86, 92, 94, 95], "16": [12, 24, 26, 29, 33, 39, 41, 48, 51, 52, 53, 57, 72, 80, 82, 92, 95, 96, 100], "33": [12, 23, 57, 72, 78, 85], "00": [12, 53, 64, 95], "utc": 12, "2024": 12, "print": [12, 13, 16, 18, 19, 23, 29, 37, 49, 52, 53, 56, 62, 64, 73, 78, 79, 82, 85, 88, 94], "env": [12, 46, 48, 49, 92, 95], "dump": [12, 20, 31, 33, 53, 62, 65, 67, 79, 87, 90], "messg": 12, "exit": [12, 33, 53, 62, 65, 79, 82, 92, 93, 94, 95, 97, 99, 100], "perform": [12, 24, 29, 31, 33, 35, 41, 43, 45, 49, 57, 58, 59, 61, 65, 66, 67, 75, 77, 78, 79, 82, 83, 87, 88, 89, 91, 92, 93, 94, 95, 97, 100], "take": [12, 16, 18, 26, 28, 29, 31, 32, 35, 37, 38, 39, 41, 42, 45, 46, 53, 56, 57, 58, 60, 61, 64, 65, 67, 71, 73, 75, 76, 78, 79, 81, 82, 85, 86, 88, 90, 92, 95, 96, 97, 99], "quit": [12, 64], "tarbal": [12, 86], "precompil": 12, "lalsuit": [12, 19, 46, 53, 82, 91, 92, 95, 97, 100], "scipi": [12, 20, 53, 56, 57, 59, 64, 69, 71, 73, 78], "scratch": [12, 19, 78, 87, 95], "sundai": 12, "tag": [12, 19, 31, 48, 53, 56, 63, 67, 73, 76, 79, 81, 82, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100], "bless": 12, "github": [12, 17, 19, 20, 46, 48, 56, 65, 86, 90, 95, 97], "reliabl": [12, 75, 82], "conjunct": [12, 92], "remot": [12, 79, 88, 90, 95, 97], "don": [12, 16, 39, 41, 53, 59, 62, 64, 65, 67, 74, 75, 76, 78, 79, 82, 88, 89, 92, 95, 98], "bema": 12, "einsteinathome_test": 12, "cleanup": [12, 32, 45, 85], "keep": [12, 20, 33, 44, 56, 62, 64, 70, 79, 89, 92, 94, 95], "later": [12, 18, 35, 57, 61, 75, 79, 82, 87, 88, 90, 95, 98], "inspect": [12, 29, 44, 93], "lib": [12, 49, 53], "tar": [12, 49], "again": [12, 45, 49, 58, 64, 74, 79, 93, 95, 96, 97], "lal": [12, 29, 48, 50, 53, 59, 60, 75, 76, 78, 79, 88], "verbos": [12, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 53, 82, 92, 94, 95, 99, 100], "show": [12, 13, 15, 16, 18, 24, 28, 29, 32, 36, 37, 38, 39, 40, 41, 46, 51, 52, 53, 73, 79, 80, 82, 85, 86, 92, 93, 94, 95, 97, 99, 100], "import": [12, 13, 15, 16, 18, 23, 24, 25, 26, 28, 29, 31, 37, 40, 49, 51, 52, 53, 56, 57, 58, 59, 61, 62, 64, 65, 75, 78, 79, 82, 85, 86, 90, 91, 92, 95, 98], "silent": [12, 37, 38, 39, 41], "brint": 12, "messag": [12, 20, 53, 75, 78, 82, 90, 92, 95, 97, 99, 100], "unless": [12, 31, 45, 62, 79, 81, 82, 86, 87, 92], "error": [12, 33, 34, 37, 38, 39, 41, 53, 54, 56, 57, 58, 61, 62, 64, 65, 67, 68, 71, 73, 76, 78, 79, 80, 81, 86, 90, 92, 94, 95, 97], "fetch": [12, 57, 79, 95], "specif": [12, 14, 16, 29, 33, 35, 42, 43, 48, 53, 54, 56, 57, 61, 62, 64, 66, 67, 71, 75, 78, 79, 80, 82, 83, 87, 88, 90, 91, 92, 94, 95, 97, 98, 100], "pars": [12, 53, 56, 57, 58, 61, 62, 64, 65, 67, 71, 72, 73, 74, 75, 76, 78, 79, 82, 90, 95, 97], "spell": 12, "dist": [12, 33, 36, 53, 56, 64, 71, 75, 89, 95], "pycbc_inspiral_osg": 12, "pycbc_inspiral_osg_vx": 12, "form": [12, 22, 53, 57, 61, 64, 69, 79, 82, 86, 95, 97, 100], "vx": [12, 81], "know": [12, 23, 33, 39, 41, 53, 64, 74, 75, 79, 82, 88, 92, 93, 94, 95, 98], "about": [12, 15, 16, 23, 31, 32, 37, 39, 41, 42, 53, 54, 56, 59, 60, 62, 64, 67, 71, 72, 73, 75, 78, 79, 82, 83, 85, 86, 88, 92, 95, 97, 98, 99, 100], "minim": [12, 53, 75, 78, 82, 86, 100], "hash": [12, 73, 78, 79, 81], "a2a5a476d33f169b8749e2840c306a48df63c936": 12, "b68832784969a47fe2658abffb3888ee06cd1be4": 12, "them": [12, 16, 29, 31, 33, 35, 41, 44, 53, 56, 57, 59, 64, 65, 66, 67, 71, 75, 78, 79, 80, 81, 82, 83, 86, 88, 90, 93, 94, 95, 97], "composer_xe_2015": 12, "090": 12, "igwn": [12, 30, 48, 95], "org": [12, 24, 28, 34, 37, 38, 39, 41, 46, 48, 49, 53, 57, 58, 59, 64, 71, 74, 76, 77, 78, 79, 82, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100], "share": [12, 35, 43, 48, 53, 58, 62, 64, 79, 82, 90, 93, 94, 95, 97], "would": [12, 15, 16, 21, 23, 29, 31, 33, 34, 35, 41, 42, 44, 47, 53, 56, 58, 62, 65, 67, 75, 76, 78, 79, 80, 82, 85, 86, 90, 91, 92, 94, 95, 97, 98, 100], "own": [12, 20, 21, 31, 33, 36, 43, 44, 46, 48, 62, 64, 85, 90, 93, 94, 95], "mention": [12, 42, 44, 94, 95, 98], "case": [12, 18, 23, 29, 31, 33, 39, 41, 43, 48, 53, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 73, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100], "soumide1102": 12, "comp_wave_in_search": 12, "tell": [12, 16, 23, 29, 31, 35, 46, 85, 86, 88, 90, 91, 92, 93, 94, 95, 98, 99, 100], "ensur": [12, 31, 53, 56, 57, 62, 64, 70, 74, 76, 78, 79, 81, 82, 84, 89, 90, 92, 94, 95, 100], "necessari": [12, 31, 33, 34, 38, 53, 57, 62, 66, 72, 73, 74, 75, 78, 79, 82, 84, 88, 93, 94, 95, 98], "spatmplt": [12, 64, 92, 95, 96], "seobnrv4_rom": [12, 85], "els": [12, 56, 59, 64, 67, 73, 76, 77, 78, 79, 85, 92], "compress": [12, 50, 53, 92, 100], "soumi": 12, "de": 12, "project": [12, 18, 53, 57, 66, 83, 95], "seobnrrom": 12, "proj": 12, "testbank_tf2v4rom": 12, "a3a5a476d33f169b8749e2840c306a48df63c936": 12, "grow": [13, 31, 33], "through": [13, 14, 15, 23, 26, 30, 42, 44, 46, 47, 52, 54, 57, 58, 59, 61, 65, 71, 72, 76, 79, 82, 83, 85, 87, 88, 90, 95, 96], "packag": [13, 31, 37, 40, 46, 47, 48, 49, 50, 82, 84, 85, 86, 87, 95, 97], "gwtc": [13, 34, 38, 54], "No": [13, 16, 31, 53, 58, 59, 64, 71, 72, 75, 77, 78, 82, 85, 89, 92, 94, 95, 99, 100], "cupi": [13, 16, 82, 85, 92, 95, 97, 99, 100], "phenomhm": [13, 16, 82, 85, 92, 95, 97, 99, 100], "modul": [13, 14, 15, 16, 17, 18, 26, 29, 31, 33, 36, 42, 44, 50, 85, 86, 89, 95, 97], "interpol": [13, 16, 28, 43, 52, 53, 59, 64, 69, 71, 72, 75, 76, 78, 79, 82, 85, 90, 92, 95, 97, 99, 100], "dict_kei": 13, "gw190930_133541": 13, "v1": [13, 16, 19, 39, 41, 54, 60, 75, 76, 77, 79, 80, 81, 82, 85, 88, 90, 94, 95, 98, 100], "gw190929_012149": 13, "gw190924_021846": 13, "gw190915_235702": 13, "gw190910_112807": 13, "gw190909_114149": 13, "gw190828_065509": 13, "gw190828_063405": 13, "gw190814": 13, "v2": [13, 75], "gw190803_022701": 13, "gw190731_140936": 13, "gw190728_064510": 13, "gw190727_060333": 13, "gw190720_000836": 13, "gw190719_215514": 13, "gw190708_232457": 13, "gw190707_093326": 13, "gw190706_222641": 13, "gw190701_203306": 13, "gw190630_185205": 13, "gw190620_030421": 13, "gw190602_175927": 13, "gw190527_092055": 13, "gw190521_074359": 13, "gw190521": 13, "v3": [13, 34, 38, 75, 86], "gw190519_153544": 13, "gw190517_055101": 13, "gw190514_065416": 13, "gw190513_205428": 13, "gw190512_180714": 13, "gw190503_185404": 13, "gw190426_152155": 13, "gw190425": 13, "gw190424_180648": 13, "gw190421_213856": 13, "gw190413_134308": 13, "gw190413_052954": 13, "gw190412": 13, "gw190408_181802": 13, "1253885759": 13, "1253755327": 13, "1253326744": 13, "1252627040": 13, "1252150105": 13, "1252064527": 13, "1251010527": 13, "9": [13, 15, 53, 61, 67, 72, 79, 82, 85, 89, 95], "1251009263": 13, "1249852257": 13, "1248834439": 13, "1248617394": 13, "1248331528": 13, "1248242632": 13, "1247616534": 13, "1247608532": 13, "1246663515": 13, "1246527224": 13, "1246487219": 13, "1246048404": 13, "1245955943": 13, "1245035079": 13, "1243533585": 13, "1242984073": 13, "1242459857": 13, "1242442967": 13, "1242315362": 13, "1242107479": 13, "1241852074": 13, "1241816086": 13, "1241719652": 13, "1240944862": 13, "1240327333": 13, "1240215503": 13, "1240164426": 13, "1239917954": 13, "1239198206": 13, "1239168612": 13, "1239082262": 13, "1238782700": 13, "matplotlib": [13, 15, 16, 18, 20, 24, 28, 51, 52, 73, 85, 86], "pyplot": [13, 15, 16, 18, 24, 28, 51, 52, 53, 73, 85, 86], "pp": [13, 15, 24, 28, 51, 52, 79, 85, 86, 93], "elow": [13, 53], "ehigh": [13, 53], "median1d": [13, 53, 54], "return_error": [13, 54], "true": [13, 16, 18, 36, 37, 38, 40, 41, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85, 86, 88, 90, 91, 95, 98], "chi_eff": [13, 50, 53, 56, 67, 78, 93, 94], "errorbar": 13, "xerr": 13, "fmt": [13, 53, 73], "o": [13, 17, 31, 38, 39, 41, 53, 61, 62, 64, 79, 82, 88, 94, 99, 100], "markers": 13, "xlabel": [13, 15, 18, 24, 28, 51, 52, 73, 85, 86], "chirp": [13, 18, 29, 31, 36, 37, 39, 53, 56, 57, 66, 67, 71, 75, 78, 82, 86, 92, 94, 99, 100], "xscale": [13, 85, 86], "ylabel": [13, 18, 24, 28, 51, 73, 85], "png": [13, 15, 16, 18, 24, 28, 32, 36, 37, 38, 39, 41, 45, 51, 52, 73, 79, 85, 86, 95], "hire": [13, 15, 16, 18, 24, 28, 51, 52, 85, 86], "pdf": [13, 15, 16, 18, 24, 28, 51, 52, 53, 56, 57, 61, 64, 65, 69, 71, 73, 85, 86], "easili": [13, 64, 71, 79, 82, 88, 90, 97], "gw170817": [13, 39, 41], "fig": [13, 18, 53, 73], "ax": [13, 18, 53, 73, 75], "subplot": [13, 16, 18, 73], "sharex": [13, 73], "sharei": 13, "zip": 13, "sca": 13, "titl": [13, 16, 18, 56, 64, 67, 73, 79, 81, 94, 95, 96], "retreiv": [13, 62], "time_slic": [13, 53, 76], "white": [13, 70, 72, 73, 79], "power": [13, 24, 25, 56, 57, 58, 59, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 92, 94, 100], "qtransform": [13, 50, 53, 76], "01": [13, 36, 37, 53, 63, 65, 75, 82, 90, 100], "logfstep": [13, 76], "200": [13, 18, 31, 33, 36, 40, 41, 56, 74, 82, 89, 94, 95], "qrang": [13, 59, 76], "110": 13, "frang": [13, 53, 59, 76], "512": [13, 33, 60, 72, 92, 95], "pcolormesh": 13, "vmax": [13, 41, 73, 78], "yscale": 13, "ask": [14, 53, 82, 91, 92, 97, 99, 100], "citat": 14, "doi": [14, 57], "bibtex": 14, "kei": [14, 16, 20, 25, 42, 53, 56, 57, 59, 62, 64, 65, 66, 67, 68, 71, 73, 74, 75, 76, 78, 79, 82, 83, 86, 88, 90, 91, 92, 95, 97, 100], "releas": [14, 17, 19, 30, 46, 48, 60, 95], "avali": 14, "zenodo": [14, 37], "found": [14, 29, 30, 33, 49, 53, 54, 56, 57, 59, 60, 62, 63, 64, 65, 71, 72, 75, 76, 78, 79, 82, 84, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97], "pleas": [14, 20, 28, 30, 36, 37, 56, 64, 66, 71, 72, 75, 76, 78, 81, 82, 83, 84, 87, 88, 90, 91, 92, 93, 94, 95, 97, 99, 100], "closest": [14, 72, 75, 79, 82, 100], "larg": [14, 24, 31, 33, 34, 38, 56, 58, 66, 67, 71, 74, 75, 82, 88, 90, 94, 95], "proper": [14, 53, 59, 92, 95], "credit": 14, "appropri": [14, 20, 34, 37, 46, 47, 48, 53, 57, 58, 62, 64, 69, 72, 73, 75, 78, 79, 80, 81, 82, 88, 93, 94, 95, 98, 99], "deriv": [14, 31, 53, 56, 57, 59, 60, 62, 64, 67, 69, 71, 76, 78, 93, 94], "those": [14, 23, 36, 42, 44, 53, 57, 62, 64, 67, 68, 76, 78, 79, 82, 88, 90, 92, 94, 95, 97], "paper": [14, 53, 57, 72, 77, 96, 100], "toolkit": [14, 53], "findchirp": [14, 57, 74, 77, 92, 96], "chi": [14, 24, 53, 57, 64, 69, 75, 77, 82, 92], "squar": [14, 18, 57, 59, 64, 72, 75, 76, 77, 82, 92, 100], "discrimin": [14, 24], "understand": [14, 31, 59, 73, 74, 90, 95, 97], "improv": [14, 20, 23, 30, 64, 76, 92, 100], "neutron": [14, 31, 35, 53, 69, 75, 82], "star": [14, 31, 35, 53, 69, 71, 75, 82], "black": [14, 33, 35, 36, 37, 53, 73, 78, 82, 94], "hole": [14, 33, 35, 36, 37, 53, 78, 82, 94], "advanc": [14, 24, 33, 37, 53, 55, 57, 60, 61, 65, 74, 78, 82, 84, 97, 98], "ground": [14, 26, 55, 64, 72], "offlin": [14, 57, 59, 67, 79, 95, 97], "pipelin": [14, 48, 79, 88, 89, 90, 91, 95, 97], "addition": [14, 67, 78, 79, 82, 95], "latenc": [14, 71], "live": [14, 20, 25, 50, 53, 57, 65, 71, 72, 76, 94, 95], "rapid": [14, 59, 78], "realtim": 14, "third": [14, 54, 67, 72, 74, 76, 82, 95], "observ": [14, 16, 35, 59, 64, 71, 72, 82, 83, 97], "state": [15, 31, 35, 42, 53, 56, 57, 60, 62, 64, 65, 67, 69, 71, 75, 90, 95, 98], "resourc": [15, 30, 94, 95], "lvc": [15, 71, 87, 98], "proprietari": 15, "outlin": [15, 97], "few": [15, 23, 33, 38, 45, 53, 57, 59, 64, 66, 67, 74, 76, 78, 79, 90, 95, 98], "activ": [15, 46, 47, 48, 53, 57, 67, 73, 75, 79, 82, 89, 90, 98, 100], "result": [15, 30, 31, 32, 33, 35, 37, 38, 39, 41, 42, 43, 44, 50, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 69, 71, 72, 74, 75, 76, 78, 79, 80, 82, 84, 85, 90, 92, 95, 97, 98], "ifo_color": [15, 53, 73], "start_tim": [15, 16, 25, 29, 53, 60, 67, 70, 74, 76, 85], "1126051217": [15, 82], "end_tim": [15, 25, 29, 53, 57, 60, 66, 67, 70, 74, 75, 76, 79, 85], "100000": [15, 18, 53, 65, 82, 95], "hanford": [15, 16, 60, 83, 97], "hseg": 15, "query_flag": [15, 50, 53, 64], "livingston": [15, 97], "lseg": 15, "figur": [15, 16, 18, 23, 53, 62, 65, 73, 78, 85, 86, 94], "figsiz": [15, 18], "seg": [15, 53, 57, 67, 79, 92, 97], "axvspan": 15, "ymin": [15, 73], "ymax": [15, 73], "10000000": 15, "cbc_hw_inj": 15, "blue": [15, 18, 94], "quier": 15, "raw": [15, 52, 59, 62, 65, 67, 72, 76, 98], "h1_data": 15, "negat": 15, "no_cbc_hw_inj": 15, "isn": [15, 20, 64, 66, 90], "similarli": [15, 16, 64, 96], "cbc_cat2_veto": 15, "cbc_cat2": 15, "advers": 15, "affect": [15, 16, 33, 34, 38, 58, 59, 67, 74, 78, 95], "orient": [16, 33, 53], "posit": [16, 32, 33, 36, 37, 38, 39, 41, 53, 55, 56, 57, 64, 65, 72, 74, 75, 76, 78, 79, 82, 97], "get_available_detector": [16, 50, 53], "abbrevi": 16, "longer": [16, 23, 31, 53, 56, 57, 72, 76, 79, 82, 92, 93, 94, 98, 100], "physic": [16, 35, 57, 60, 64, 69, 72, 75, 78, 79, 82, 86, 95, 100], "studi": [16, 30, 53], "abv": 16, "radian": [16, 53, 55, 56, 69, 74, 78, 85], "latitud": [16, 53, 55], "loc": [16, 53, 57, 85], "t1": [16, 53, 57], "6226733601781139": 16, "435363594690946": 16, "v0": 16, "7615118398044829": 16, "1833380521285067": 16, "g1": [16, 26], "9118498274833728": 16, "17116780434996115": 16, "h2": [16, 64, 78, 79, 88, 90], "810795263791696": 16, "08405676916594": 16, "5334231350225018": 16, "5843093707829257": 16, "i1": 16, "24841853018214574": 16, "3340133249409996": 16, "c1": 16, "5963790053711457": 16, "061757445380561": 16, "e1": [16, 64], "e2": [16, 58, 64], "7629930799052169": 16, "18405858870223898": 16, "e3": 16, "7627046325725655": 16, "18192996730110464": 16, "e0": 16, "k1": [16, 53, 79], "6355068496865413": 16, "396441015339088": 16, "u1": 16, "5707963267948966": [16, 56], "a1": [16, 64, 71], "5307987920242562": 16, "5913706849572118": 16, "7915649933828905": 16, "2085377567924929": 16, "x1": [16, 88], "8107054375131121": 16, "10821041362369214": 16, "n1": [16, 58], "7299645670603321": 16, "2211768494583896": 16, "b1": [16, 64, 81], "5573418077694188": 16, "0213821620185053": 16, "ifo1": [16, 79], "ifo2": [16, 79], "dt": [16, 71, 76, 78, 85, 86, 94], "light_travel_time_to_detector": [16, 50, 53], "010012846152223925": 16, "027287979933844225": 16, "026448341016726495": 16, "astropi": [16, 53, 55, 67, 76], "util": [16, 18, 31, 33, 42, 50, 53, 57, 59, 62, 64, 65, 66, 67, 69, 72, 73, 76, 79, 85, 90, 99, 100], "ier": 16, "sure": [16, 18, 35, 46, 47, 48, 55, 79, 81, 89, 94, 95], "internet": 16, "connect": [16, 19, 29, 67, 95], "auto_download": 16, "fals": [16, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 90, 92, 95, 100], "right_ascens": [16, 53, 85], "see": [16, 19, 23, 29, 30, 31, 32, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 52, 53, 56, 57, 59, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 86, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100], "time_delay_from_earth_cent": [16, 50, 53], "geocentr": [16, 29, 53, 55, 57, 78], "dref": 16, "100000000": [16, 53], "time_delay_from_detector": [16, 50, 53], "st": [16, 59], "delai": [16, 24, 41, 53, 57, 59, 71, 76], "0024441643159689237": 16, "014733669722672925": 16, "get_td_waveform": [16, 43, 53, 78, 85, 86], "pol": [16, 37, 53, 78], "calcual": 16, "fp": [16, 31, 61, 62, 64, 65, 67, 78], "fc": [16, 64, 74], "weight": [16, 25, 43, 53, 57, 59, 61, 62, 64, 65, 70, 72, 76, 78, 82], "antenna_pattern": [16, 50, 53], "u": [16, 29, 30, 43, 56, 59, 67, 75, 76, 79, 82, 88, 90, 92, 95, 100], "hp": [16, 24, 28, 53, 64, 66, 78, 85, 86], "hc": [16, 24, 28, 53, 64, 66, 78, 85, 86], "imrphenomd": [16, 24, 28, 35, 37, 38, 64, 67, 85, 92], "400": [16, 79], "ht": [16, 59], "rotat": [16, 43, 53, 55, 56, 59, 69, 73, 75, 76], "earth": [16, 36, 37, 43, 53, 55, 59, 97], "ht2": 16, "project_wav": [16, 50, 53, 85], "ant": 16, "38548547608335076": 16, "7059872046149982": 16, "observatori": [16, 29, 53, 54, 79, 88], "explicitli": [16, 43, 48, 53, 57, 77, 78, 98], "config": [16, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 50, 53, 56, 62, 63, 64, 65, 67, 73, 74, 79, 82, 84, 85, 93, 94, 95, 96, 97], "visibl": [16, 49], "interfac": [16, 23, 43, 44, 53, 57, 58, 67, 76, 85, 87, 88, 92, 95, 98], "plt": [16, 18, 37], "add_detector_on_earth": [16, 50, 53], "numpi": [16, 18, 20, 23, 24, 26, 29, 31, 37, 47, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 85, 86, 92, 100], "np": [16, 18, 23, 37, 53, 56, 57, 67, 74], "potenti": [16, 61, 75, 82], "cosmic": 16, "explor": [16, 41, 43, 82, 95], "km": 16, "lon": 16, "125": 16, "180": [16, 45], "pi": [16, 18, 35, 45, 53, 55, 56, 63, 64, 69, 72, 78, 85, 86], "lat": 16, "46": 16, "yangl": [16, 53], "clockwis": 16, "north": [16, 53, 56], "xangl": [16, 53], "90": [16, 54, 79, 82, 95], "degre": [16, 36, 37, 55, 57, 73, 77, 79, 92], "arm": [16, 53, 72], "c4": 16, "xlength": [16, 53], "40000": [16, 29], "ylength": [16, 53], "94": [16, 78], "29": [16, 64, 78, 79], "160": [16, 63], "c2": 16, "20000": [16, 82], "meshgrid": 16, "arang": [16, 67, 85, 86], "flatten": [16, 42, 62], "1e10": 16, "8000": [16, 89], "111": [16, 18, 53], "mollweid": 16, "scatter": [16, 18, 32, 36, 37, 38, 39, 41, 45, 61, 73, 79, 94], "demonstr": [16, 18, 32, 38, 39, 41, 52, 85, 93], "pycbc_detector_config": 16, "f1": [16, 59, 76], "f2": [16, 59, 76, 95], "earth_norm": 16, "7120943348136864": 16, "9861846887695471": 16, "0943951023931953": 16, "5497787143782138": 16, "0594885173533086": 16, "5830872929516078": 16, "build": [17, 20, 30, 60, 64, 67, 81, 82, 90, 95, 96], "stand": [17, 89], "alon": [17, 65, 89, 90], "bundl": [17, 26], "explain": [17, 19, 29, 46, 82, 95, 98], "storag": [17, 56, 59, 76, 79, 82, 95, 97], "workflow": [17, 50, 53, 56, 62, 73, 76, 78], "scientif": [17, 42, 73, 86], "aim": [18, 57, 75, 79, 92, 99], "simpl": [18, 23, 35, 37, 40, 42, 44, 53, 56, 57, 59, 74, 76, 78, 79, 82, 95, 98], "standalon": [18, 56, 82], "learn": [18, 40, 43], "draw": [18, 33, 41, 53, 56, 64, 65, 71, 73, 93], "comov": [18, 53, 93, 94], "volum": [18, 19, 29, 33, 38, 39, 41, 53, 56, 65, 71, 93, 94], "draw_samples_from_config": [18, 53, 56], "config_path": [18, 56, 73], "pycbc_bbh_prior": [18, 56], "random_se": [18, 56, 82, 99, 100], "randint": [18, 56], "32": [18, 28, 33, 41, 51, 54, 56, 78, 92, 94], "fieldnam": [18, 53, 56, 67, 78], "1000000": [18, 64, 67, 82], "n_bin": 18, "nrow": 18, "ncol": 18, "ax1": 18, "ax2": 18, "ax3": 18, "ax4": 18, "ax5": 18, "ax6": 18, "hist": [18, 61], "srcmass1": [18, 35, 38, 53, 93, 94], "srcmass2": [18, 35, 38, 93, 94], "comoving_volum": [18, 93, 94], "redshift": [18, 35, 38, 50, 53, 71, 93, 94], "set_titl": [18, 53], "tight_layout": 18, "popul": [18, 29, 50, 53, 67, 75, 78, 79, 85, 95], "mass1_distribut": 18, "mass1_sampl": 18, "rv": [18, 53, 56, 71], "varianc": [18, 56, 59, 61, 63, 64, 70, 72], "input": [18, 23, 29, 31, 32, 33, 35, 36, 37, 38, 39, 41, 45, 53, 57, 58, 59, 61, 62, 64, 65, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 82, 88, 90, 92, 94, 95, 97, 98, 99, 100], "mass2_gaussian": 18, "mass2_mean": 18, "mass2_var": 18, "mass2_sampl": 18, "pair": [18, 53, 57, 62, 71, 78, 88, 91, 97], "togeth": [18, 20, 31, 64, 78, 79, 82, 83, 90, 92, 94, 95, 97, 98], "apart": [18, 35, 40], "two_mass_distribut": 18, "mass3": 18, "mass4": 18, "two_mass_sampl": 18, "histogram": [18, 45, 57, 61, 71, 73, 79], "ax0": 18, "ratio": [18, 24, 31, 36, 37, 39, 42, 50, 53, 56, 57, 59, 62, 64, 65, 67, 68, 69, 71, 73, 75, 78, 79, 82, 92, 94, 100], "drawn": [18, 32, 36, 37, 41, 53, 56, 64, 65, 71, 73, 90, 93], "boundari": [18, 41, 50, 56, 59, 63, 71, 78, 79, 82, 89], "row": [18, 29, 53, 56, 58, 66, 67, 73, 75, 77, 78], "convert": [18, 24, 31, 33, 50, 53, 55, 56, 57, 59, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 78, 79, 88, 89, 90, 91, 94], "margin": [18, 31, 32, 33, 36, 37, 43, 45, 54, 61, 64, 65, 73, 79, 94], "probabl": [18, 31, 46, 53, 56, 57, 59, 61, 64, 65, 71, 72, 79, 82, 92, 95, 98, 100], "densiti": [18, 43, 45, 53, 56, 57, 59, 61, 64, 71, 72, 73, 76, 77, 79, 80, 94], "convers": [18, 31, 37, 50, 56, 57, 64, 75, 76], "minmc": [18, 56], "maxmc": [18, 56], "60": [18, 26, 39, 41, 55, 56, 82, 89, 95, 97], "mc_distribut": 18, "mc": [18, 53, 56, 73], "symmetr": [18, 24, 39, 53, 57, 59, 67, 69, 75, 76, 82, 92, 100], "minq": [18, 56], "maxq": [18, 56], "q_distribut": 18, "n_size": 18, "mc_sampl": 18, "q_sampl": 18, "mass1_from_mchirp_q": [18, 35, 36, 37, 50, 53], "mass2_from_mchirp_q": [18, 35, 36, 37, 50, 53], "1d": [18, 42, 54, 56, 61, 62, 73, 79], "consist": [18, 23, 25, 53, 56, 57, 59, 61, 64, 72, 74, 75, 76, 82, 87, 92, 94], "expect": [18, 30, 33, 36, 37, 53, 56, 57, 61, 64, 67, 71, 73, 76, 78, 79, 80, 82, 87, 88, 89, 94, 95, 98], "formula": [18, 53, 75, 82, 100], "xq": 18, "linspac": [18, 53, 64], "yq": 18, "xmc": 18, "ymc": 18, "221": [18, 78], "hist2d": 18, "cmap": [18, 73, 94], "colorbar": [18, 73], "fraction": [18, 56, 57, 59, 62, 65, 71, 75, 78, 79, 89, 92], "label": [18, 22, 24, 28, 35, 52, 53, 57, 61, 62, 64, 67, 69, 73, 76, 78, 79, 85, 90, 93, 94, 97], "222": [18, 78], "223": [18, 78], "norm": [18, 53, 56, 59, 75, 76, 77], "m_c": 18, "propto": [18, 56, 64], "legend": [18, 24, 28, 52, 85], "224": [18, 73], "equal": [18, 29, 31, 53, 56, 57, 61, 62, 64, 67, 75, 76, 77, 78, 79, 82, 88, 95, 99, 100], "surfac": [18, 82, 100], "sphere": [18, 53, 56], "co": [18, 37, 53, 64, 67, 69, 78], "bound": [18, 33, 35, 40, 41, 50, 53, 59, 61, 63, 64, 65, 68, 69, 72, 73, 82, 94, 100], "theta_low": 18, "theta_high": 18, "azimuth": [18, 33, 35, 53, 55, 56, 67, 78, 94], "goe": [18, 20, 53, 64, 76, 78, 79, 88], "phi_low": 18, "phi_high": 18, "solid": [18, 53, 56, 73], "theta": [18, 53, 55, 56, 64, 78], "polar_bound": [18, 56], "theta_lower_bound": 18, "theta_upper_bound": 18, "phi": [18, 53, 55, 56, 59, 64, 74, 78], "azimuthal_": 18, "phi_lower_bound": 18, "phi_upper_bound": 18, "uniform_solid_angle_distribut": 18, "azimuthal_bound": [18, 56], "want": [18, 23, 24, 26, 29, 31, 33, 35, 41, 45, 48, 49, 53, 54, 55, 56, 57, 60, 61, 62, 65, 66, 70, 72, 73, 74, 75, 77, 79, 86, 88, 90, 91, 92, 93, 94, 95, 98, 99, 100], "50000": [18, 65, 82], "solid_angle_sampl": 18, "500000": 18, "spin_mag": 18, "ndarrai": [18, 53, 54, 56, 57, 59, 60, 62, 64, 67, 70, 71, 72, 76, 77, 78], "shape": [18, 33, 42, 53, 61, 62, 65, 67, 76], "dtype": [18, 23, 53, 56, 57, 58, 59, 60, 64, 65, 67, 74, 76, 78, 79], "float": [18, 23, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 92], "spheric": [18, 33, 53, 55, 56, 64, 69, 78, 94], "cartesian": [18, 33, 53, 55, 64, 75, 82, 94], "spinx": [18, 53], "spini": [18, 53], "spinz": [18, 71], "dimens": [18, 32, 53, 56, 61, 62, 64, 65, 67, 73, 75, 76, 79, 94], "3rd": [18, 75], "3d": [18, 61, 82], "across": [18, 31, 33, 42, 44, 56, 57, 62, 64, 82, 90], "add_subplot": [18, 53], "set_xlabel": 18, "set_ylabel": 18, "set_zlabel": 18, "easiest": 19, "wai": [19, 20, 23, 29, 33, 44, 48, 53, 56, 59, 60, 61, 66, 67, 75, 78, 79, 82, 88, 90, 91, 92, 95, 96, 97, 98, 100], "our": [19, 29, 30, 33, 34, 35, 36, 38, 43, 56, 82, 85, 86, 97], "commun": [19, 30, 37, 64], "edit": [19, 48, 57, 67, 82, 84, 94, 95, 97], "mac": [19, 53], "desktop": 19, "ce": 19, "graphic": 19, "pull": [19, 44, 46, 64, 67, 75, 95], "el8": [19, 95], "depend": [19, 31, 35, 42, 43, 46, 48, 53, 56, 59, 61, 62, 64, 65, 67, 74, 76, 78, 79, 80, 82, 84, 92, 94, 95], "root": [19, 53, 56, 69, 72, 75, 78, 79, 82, 92, 100], "filesystem": [19, 48, 60, 93, 94, 95], "login": 19, "bash": [19, 36], "One": [19, 31, 52, 60, 65, 67, 79, 82, 90, 95, 97], "port": [19, 60, 81], "8888": 19, "pycbc_test": 19, "su": 19, "browser": [19, 30, 95], "ip": 19, "imag": [19, 29, 37, 53, 73, 74, 76, 78, 85, 86, 95], "address": [19, 58], "screen": [19, 62, 64], "host": [19, 88, 95, 97], "adddress": 19, "127": [19, 24, 51, 52], "public": [19, 39, 41, 53, 60, 71, 74, 80, 86, 90, 93, 94, 95], "privat": 19, "push": [19, 60, 73, 74, 81, 82], "v": [19, 39, 41, 53, 56, 60, 64, 68, 75, 79, 81, 82, 86, 88, 89, 92, 95, 99, 100], "mount": [19, 48], "detail": [19, 20, 22, 23, 30, 31, 33, 34, 37, 38, 40, 42, 46, 53, 56, 58, 59, 62, 63, 64, 65, 66, 67, 71, 72, 73, 75, 78, 79, 80, 82, 87, 90, 92, 93, 94, 96, 98, 99, 100], "veri": [20, 31, 40, 48, 59, 61, 78, 82, 90, 93], "inadequ": 20, "contact": [20, 22, 48, 49, 82, 84, 88, 89, 95], "team": [20, 86], "yourself": 20, "layer": 20, "websit": 20, "nice": [20, 58, 75, 95], "tutori": [20, 30, 43, 44], "restructuredtext": 20, "overview": [20, 79, 95, 98], "doc": [20, 33, 46, 75, 79, 82, 88, 90, 91, 92, 95, 98, 99, 100], "intern": [20, 29, 56, 57, 58, 59, 60, 64, 65, 66, 67, 76, 77, 78, 79, 88, 98], "index": [20, 25, 31, 37, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79], "rst": [20, 86], "block": [20, 44, 53, 61, 64, 70, 74, 82, 98], "toctre": 20, "maxdepth": 20, "entri": [20, 29, 56, 57, 67, 72, 75, 76, 79, 82, 88, 90, 94, 97, 100], "readabl": 20, "upon": [20, 35, 43, 56, 60, 64, 67, 82, 93, 94], "docstr": [20, 53, 57, 67, 78], "abstract": [20, 42, 44, 61, 62, 64, 65, 74, 78, 79, 82], "person": [20, 82], "tast": 20, "littl": [20, 23, 31, 33, 34, 38, 79, 82, 88, 92, 98, 100], "style": [20, 53, 66, 67, 71, 73], "guid": [20, 72], "member": [20, 30, 58], "ideal": [20, 58, 59, 76], "languag": [20, 86], "accompani": [20, 82], "got": 20, "recommend": [20, 29, 33, 36, 37, 43, 46, 48, 59, 61, 64, 67, 87, 88, 90, 93, 95, 99, 100], "via": [20, 33, 42, 46, 47, 53, 57, 58, 59, 61, 67, 69, 78, 79, 84, 92, 94, 95, 97, 100], "doesn": [21, 36, 37, 53, 62, 73, 74, 76, 78, 79, 82, 90, 94], "Or": [21, 23, 37, 56, 76, 98], "mayb": [21, 79, 88], "plug": [21, 82], "archictectur": 21, "faithsim": 22, "imrphenomb": [22, 85], "1000001000": 22, "123434": 22, "src": [22, 28, 45, 47, 48, 91, 99, 100], "pc10": 22, "pycbc_faithsim": 22, "flatimrc": 22, "waveform1": 22, "14": [22, 37, 53, 56, 57, 95], "waveform2": 22, "imrphenomc": [22, 85], "flatf2": 22, "flatseobnrv1": 22, "seobnrv1": [22, 85], "flateobnrv2": 22, "eobnrv2": [22, 29, 53, 85], "8192": [22, 41], "flateobnrv2hm": 22, "eobnrv2hm": [22, 85], "flatt1": 22, "taylort1": [22, 85], "flatt2": 22, "taylort2": [22, 85], "flatt3": 22, "taylort3": [22, 85], "flattrd": 22, "phenspintaylorrd": [22, 85], "flatt4": 22, "taylort4": [22, 78, 85], "xxx": 22, "user_str": 22, "independ": [22, 31, 33, 44, 53, 56, 61, 62, 64, 65, 71, 75, 76, 82, 87, 88, 92, 93, 94, 95, 100], "pycbc_make_faithsim": 22, "whitespac": [22, 78], "pycbc_faithsim_plot": 22, "nitz": [22, 57, 86, 89], "reli": [23, 58, 65, 71], "fast": [23, 53, 58, 67, 78, 95], "fourier": [23, 58, 59, 72, 76, 78, 85], "often": [23, 40, 43, 61, 82, 85, 90, 98], "domin": [23, 33, 38, 43, 53, 64, 75, 82, 85, 100], "cost": [23, 59, 75, 82, 92, 95], "analys": [23, 31, 72, 77, 79, 82, 87, 88, 90, 92, 97, 98, 99, 100], "balanc": [23, 82], "effici": [23, 40, 43, 53, 65, 74, 77, 82, 97], "eas": [23, 75], "meet": [23, 57, 87], "easi": [23, 30, 33, 42, 67, 82], "involv": [23, 67, 77, 79, 82, 94, 95], "routin": [23, 64, 65, 75, 82], "offer": [23, 42, 44, 53], "cuda": [23, 53, 85, 92], "arrai": [23, 24, 38, 42, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79], "done": [23, 31, 32, 33, 35, 37, 38, 39, 41, 42, 43, 44, 53, 56, 59, 62, 64, 65, 66, 67, 75, 78, 79, 82, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100], "input_arrai": 23, "output_arrai": 23, "ifft": [23, 53, 58, 59, 74, 77, 85], "complex": [23, 25, 28, 57, 58, 59, 64, 74, 76, 77, 78, 82, 98], "real": [23, 33, 34, 53, 59, 74, 76, 78, 85, 86], "precis": [23, 53, 56, 58, 59, 72, 74, 76, 78, 79, 82, 92, 95, 100], "doubl": [23, 53, 57, 58, 69, 72, 74, 76, 78, 92, 94, 95], "worth": [23, 66, 95], "becom": [23, 78, 79, 82, 90, 98, 99], "complic": [23, 56], "inarr": 23, "ones": [23, 26, 40, 52, 53, 56, 59, 64, 72, 75, 76, 78, 79, 82, 83, 88, 90, 95, 100], "64": [23, 29, 76, 78, 80, 92, 95, 96], "complex64": [23, 57, 58, 76], "outarr": 23, "float32": [23, 57, 58, 66, 67, 72, 74, 76, 77, 78], "timeseri": [23, 24, 26, 28, 50, 53, 54, 57, 58, 59, 60, 64, 66, 68, 70, 72, 73, 74, 77, 78, 79, 85, 86], "frequencyseri": [23, 50, 53, 58, 59, 62, 64, 70, 72, 73, 74, 75, 77, 78, 86], "except": [23, 28, 31, 35, 56, 57, 60, 62, 64, 67, 68, 72, 78, 79, 82, 90, 92, 100], "float64": [23, 60, 61, 66, 72, 74, 76, 78], "to_frequencyseri": [23, 24, 28, 53, 76, 85, 86], "complex128": [23, 76], "to_timeseri": [23, 28, 53, 76], "signific": [23, 50, 53, 59, 73, 76, 89], "perfomm": 23, "fft_class": [23, 74], "_delta_t": 23, "IF": [23, 91], "_delta_f": 23, "ifft_class": 23, "idea": [23, 80, 82, 84, 90], "reassign": [23, 57], "backend_support": [23, 50, 53], "get_backend_nam": [23, 53, 58], "set_backend": [23, 53, 58], "get_backend": [23, 53, 58], "flen": [24, 51, 52, 68, 72, 77, 85], "int": [24, 28, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 85, 88, 92, 100], "2048": [24, 29, 33, 34, 35, 38, 39, 41, 51, 52, 56, 59, 60, 64, 72, 78, 80, 82, 92, 94, 96, 99, 100], "tsampl": [24, 51, 52], "noise_from_psd": [24, 51, 52, 53, 70, 82], "sample_tim": [24, 28, 51, 53, 74, 76, 85, 86], "suppress": [24, 59, 76], "lowpass_fir": [24, 28, 53, 59, 76], "algorithm": [24, 30, 31, 57, 59, 61, 65, 67, 82], "written": [24, 26, 29, 31, 60, 62, 64, 65, 66, 67, 75, 76, 78, 79, 82, 88, 90, 92, 93, 94, 95, 97, 99], "tap": 24, "resort": 24, "hood": 24, "resampl": [24, 34, 50, 53, 62, 66, 73, 76, 80, 92, 95, 100], "coeff": [24, 57, 59, 76], "ts_filter": 24, "lfilter": 24, "coeffici": [24, 53, 56, 57, 59, 75, 76, 78], "compens": 24, "ts_filtered2": 24, "fir_zero_filt": [24, 53, 59, 76], "stild": [24, 58, 59, 62, 77], "get_fd_waveform": [24, 28, 43, 53, 78, 85], "resiz": [24, 28, 53, 57, 62, 64, 67, 76, 78, 85], "len": [24, 28, 53, 56, 59, 64, 65, 67, 72, 78, 85, 86], "matched_filt": [24, 28, 50, 53, 59, 87, 95], "low_frequency_cutoff": [24, 28, 52, 59, 61, 64, 70, 72, 74, 76, 77, 78, 85, 92], "ab": [24, 28, 57, 59, 64, 73, 76, 77, 78, 79], "arxiv": [24, 53, 57, 59, 64, 71, 72, 77, 78, 79], "gr": [24, 53, 72, 78], "qc": [24, 53, 72], "0405045": 24, "known": [24, 52, 53, 54, 57, 61, 76, 79, 92, 95, 97], "allen": [24, 57, 77, 95], "num_bin": [24, 25, 57, 77], "power_chisq": [24, 53, 77], "2_r": 24, "aid": [25, 28, 56, 64, 85], "canon": 25, "definit": [25, 42, 44, 53, 56, 57, 64, 66, 67, 96, 97, 98], "alwai": [25, 53, 57, 59, 60, 62, 63, 67, 75, 78, 81, 82, 85, 88, 95, 98, 100], "itself": [25, 42, 44, 59, 64, 65, 76, 95], "prefix": [25, 31, 32, 45, 48, 49, 53, 56, 60, 72, 73, 74, 76, 78, 99], "futur": [25, 29, 53, 55, 75, 79, 89, 92, 94], "date": 25, "snr": [25, 28, 29, 30, 36, 37, 38, 39, 41, 45, 50, 53, 57, 58, 59, 64, 67, 68, 71, 77, 78, 79, 83, 89, 91, 92, 93, 94, 95], "mangitud": 25, "chisq": [25, 29, 50, 53, 57, 83, 92, 95], "bruce": [25, 77, 95], "chisq_dof": [25, 57, 77], "Not": [25, 31, 53, 61, 66, 67, 71, 82, 93], "dof": [25, 77, 92], "bank_chisq": [25, 50, 53], "bank_chisq_dof": [25, 77], "cont_chisq": 25, "autochisq": [25, 50, 53, 92], "cont_chisq_dof": 25, "auto": [25, 61, 77, 92], "template_dur": [25, 53, 67], "sigmasq": [25, 53, 57, 59], "1mpc": 25, "denot": [25, 79, 88, 92, 95], "valid": [25, 38, 52, 53, 56, 57, 58, 59, 60, 61, 62, 64, 65, 72, 74, 75, 78, 79, 80, 82, 83, 86, 87, 90, 92, 94, 95, 100], "period": [25, 49, 53, 55, 59, 65, 76, 82, 96], "vlid": 25, "Its": [25, 77, 88, 95], "subject": [25, 82], "notic": [25, 33, 82, 93, 94], "template_hash": [25, 67, 78], "pycbc_coinc_mergetrig": [25, 89, 95], "template_id": [25, 53, 57, 59, 67, 73, 75], "uniqu": [25, 31, 35, 42, 44, 64, 70, 72, 73, 74, 76, 78, 79, 88, 90, 91, 92, 94, 100], "id": [25, 53, 57, 66, 67, 71, 73, 75, 78, 79, 87, 92, 95], "precalcul": [25, 41, 43, 64, 75, 78], "map": [25, 45, 50, 53, 55, 56, 57, 61, 62, 64, 65, 66, 73, 74, 75, 78, 79, 82, 93, 94, 95, 97, 98], "bank_chisq_dof_templ": 25, "bank_chisq_templ": 25, "chisq_dof_templ": 25, "chisq_templ": 25, "coa_phase_templ": 25, "cont_chisq_dof_templ": 25, "cont_chisq_templ": 25, "end_time_templ": 25, "sigmasq_templ": 25, "snr_templat": 25, "template_boundari": 25, "template_duration_templ": 25, "h5py": [25, 31, 42, 57, 62, 67, 73, 75, 78, 79], "testdata": 25, "snr_reg": 25, "snr_template_0": 25, "record": [26, 37, 50, 53, 56, 57, 79, 88, 92, 98], "laser": 26, "interferomet": [26, 53, 57, 60, 79, 88, 92, 100], "gwf": [26, 28, 29, 34, 37, 38, 39, 41, 60, 66, 80, 94], "stamp": [26, 29, 76], "metadata": [26, 31, 42, 50, 53, 62, 64, 65, 66, 67, 79, 82, 94], "tseri": 26, "query_and_read_fram": [26, 53, 60], "g1_rds_c01_l3": 26, "der_data_h": 26, "1049587200": 26, "return": [26, 31, 37, 42, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 85, 86, 88, 90, 91, 92, 95, 98, 99, 100], "instanc": [26, 31, 46, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 86, 88, 90, 91, 92, 94, 95, 96, 98, 99, 100], "altern": [26, 29, 31, 48, 64, 67, 78, 82, 90], "frame_path": [26, 53, 60], "read_fram": [26, 28, 53, 60], "whose": [26, 53, 56, 57, 58, 64, 72, 74, 79, 82, 95], "write_fram": [26, 53, 60], "test_un": 26, "flag_names_to_bitmask": [26, 53, 60], "bit": [26, 60, 61, 65, 79, 98], "mask": [26, 53, 57, 60, 67], "highpass_fir": [28, 53, 59, 76], "welch": [28, 33, 52, 53, 72, 74, 76, 82], "catalog": [28, 50, 53, 79, 83], "spectrum": [28, 70, 72, 76, 92, 100], "white_strain": 28, "smooth": [28, 43, 72, 74, 78, 79], "35": [28, 35, 38, 64], "300": [28, 39, 91, 95], "shift": [28, 53, 56, 57, 59, 64, 66, 76, 77, 78, 79, 94], "flip": [28, 98], "roll": [28, 53, 57, 76, 78], "007": 28, "xlim": [28, 52, 85, 86], "1126259462": [28, 33, 34, 35, 38, 53, 94], "21": [28, 53, 57, 69, 78], "45": [28, 33, 38, 52, 85], "ylim": [28, 52], "150": [28, 36, 37, 40, 59], "urllib": 28, "request": [28, 44, 46, 52, 53, 54, 57, 59, 60, 62, 64, 67, 75, 76, 77, 78, 79, 80, 88, 92, 94, 97, 98], "urlretriev": 28, "fname": [28, 60, 67, 71, 79], "h1_losc_4_v2": 28, "1126259446": 28, "www": [28, 34, 38, 82, 86, 90, 95], "gw150914data": 28, "filenam": [28, 29, 31, 52, 53, 56, 57, 58, 60, 61, 62, 65, 66, 67, 72, 73, 78, 79, 82, 88, 92, 99], "losc": [28, 39, 41], "wraparound": 28, "ll": [28, 33, 34, 35, 38, 39, 40, 41, 52, 64, 93, 94, 98], "slow": [28, 61, 76, 82, 84], "heard": 28, "importerror": 28, "250": [28, 57, 79], "strech": 28, "upward": 28, "human": 28, "hear": 28, "fdata": 28, "1200": 28, "slice": [28, 53, 57, 62, 65, 66, 67, 74, 76, 78, 97], "1500": [28, 94], "3000": [28, 75, 95], "save_to_wav": [28, 53, 76], "gw150914_h1_chirp": 28, "wav": [28, 76], "audio": [28, 76], "googl": [28, 75], "chrome": 28, "plai": [28, 53, 57, 82], "correctli": [28, 49, 53, 56, 64, 76, 78, 79, 90], "_download": 28, "save": [29, 31, 42, 53, 56, 57, 62, 64, 65, 67, 71, 73, 74, 76, 78, 79, 83, 87, 92, 93, 94, 95, 98], "column": [29, 52, 53, 56, 57, 58, 67, 72, 73, 74, 76, 78, 82, 95, 100], "awgstream": 29, "coher": [29, 50, 53, 64, 73, 79, 92, 97, 98], "ligolw": [29, 50, 53, 57, 66, 75, 76], "sim_inspir": [29, 53, 79, 91], "usag": [29, 57, 79, 82, 89, 95, 97], "geocent_end_tim": 29, "1124381661": 29, "gps_start_tim": [29, 64, 82, 90, 92, 100], "1124380361": 29, "gps_end_tim": [29, 64, 82, 90, 92, 100], "1124382409": 29, "identifi": [29, 31, 53, 57, 66, 71, 74, 75, 78, 79, 86, 88, 90, 91, 92, 95, 98, 100], "h1_hoft_c00": [29, 96, 97, 98], "channel_nam": [29, 60, 74, 76, 79, 82, 92, 100], "gd": [29, 95, 96, 97, 98], "calib_strain": [29, 95, 96, 97, 98], "seper": 29, "pseudofourpn": 29, "sai": [29, 35, 39, 41, 53, 90], "taper_start": [29, 78], "network": [29, 57, 64, 68, 71, 79, 95, 98], "instur": 29, "28": [29, 56, 69], "disk": [29, 31, 48, 53, 62, 65, 67, 69, 75, 79, 82, 88, 90, 95, 98, 100], "dictat": [29, 99], "disgard": 29, "edg": [29, 43, 53, 64, 71, 77], "hwinjcbc_": 29, "_h1": 29, "txt": [29, 37, 46, 52, 53, 56, 61, 71, 76, 79, 82, 90, 92], "process_param": [29, 57], "sngl_inspir": [29, 75, 82, 99, 100], "everi": [29, 31, 33, 43, 45, 53, 56, 57, 59, 62, 63, 64, 65, 67, 72, 73, 75, 76, 78, 79, 82, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100], "tuesdai": 29, "month": [29, 73, 89], "anytim": 29, "dure": [29, 31, 35, 37, 59, 64, 65, 68, 82, 90, 94, 95], "dai": [29, 64, 73, 95], "86400": [29, 91, 95, 100], "week": [29, 35, 95], "604800": 29, "1126368017": 29, "1130371217": 29, "kpc": [29, 95], "totalmass": [29, 75], "04": 29, "0hz": 29, "spintaylort4threepointfivepn": [29, 95], "startend": [29, 78, 92], "band": [29, 59, 64, 76, 78], "combin": [29, 31, 33, 45, 53, 57, 59, 60, 61, 64, 65, 66, 67, 71, 72, 73, 76, 78, 79, 80, 82, 90, 93, 94, 95, 96, 97, 98], "hl": [29, 91], "injections_1": 29, "4003200": 29, "had": [29, 42, 53, 93, 94], "16384hz": 29, "hwinj_cbc_simulation_id_": 29, "simid": 29, "simulation_id": [29, 66, 67], "x11": 29, "strongli": [29, 82, 99], "entir": [29, 33, 41, 78, 89, 92, 94], "zoom": [29, 73], "close": [29, 33, 43, 53, 56, 59, 67, 75, 76, 79, 82, 95], "output_path": [29, 33, 34], "ssh": 29, "gsissh": 29, "lda": [29, 60, 79, 82, 88, 90, 91, 92, 95, 98, 99, 100], "pcdev1": 29, "caltech": [29, 79, 88, 90, 91, 92, 95, 98, 99, 100], "edu": [29, 69, 79, 82, 88, 90, 91, 92, 95, 96, 97, 98, 99, 100], "exact": [29, 33, 76, 79, 82, 89, 95], "analog": [29, 67], "tmpltbank_fil": [29, 79], "inspiral_fil": [29, 95], "inspiral_pycbc": 29, "inj": [29, 53, 66, 73, 89, 90, 92, 95, 97], "cpu": [29, 53, 76, 78, 92, 95, 96], "trig": [29, 57, 71, 73, 92], "echo": [29, 46, 47, 48, 49, 93, 94, 95], "singledettrigg": [29, 53, 57, 67], "h1_trigger": 29, "imax": 29, "argmax": [29, 50, 53, 57, 64], "max_snr": 29, "pycbc_insert_frame_hwinj": 29, "insert": [29, 58, 60, 74], "hwinj_fil": 29, "hwinj": 29, "Then": [29, 36, 46, 48, 53, 59, 61, 67, 72, 74, 79, 81, 82, 95], "ligolw_segment_query_dqsegdb": [29, 95, 96, 97], "dqsegdb5": [29, 95], "phy": [29, 59, 82, 90, 95, 96, 97], "syr": [29, 95, 96, 97], "dmt": [29, 90, 95, 96, 97, 98], "analysis_readi": [29, 95, 96, 97, 98], "ligolw_print": 29, "databs": 29, "gw_data_find": [29, 79, 88], "l1_rd": 29, "gap": [29, 82, 88, 90, 92, 95, 96, 97], "h1_rd": 29, "termin": [29, 65, 75, 82, 95], "miss": [29, 41, 53, 64, 79, 82, 88, 89, 94], "effort": [30, 58], "core": [30, 32, 33, 34, 50, 53, 56, 64, 65, 73, 78, 82, 87, 88, 90, 91, 92, 94, 96, 98, 99, 100], "suit": [30, 42], "astrophys": [30, 71], "compact": [30, 42, 53, 54, 69, 87, 95, 97], "gw150914": [30, 31, 33, 35, 83, 93], "ongo": 30, "contribut": [30, 43, 44, 79], "whether": [30, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 73, 76, 77, 78, 79, 88, 90, 92, 95, 97], "feedback": 30, "configur": [30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 48, 50, 53, 56, 61, 62, 64, 65, 66, 73, 74, 82, 87], "robust": 30, "multi": [30, 41, 42, 44, 53, 56, 57, 62, 64, 65, 72, 74, 76, 78, 95], "messeng": 30, "archiv": [30, 53], "deep": 30, "associ": [30, 53, 56, 57, 59, 61, 62, 64, 67, 72, 76, 79, 82, 86, 88, 89, 92, 94, 95, 98, 100], "target": [30, 43, 63, 65, 82, 97, 100], "gamma": [30, 53, 64, 75, 82, 97, 100], "rai": [30, 97], "transient": [30, 57, 74, 76], "next": [30, 48, 49, 60, 61, 72, 74, 78, 86, 92, 96, 97], "year": [30, 55, 57, 72, 73, 92], "pip": [30, 46, 47, 84, 94], "conda": [30, 46], "cvmf": [30, 46, 48, 81, 95], "subpackag": [31, 50, 56], "evalu": [31, 33, 53, 56, 57, 61, 64, 65, 67, 71, 73, 77, 78, 87], "likelihood": [31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 53, 57, 61, 64, 65, 71, 94], "bayesian": [31, 35, 64, 65], "pycbc_infer": [31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 56, 62, 64, 79, 93, 94], "recolor": 31, "vari": [31, 33, 38, 39, 41, 43, 46, 53, 56, 64, 65, 74, 75, 78, 79, 82, 94, 100], "parallel": [31, 32, 33, 53, 62, 64, 65, 75, 82, 87, 89, 92, 94, 95, 99], "workflowconfigpars": [31, 53, 56, 62, 63, 64, 65, 74, 76, 79, 87, 90], "variable_param": [31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 56, 61, 62, 64, 65, 94], "equival": [31, 44, 56, 59, 67, 74, 76, 78, 79, 82, 88, 90, 93, 95, 97], "everyth": [31, 62, 82, 90], "referenc": [31, 57, 67, 94], "load": [31, 33, 34, 37, 38, 42, 52, 53, 56, 61, 62, 63, 64, 65, 66, 67, 69, 73, 74, 76, 78, 79, 87], "explan": [31, 71], "At": [31, 75, 79, 95, 97, 98], "recogn": [31, 57, 61, 62, 64, 73, 78, 79, 92, 95], "from_config": [31, 35, 44, 50, 53, 56, 61, 63, 64, 65, 74], "test_": 31, "nwalker": [31, 32, 33, 39, 40, 61, 62, 65, 94], "5000": [31, 32, 40, 41, 61, 75, 82], "niter": [31, 32, 39, 40, 61, 62, 65], "walker": [31, 32, 33, 36, 37, 39, 61, 62, 65, 94], "100th": 31, "mcmc": [31, 33, 38, 39, 41, 42, 44, 61, 62, 65, 79, 94], "burn_in": [31, 33, 39, 40, 50, 53, 65, 94], "logic": [31, 58, 61, 67, 73, 78, 92], "nacl": [31, 33, 40, 53, 61, 94], "max_posterior": [31, 33, 40, 53, 61, 94], "were": [31, 33, 35, 53, 56, 57, 60, 61, 62, 64, 65, 67, 72, 76, 78, 82, 85, 86, 90, 93, 94, 95, 97], "max_postrior": 31, "thin": [31, 44, 61, 62, 65, 79, 94], "behavior": [31, 53, 58, 78, 95], "markov": [31, 61], "chain": [31, 33, 40, 42, 44, 53, 61, 62, 65, 79, 82, 94], "quickli": [31, 32, 40], "lead": [31, 33, 62, 67, 73, 75, 76, 78, 82, 93, 100], "temperatur": [31, 33, 42, 44, 61, 62, 65], "acquir": [31, 33, 65, 94], "byte": [31, 62, 67, 76, 79], "20gb": [31, 95], "quieter": 31, "converg": [31, 33, 44, 61, 65, 68, 82, 94], "100gb": 31, "clearli": [31, 90], "vast": 31, "major": [31, 81, 97], "prevent": [31, 49, 72], "growth": [31, 53, 78], "unbound": [31, 56], "slower": [31, 43, 48, 59, 67, 75, 82, 88], "cap": 31, "never": [31, 61, 65], "exce": [31, 33, 57, 64, 65, 82, 100], "ntemp": [31, 33, 39, 40, 61, 62, 65, 94], "nparamet": [31, 61], "autocorrel": [31, 33, 44, 45, 50, 53, 62, 65, 77], "thinned_bi": [31, 61, 62], "attribut": [31, 42, 44, 53, 56, 57, 58, 61, 62, 64, 65, 66, 67, 72, 74, 76, 78, 79, 90, 92, 95], "attr": [31, 62, 64, 65, 66, 67, 73, 78, 79, 94], "acl": [31, 33, 44, 59, 61, 62, 65], "amount": [31, 33, 57, 59, 60, 62, 66, 74, 76, 79, 82, 92, 95, 100], "adopt": [31, 53], "convent": [31, 53, 58, 64, 78, 82, 85, 86], "burn_in_iter": [31, 61, 62], "sampler_info": [31, 42, 62], "occur": [31, 38, 53, 57, 62, 66, 68, 75, 78, 85, 86, 88, 94], "likewis": [31, 61, 67, 79], "skip": [31, 45, 57, 63, 64, 79, 82, 90, 95, 97], "wherea": [31, 41, 61, 67], "term": [31, 43, 53, 59, 64, 72, 73, 75, 78, 82, 92, 94, 100], "resolut": [31, 33, 38, 39, 41, 59, 64, 72, 76, 78], "thu": [31, 43, 62, 64, 67, 74, 75], "coupl": [31, 38, 74], "joint": [31, 35, 50, 53, 64], "statist": [31, 42, 57, 59, 61, 64, 67, 71, 77, 78, 79, 83, 92, 95], "static_param": [31, 33, 35, 36, 37, 38, 39, 41, 56, 61, 62, 64, 65, 94], "remain": [31, 33, 38, 56, 65, 75, 78, 82, 97], "throughout": [31, 44], "imrphenompv2": [31, 33, 85, 94], "come": [31, 67, 84, 95, 97, 98], "outsid": [31, 52, 57, 58, 64, 67, 72, 76, 80, 82, 94, 97, 98], "plugin": [31, 37, 50, 53, 64, 73], "accomplish": [31, 56, 64], "sophist": 31, "sampling_param": [31, 33, 61, 64, 65, 94], "sampling_transform": [31, 33, 64, 94], "q": [31, 33, 35, 36, 37, 53, 56, 57, 59, 63, 64, 67, 76, 77, 78, 83, 92, 94, 95], "jacobian": [31, 50, 53, 56, 64, 65], "inverse_jacobian": [31, 50, 53], "special": [31, 35, 42, 43, 46, 53, 56, 60, 64, 76, 79, 85, 94, 98], "calib_": 31, "waveforms_transform": 31, "chirp_dist": [31, 50, 53, 95], "go": [31, 53, 61, 64, 65, 67, 75, 79, 81, 82, 89, 90, 93, 95, 97], "waveform_transform": [31, 33, 35, 36, 37, 39, 41, 64, 94], "cosmologi": [31, 50, 71, 94], "math": [31, 56, 59, 64, 73, 92, 95], "love": 31, "relationship": [31, 53, 79], "dquadmon_from_lambda": [31, 50, 53], "relat": [31, 53, 55, 57, 59, 61, 64, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 89, 96, 97, 100], "moment": [31, 53, 64, 69, 75, 82, 97, 98, 100], "someth": [31, 62, 64, 74, 76, 77, 82, 90, 91, 94, 98, 99, 100], "why": [31, 79, 82, 88], "fc0": [31, 74], "fs0": [31, 74], "qinv0": [31, 74], "actuat": [31, 74], "penultim": [31, 74], "sens": [31, 33, 57, 64, 74, 82], "digit": [31, 60, 74], "tst": 31, "pu": 31, "union": [31, 58], "join": [31, 64, 78, 79, 85], "ufunc": [31, 67], "constrain": [31, 56, 64], "12": [31, 33, 36, 45, 57, 67, 72, 82, 92, 95], "constraint_arg": [31, 35, 56], "q_from_mass1_mass2": [31, 37, 50, 53, 94], "finish": [31, 33, 62, 90, 93, 94], "renam": [31, 56, 62, 67], "bkup": 31, "backup": [31, 62, 65, 79, 88], "least": [31, 42, 44, 47, 49, 53, 57, 58, 59, 61, 62, 64, 74, 76, 82, 93, 95], "attempt": [31, 35, 53, 57, 58, 60, 62, 64, 73, 74, 79, 88, 90, 92, 95, 100], "continu": [31, 37, 38, 39, 41, 42, 47, 48, 49, 56, 59, 64, 70, 79, 81], "perus": 31, "structur": [31, 42, 44, 56, 57, 58, 65, 67, 73, 75, 79], "h5l": 31, "loadfil": [31, 42, 61, 62], "r": [31, 46, 53, 55, 56, 59, 62, 67, 69, 71, 73, 74, 82, 92, 100], "handler": [31, 53, 62, 64, 67, 78], "read_sampl": [31, 61, 62], "fieldarrai": [31, 53, 56, 62, 64, 66, 67, 73, 78], "smbhb": 31, "ldc": [31, 36, 72], "pycbc_inference_plot_posterior": [31, 32, 36, 37, 38, 39, 41, 42, 94], "movi": [31, 32], "pycbc_inference_plot_movi": [31, 32], "pycbc_make_inference_workflow": [31, 93], "pycbc_make_inference_inj_workflow": 31, "api": [31, 42, 58, 59, 64, 67, 79, 83], "sever": [32, 33, 43, 44, 52, 64, 73, 80, 89], "laptop": [32, 38], "properli": [32, 44, 53, 56, 59, 76], "2d": [32, 57, 59, 61, 64, 75, 76, 82], "normal2d": 32, "nprocess": [32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 65, 92, 94], "minut": [32, 37, 38, 39, 41], "increas": [32, 33, 41, 57, 61, 64, 67, 74, 78, 82, 89, 94], "contour": [32, 36, 37, 41, 53, 61, 73, 94, 95], "loglikelihood": [32, 35, 40, 61, 64, 65, 94], "vartheta": [32, 64], "50th": [32, 36, 37, 41, 73], "90th": [32, 36, 37, 41, 73], "percentil": [32, 36, 37, 41, 73, 93], "evolv": [32, 65], "normal2d_mcmc_evolut": 32, "mp4": [32, 45], "ffmpeg": 32, "pycbc_create_inject": [33, 35, 36, 66, 79, 93], "420": 33, "37": [33, 64, 78], "75": [33, 82], "ninject": [33, 35, 36], "delta_tc": [33, 93, 94], "spin1_a": [33, 45, 53, 63, 64, 67, 93, 94], "spin1_azimuth": [33, 45, 53, 67, 93, 94], "spin1_polar": [33, 45, 53, 67, 93, 94], "spin2_a": [33, 45, 53, 67, 93, 94], "spin2_azimuth": [33, 45, 53, 67, 93, 94], "spin2_polar": [33, 45, 53, 67, 93, 94], "80": [33, 56, 58, 63, 94], "radial": [33, 53, 55, 69, 94], "wide": [33, 64, 90], "stationari": [33, 36, 43, 53, 64, 78, 95], "integr": [33, 34, 38, 43, 53, 56, 57, 60, 61, 62, 64, 65, 71, 75, 82, 87, 100], "domain": [33, 36, 53, 56, 59, 64, 66, 72, 74, 75, 76, 77, 78, 82, 83, 86, 92, 94, 95], "ell": [33, 78], "leq": [33, 56, 59], "smallest": [33, 53, 54, 57, 74, 75, 82], "faster": [33, 43, 53, 64, 66, 75, 78, 82, 85], "fulli": [33, 79, 90, 94], "simplif": [33, 58, 78], "coasles": 33, "reus": [33, 35, 82], "event": [33, 35, 50, 53, 54, 59, 67, 71, 75, 79, 83, 84, 92, 93, 94, 95, 98], "simpli": [33, 41, 58, 67, 76, 78, 79, 89, 90, 94, 97, 98], "42": [33, 35, 39, 53, 63, 72], "44": 33, "re": [33, 42, 44, 53, 57, 59, 64, 78, 93, 94], "numer": [33, 34, 38, 41, 43, 53, 56, 57, 58, 61, 64, 69, 72, 73, 75, 76, 78, 79, 82, 87, 100], "safe": [33, 34, 38, 60, 72, 75, 79, 80, 82, 90, 92, 100], "discard": [33, 34, 38, 42, 57, 74, 98], "encompass": [33, 67, 78, 79], "admit": [33, 94], "plu": [33, 42, 43, 53, 57, 59, 62, 73, 74, 78, 79], "uncertainti": [33, 53, 57, 59, 71, 73, 79], "happen": [33, 35, 53, 61, 62, 64, 67, 94, 95, 96, 98], "small": [33, 43, 45, 57, 59, 66, 95, 96], "afterward": [33, 79], "good": [33, 53, 82, 90, 92, 95, 98], "safeti": [33, 65], "resembl": [33, 57], "center": [33, 34, 35, 53, 56, 59, 60, 66, 74, 75, 79], "odd": [33, 59, 76, 98], "convolut": [33, 71, 72, 76], "subtract": [33, 78, 79, 98], "consequ": [33, 42, 44], "delta": [33, 45, 57, 63, 64, 75, 78, 82, 90, 92, 100], "nsampl": [33, 40, 56, 61, 64, 65, 71, 94], "checkpoint": [33, 40, 42, 44, 61, 62, 65, 79, 92, 93, 94], "2000": [33, 35, 40, 45, 52, 82, 90, 92, 94, 100], "left": [33, 44, 53, 56, 57, 59, 64, 72, 73, 76, 77, 78, 79, 82, 85, 90, 92, 94, 95, 97], "until": [33, 44, 45, 53, 54, 59, 62, 64, 65, 75, 78, 82], "prior_config": [33, 34], "gw150914_like": [33, 34], "data_config": [33, 34], "sampler_config": [33, 34], "adjust": [33, 34, 38, 46, 57, 71, 73, 74, 79, 94], "capabl": [33, 34, 43, 67, 75, 79, 86, 88, 92, 98, 99, 100], "nproc": [33, 34], "omp_num_thread": [33, 34, 36, 37, 38], "stop": [33, 34, 59, 62, 64, 65, 66, 75, 76, 78, 82, 92, 93, 94, 95, 97], "spawn": [33, 34], "otherwis": [33, 34, 43, 53, 56, 57, 58, 59, 61, 62, 64, 65, 67, 73, 74, 76, 77, 78, 79, 82, 89, 90, 92, 95], "dimension": [33, 53, 56, 57, 59, 61, 64, 65, 72, 73, 75, 76], "computation": 33, "expens": [33, 59, 60, 63], "With": [33, 43, 64, 67, 82, 90, 94, 100], "hour": [33, 95], "struggl": [33, 94], "accumul": [33, 42, 58, 59, 94], "temp": [33, 62, 65], "issu": [33, 36, 46, 58, 62, 64, 67, 72, 74, 79, 82, 88, 89, 90], "decreas": [33, 57, 94], "sometim": [33, 72, 80, 90], "wget": 34, "eventapi": [34, 38], "h1_gwosc_16khz_r1": 34, "1126257415": [34, 38], "l1_gwosc_16khz_r1": 34, "43": [34, 38, 64, 72, 78], "16khz_r1_strain": [34, 80, 94], "modifi": [34, 37, 64, 65, 72, 74, 76, 78, 79, 92, 95], "accordingli": [34, 62, 74, 88, 90], "ligo_datafind_serv": [34, 88, 90, 95], "h1_losc_16_v1": [34, 94], "l1_losc_16_v1": [34, 94], "1897234": 34, "wish": [35, 42, 44, 46, 62, 94, 95, 97], "equat": [35, 53, 56, 69, 75], "arriv": [35, 53, 55], "assumpt": [35, 53, 59, 60, 82], "initi": [35, 42, 53, 55, 56, 57, 63, 64, 65, 67, 74, 75, 76, 78, 79, 82, 84, 88, 90, 91, 92, 95, 98, 99, 100], "sub": [35, 43, 62, 63, 64, 67, 76, 78, 79, 82, 86, 87, 88, 90, 91, 92, 94, 95, 99, 100], "sum": [35, 53, 57, 64, 76, 77, 78, 82, 100], "regard": 35, "box": [35, 81, 84, 95], "repres": [35, 36, 37, 42, 43, 53, 54, 56, 57, 67, 72, 73, 76, 79], "__model": [35, 64], "belong": [35, 53, 57, 64, 71, 79, 98], "prepend": [35, 64, 76, 95], "__": [35, 64], "_": [35, 58, 61, 63, 64, 73, 78], "b": [35, 53, 56, 64, 67, 71, 72, 74, 76, 81, 82], "foo": [35, 44, 56, 61, 64, 67, 79, 90], "bar": [35, 44, 53, 56, 61, 67, 73, 79, 90, 95], "a_b__foo": 35, "c__foo": 35, "manner": [35, 67], "a__data": 35, "b__data": 35, "c__data": 35, "strip": [35, 61, 64], "header": [35, 53, 56, 62, 63, 64, 73], "inherit": [35, 53, 57, 62, 64, 65, 67, 78, 79, 95], "basemodel": [35, 61, 64, 65], "illustr": [35, 82, 94, 95], "slightli": [35, 40, 59, 82, 94], "appar": 35, "430": 35, "500": [35, 38, 40, 57, 64, 78, 79, 82], "event1": [35, 64], "pick": [35, 49, 57, 81, 90], "arbitrarili": [35, 57], "1126859462": 35, "event1_inj": 35, "event2_inj": 35, "event2": [35, 64], "submodel": [35, 43, 64], "event1__model": [35, 64], "epsilon": [35, 36, 37, 39, 53, 55, 64], "005": [35, 59, 89], "mass1_ref": [35, 36, 37, 39], "mass2_ref": [35, 36, 37, 39], "tc_ref": [35, 36, 37, 39], "from_inject": [35, 64], "ra_ref": 35, "dec_ref": 35, "event2__model": [35, 64], "aligo": [35, 82, 85, 95], "event1__data": 35, "237": 35, "82": 35, "event2__data": 35, "918": 35, "6610": 35, "srcmchirp": [35, 93, 94], "event1__delta_tc": 35, "event1__ra": 35, "event1__dec": 35, "event2__delta_tc": 35, "event2__dra": 35, "event2__ddec": 35, "taken": [35, 44, 53, 57, 59, 60, 62, 72, 75, 76, 78, 79, 80], "ogc": 35, "23": [35, 39, 55, 64, 73, 78, 82, 85], "105": 35, "event1__tc": 35, "event2__tc": 35, "event2__dra_mean": 35, "event2__dra_var": 35, "event2__ddec_mean": 35, "event2__ddec_var": 35, "event2__ra": 35, "event2__dec": 35, "constraint": [35, 41, 50, 53, 64, 65], "event2dec": 35, "And": [35, 56, 82], "dlogz": [35, 36, 37, 38, 40, 41, 61, 65, 94], "nlive": [35, 36, 37, 38, 40, 41, 65, 94], "checkpoint_time_interv": [35, 41, 65], "1800": 35, "maxcal": [35, 41, 65], "event1_relbin": 35, "event2_relbin": 35, "tdi": [36, 37, 72], "supermass": [36, 37], "mock": [36, 37], "ref_fram": [36, 37, 53], "pe": [36, 56], "bbhx_phenomd": [36, 37], "1015522": [36, 37], "4376": [36, 37], "796849": [36, 37], "1091": [36, 37], "597755394865021": [36, 37], "36905807298613247": [36, 37], "17758": [36, 37], "367941273442": [36, 37], "5970175301911231": [36, 37], "275929308696054": [36, 37], "4431083771985165": [36, 37], "2734504596198182": [36, 37], "22558110042980073": [36, 37], "4799624": [36, 37], "274911478": [36, 37], "t_obs_start": [36, 37], "31536000": [36, 37], "behind": [36, 37, 55], "t_offset": [36, 37], "7365189": [36, 37, 55], "431698299": [36, 37, 55], "1e": [36, 37, 52, 56, 59, 72, 73, 78], "injection_smbhb": 36, "lisa_a": [36, 37], "lisa_": [36, 37], "lisa_t": [36, 37], "4800021": [36, 37], "15572853": [36, 37], "26735979": 36, "len_arm": [36, 72], "5e9": 36, "acc_noise_level": [36, 72], "4e": 36, "oms_noise_level": [36, 72], "9e": 36, "0001": [36, 37, 56, 75], "267840": 36, "133920": 36, "spin1z_ref": [36, 37], "spin2z_ref": [36, 37], "703772": [36, 37], "7245316936": [36, 37], "860166": [36, 37], "6633165143": [36, 37], "1469802543574181": [36, 37], "401864755325733": [36, 37], "4798221": [36, 37], "4801821": [36, 37], "better_pol": [36, 37], "export": [36, 37, 47, 48, 49, 58, 95, 97], "dirnam": [36, 37, 38, 39, 41], "lisa_smbhb_relbin": [36, 37], "lisa_smbhb_inj_p": 36, "backend": [36, 58, 76, 83, 92], "seem": [36, 58, 95], "24": [36, 45, 53, 64, 73, 75, 95], "fine": [36, 64, 78, 79, 82, 93, 94, 95, 100], "lisa_smbhb_mass_tc": 36, "red": [36, 37, 73, 93], "challeng": 37, "2a": 37, "sangria": [37, 43], "bbhx": 37, "heterodyn": [37, 64], "click": [37, 44, 73, 81, 95, 97], "26735978": 37, "a_psd": 37, "e_psd": 37, "t_psd": 37, "a_tdi_v2": 37, "e_tdi_v2": 37, "t_tdi_v2": 37, "la": 37, "le": 37, "lt": 37, "mchirp_ref": 37, "781969": 37, "693924104": 37, "q_ref": 37, "2744225048415756": 37, "distance_ref": 37, "inclination_ref": 37, "dataset": [37, 42, 56, 57, 62, 67, 73, 76, 78], "mbhb_params_v2_lisa_fram": 37, "pkl": 37, "strain_fil": 37, "_tdi_v2": 37, "curl": [37, 38, 39, 41], "lo": [37, 71], "7497853": 37, "psd_file": [37, 72, 79, 82, 84, 92, 100], "_psd": 37, "params_fil": [37, 56], "lisa_smbhb_ldc_p": 37, "lisa_smbhb": 37, "simplifi": [37, 62, 72, 79], "lisa_smbhb_mass_tc_0": 37, "subprocess": [37, 79], "pickl": [37, 62, 67, 73, 79], "mchirp_from_mass1_mass2": [37, 50, 53, 93, 94], "def": [37, 56, 67, 85, 86], "spin_ldc2pycbc": 37, "mag": [37, 82, 90], "rb": [37, 62], "params_true_al": 37, "p_index": 37, "params_tru": 37, "tc_lisa": 37, "coalescencetime_lisa": 37, "polarization_lisa": [37, 55], "polarangleofspin1": 37, "polarangleofspin2": 37, "phaseatcoalesc": 37, "eclipticlatitude_lisa": 37, "eclipticlongitude_lisa": 37, "plot_cod": 37, "lisa_smbhb_mass_tc_": 37, "popen": 37, "stdout": [37, 78, 79, 95], "pipe": 37, "handl": [38, 43, 44, 53, 57, 59, 61, 62, 64, 65, 69, 76, 77, 78, 79, 83, 88], "broad": 38, "overal": [38, 43, 64, 78, 95, 97], "reconstruct": [38, 41, 61, 64, 65], "marginalize_vector_param": [38, 41, 64], "marginalize_vector_sampl": [38, 41, 64], "shouldn": 38, "marginalize_phas": [38, 41, 61, 64], "marginalize_dist": [38, 41, 64], "marginalize_distance_param": [38, 41, 64], "marginalize_distance_interpol": [38, 41, 64], "marginalize_distance_snr_rang": [38, 41, 64], "marginalize_distance_dens": [38, 41, 64], "marginalize_distance_sampl": [38, 41, 64], "h1_gwosc_4khz_r1": 38, "l1_gwosc_4khz_r1": 38, "4khz_r1_strain": 38, "_gwosc_4khz_r1": 38, "pycbc_inference_model_stat": [38, 41], "margtim": 38, "marg_150914": 38, "demarg_150914": 38, "primary_mass": [38, 50, 53, 64, 67, 93, 94], "secondary_mass": [38, 50, 53, 67, 93, 94], "peak": [39, 41, 43, 59, 64, 77, 78], "neighborhood": 39, "greatli": [39, 41, 82], "03": [39, 75], "3757": [39, 41], "1187008882": [39, 41], "1187008482": [39, 41], "1187008892": [39, 41], "h1_losc_cln_4_v1": [39, 41], "1187007040": [39, 41], "l1_losc_cln_4_v1": [39, 41], "v1_losc_cln_4_v1": [39, 41], "min_iter": [39, 53, 61], "eta": [39, 53, 67, 68, 69, 75, 82, 90, 100], "could": [39, 41, 53, 64, 67, 74, 79, 82, 88, 90, 91, 92, 94, 95, 97, 98], "44615914": [39, 41], "40808407": [39, 41], "1876": 39, "2076": 39, "_losc_cln_4_v1": [39, 41], "dcc": [39, 41, 71, 74], "0146": [39, 41], "p1700349": [39, 41], "001": [39, 41, 53, 56, 72, 79, 95], "unimod": 40, "nee": 40, "adapt": [40, 61, 63, 65, 67], "lag": [40, 65, 71, 95], "bootstrap": [40, 65], "enlarg": [40, 65], "update_interv": [40, 65], "loglr": [40, 53, 61, 64], "useag": 40, "update_interval_iter_fract": 40, "update_interval_ncal": 40, "log_interv": 40, "show_statu": 40, "dkl": 40, "frac_remain": 40, "lepsilon": 40, "min_ess": 40, "max_it": 40, "max_ncal": 40, "max_num_improvement_loop": 40, "min_num_live_point": 40, "cluster_num_live_point": 40, "nchain": [40, 42, 61, 62, 65], "jump_propos": [40, 63, 65], "python3": [40, 46, 76, 78, 79], "maxmcmc": [40, 65], "nthread": [40, 58], "nlivepoint": [40, 61, 65], "evid": [40, 50, 53, 62, 64, 65], "toler": [40, 53, 56, 65, 76, 78], "nest": [40, 53, 56, 62, 65, 76, 79, 90, 94], "num_gauss_sampl": 40, "max_improvement_loop": 40, "intrins": [41, 43, 53, 59, 64, 76, 78, 94], "recalcul": [41, 74, 75], "extrins": [41, 64, 94], "sample_r": [41, 53, 54, 57, 64, 68, 70, 72, 74, 76, 78, 82, 85, 92, 100], "32768": [41, 64], "rwalk": [41, 65], "single_simpl": 41, "extend": [41, 43, 53, 57, 58, 67, 71, 73, 79, 92, 98], "previou": [41, 53, 57, 62, 65, 92], "peak_lock_snr": [41, 64], "peak_min_snr": 41, "42825": 41, "single_marg": 41, "vmin": [41, 73], "31": [41, 89, 95], "85": [41, 72], "single_demarg": 41, "demargin": 41, "minu": [41, 62, 72, 98], "rather": [41, 48, 56, 57, 58, 64, 65, 67, 76, 78, 79, 88, 93, 95, 97], "num_sampl": [41, 62, 64, 65], "single_inst": 41, "marginalized_vector_sampl": 41, "marginalized_vector_param": 41, "dh": 41, "dhl": 41, "subnam": [41, 61, 64], "myski": 41, "1e6": 41, "mysky_sampl": 41, "mysky_transform": 41, "det_tc": [41, 50, 53], "inferencetxtfil": [42, 61, 62], "mcmcio": [42, 62], "write_sampl": [42, 61, 62], "read_raw_sampl": [42, 61, 62], "duplic": [42, 44, 53, 76, 79, 82, 90, 92, 95, 97], "niteraiton": 42, "product": [42, 43, 53, 64, 67, 74, 75, 76, 77, 79, 81, 82, 84, 85, 86, 88, 92, 98, 100], "resum": [42, 62, 65, 93, 94], "organ": [42, 67, 71, 95, 97], "properti": [42, 44, 53, 56, 57, 62, 64, 65, 67, 71, 74, 75, 76, 78, 79, 95, 97], "write_posterior": 42, "write_resume_point": [42, 61, 62], "write_sampler_metadata": [42, 61, 62], "temper": [42, 44, 62, 65], "coldest": [42, 65], "hotter": 42, "pycbc_inference_extract_sampl": [42, 64, 94], "primari": [42, 53, 64, 67, 69], "univers": [42, 79, 86, 95], "collabor": [42, 46], "free": [42, 57], "think": [42, 44, 74, 79, 98], "unsur": [42, 44, 82], "arrang": 42, "thing": [42, 46, 56, 62, 64, 65, 76, 78, 79, 82, 88, 90, 91, 92, 95, 98, 99, 100], "review": [42, 44, 46, 90], "filetyp": [42, 62], "dictionari": [42, 44, 53, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 82, 88, 92, 98, 100], "__init__": [42, 44, 56, 75, 79, 82, 100], "awar": [42, 44, 82, 95], "commonli": [43, 67, 95], "interact": [43, 44, 65, 89, 95, 97], "kilonova": 43, "imagin": 43, "straightforward": [43, 46, 56], "extens": [43, 53, 57, 67, 73, 76, 78, 79, 87], "usual": [43, 48, 57, 59, 60, 77, 78, 79, 80, 85, 90, 91, 95, 97, 98], "nuissanc": 43, "22": [43, 53, 64, 73, 78, 85], "cross": [43, 53, 57, 64, 72, 73, 75, 78, 97], "inner": [43, 53, 64, 74, 76], "perfer": 43, "mont": [43, 53, 61, 64, 73, 82], "carlo": [43, 53, 61, 64, 73, 82], "densli": 43, "permit": [43, 89], "concert": 43, "basi": [43, 53, 55, 56, 78], "assembl": 43, "expand": [43, 53, 59, 74, 90, 95, 97], "cycl": [43, 61, 82], "ration": 43, "reference": 43, "wise": [43, 82], "linear": [43, 53, 60, 64, 71, 72, 75, 76, 78], "violat": [43, 56, 78], "slowli": [43, 64, 82], "hold": [43, 57, 58, 64, 66, 72, 75, 79, 95, 99, 100], "prefer": [43, 67, 76, 92, 95], "preclud": [43, 53], "abil": [43, 46, 53, 58, 64, 67, 78, 79, 90, 91, 95], "brute": [43, 64], "degeneraci": 43, "subset": [43, 53, 57, 58, 64, 67, 75, 90, 96], "hierach": 43, "indeped": 43, "henc": [43, 75, 80], "set_initial_condit": [44, 61, 65], "run_mcmc": [44, 61, 65], "checkpoint_interv": [44, 61, 65, 92], "set_target": [44, 61, 65], "compute_acf": [44, 61, 65], "compute_acl": [44, 61, 65], "mcmcautocorrsupport": 44, "multitemperedautocorrsupport": 44, "engin": [44, 57, 58, 74, 86, 97], "primer": 44, "parent": [44, 53, 57, 67, 79], "confus": [44, 72, 78, 79, 90, 98], "overridden": [44, 53, 62, 76, 79, 82, 86, 90, 91], "collect": [44, 56, 61, 62, 71, 79, 87, 95], "model_stat": [44, 61, 65], "examin": 44, "practic": [44, 72, 79, 95], "criteria": [44, 57, 65], "met": 44, "accommod": 44, "fulfil": 44, "underli": [44, 65, 67, 78], "introduc": [44, 64, 65, 75, 78, 82], "acf": [44, 59, 62, 65], "break": [44, 75, 76, 79, 97], "rearrang": 44, "repostiori": 44, "thank": 44, "shown": [45, 53, 73, 82, 90], "4999": 45, "input_fil": [45, 62, 73, 79, 91, 99], "output_fil": [45, 53, 62, 65, 79, 82, 87, 100], "logplr": [45, 61, 64], "alpha": [45, 53, 55, 57, 61, 64, 71], "deg": [45, 56], "psi": [45, 64, 78], "iota": [45, 53, 69], "phi_0": 45, "6000": [45, 61], "th": [45, 56, 62, 65, 73], "12000": 45, "thin_start": [45, 61, 62, 65], "5999": 45, "thin_interv": [45, 61, 62, 65], "thin_end": [45, 61, 62, 65], "11999": 45, "_plot_posterior": 45, "_plot_movi": 45, "start_sampl": 45, "end_sampl": 45, "frame_step": 45, "output_prefix": [45, 99], "movie_fil": 45, "dpi": 45, "individu": [45, 53, 56, 57, 64, 67, 71, 72, 76, 77, 78, 79, 85, 88, 90, 98], "pypi": [46, 49, 81, 90], "fork": [46, 48], "maintain": [46, 81, 82], "bug": [46, 76, 95], "merg": [46, 53, 67, 79, 88, 91, 95], "offici": [46, 65], "upgrad": [46, 49, 75], "setuptool": 46, "fresh": 46, "develeop": 46, "companion": 46, "cit": [46, 79, 88], "suffici": [46, 66, 78, 82, 89, 94], "recent": [46, 53, 57, 60, 71, 82, 84], "workaround": 46, "info": [46, 53, 57, 60, 61, 62, 71, 82, 92, 95, 99, 100], "yield": [46, 53, 56, 64, 71, 79, 90], "py37": 46, "sphinx": 46, "helper": [46, 57, 64, 67, 71, 73, 76, 78, 79, 90], "rtd": 46, "theme": 46, "sphinxcontrib": 46, "programoutput": 46, "build_doc": 46, "_build": 46, "appear": [46, 53, 56, 57, 79, 81, 82, 88, 90, 95, 98], "compilervar": 46, "intel64": 46, "advantag": [46, 67, 82], "nvidia": 47, "driver": [47, 67], "pycuda": [47, 76], "scikit": 47, "041": 47, "mako": 47, "dev": [47, 81, 95], "cuda_root": 47, "ld_library_path": [47, 53], "usr": [47, 95], "lib64": 47, "gsl": 48, "framel": 48, "metaio": 48, "administr": [48, 49, 95], "enter": [48, 59, 64, 81], "virtual_env": 48, "lscsoft": [48, 53], "credenti": [48, 95], "lsc": [48, 82, 90, 95], "intens": 48, "nsf": 48, "non": [48, 53, 56, 60, 64, 69, 72, 76, 78, 79, 92, 95, 100], "nf": 48, "unstabl": 48, "v6": 48, "lalsuite_o1_branch": 48, "chose": [48, 53, 95], "00boot": 48, "swig": 48, "lalstochast": 48, "lalxml": 48, "lalinfer": 48, "laldetchar": 48, "lalapp": [48, 82, 91, 92, 100], "lalapps_coh_ptf_inspir": [48, 97], "multicor": 48, "j": [48, 53, 59, 61, 64, 69, 74, 75, 82], "processor": 48, "head": [48, 60, 73, 90, 95], "virtualenv": 48, "reenter": 48, "manag": [48, 49, 54, 58, 59, 66, 67, 71, 73, 74, 77, 79, 95, 100], "lal_prefix": 48, "seobnrv4": [48, 53, 85], "cern": 48, "lal_data_path": [48, 95], "scientic": 49, "old": [49, 55, 57, 66, 67, 79, 81, 88, 95, 97], "sy": 49, "version_info": 49, "site": [49, 53, 60, 79, 82, 87, 88, 92, 95, 100], "pythonpath": 49, "exclud": [49, 56, 62, 65, 73, 78, 79], "easy_instal": 49, "md5": 49, "d935ee9146074b1d3f26c5f0acfd120": 49, "report": [49, 53, 59, 62, 67, 79, 81, 93, 95, 97], "inst": [49, 95], "bash_profil": 49, "submodul": [50, 82, 87], "coinc": [50, 53, 67, 71, 79, 89, 95], "coinc_rat": [50, 53], "cut": [50, 53, 73, 78, 82, 92, 95, 97, 98, 100], "eventmgr": [50, 53], "eventmgr_cython": [50, 53], "rank": [50, 53, 67, 71, 79, 95], "simd_threshold_cython": [50, 53], "stat": [50, 53, 56, 59, 61, 62, 64, 65, 67, 73, 92], "threshold_cpu": [50, 53], "trigger_fit": [50, 53], "backend_cpu": [50, 53], "backend_mkl": [50, 53], "class_api": [50, 53], "fft_callback": [50, 53], "fftw_prune": [50, 53], "fftw_pruned_cython": [50, 53], "func_api": [50, 53], "npfft": [50, 53], "parser_support": [50, 53], "matchedfilt": [50, 53, 64, 95, 96], "matchedfilter_cpu": [50, 53], "matchedfilter_numpi": [50, 53], "simd_correl": [50, 53], "simd_correlate_cython": [50, 53], "entropi": [50, 53, 65], "gelman_rubin": [50, 53], "gewek": [50, 53], "option_util": [50, 53, 62, 82], "injfilterrejector": [50, 53, 74], "snr_optim": [50, 53], "neutron_star": [50, 53], "eos_util": [50, 53], "pg_isso_solv": [50, 53], "reproduc": [50, 53, 62, 71, 79, 82, 88], "fgmc_function": [50, 53], "fgmc_laguerr": [50, 53], "fgmc_plot": [50, 53], "live_pastro": [50, 53], "live_pastro_util": [50, 53], "population_model": [50, 53], "rates_funct": [50, 53], "scale_inject": [50, 53], "variat": [50, 53, 57, 64, 71, 74, 75, 82, 92, 100], "followup": [50, 53, 59, 79], "layout": [50, 53, 75, 79, 90], "mpld3_util": [50, 53], "pygrb_plotting_util": [50, 53], "pygrb_postprocessing_util": [50, 53], "render": [50, 53], "scatter_histogram": [50, 53], "str_util": [50, 53], "table_util": [50, 53], "calibr": [50, 53, 64, 71, 73, 92, 97, 100], "recalibr": [50, 53, 64], "bank_convers": [50, 53, 82], "bank_output_util": [50, 53, 82], "brute_force_method": [50, 53, 82], "calc_moment": [50, 53, 82], "coord_util": [50, 53, 82], "lambda_map": [50, 53, 82], "lattice_util": [50, 53, 82], "partitioned_bank": [50, 53, 82], "array_cpu": [50, 53], "optpars": [50, 53, 57, 72, 74], "chisq_cpu": [50, 53], "sgchisq": [50, 53, 57, 67, 92], "decompress_cpu": [50, 53], "decompress_cpu_cython": [50, 53], "multiband": [50, 53, 64, 85], "nltide": [50, 53], "premerg": [50, 53], "pycbc_phenomc_tmplt": [50, 53], "sinegauss": [50, 53], "spa_tmplt": [50, 53], "spa_tmplt_cpu": [50, 53], "supernova": [50, 53], "utils_cpu": [50, 53], "waveform_mod": [50, 53, 64], "coincid": [50, 53, 57, 59, 68, 73, 75, 82, 90, 91, 92, 95, 96, 100], "configparser_test": [50, 53, 76, 87], "grb_util": [50, 53, 87], "inference_followup": [50, 53, 87], "jobsetup": [50, 53, 87], "minifollowup": [50, 53, 87], "pegasus_sit": [50, 53, 87], "pegasus_workflow": [50, 53, 87], "psdfile": [50, 53, 87], "splittabl": [50, 53, 87, 95], "bin_util": 50, "binnedarrai": [50, 53], "argmin": [50, 53], "centr": [50, 53, 78], "logregular": [50, 53], "binnedratio": [50, 53], "incdenomin": [50, 53], "incnumer": [50, 53], "upper": [50, 53, 54, 56, 57, 59, 64, 68, 72, 73, 75, 77, 78, 82, 85, 90, 100], "irregularbin": [50, 53], "linearbin": [50, 53], "linearplusoverflowbin": [50, 53], "logarithmicbin": [50, 53], "logarithmicplusoverflowbin": [50, 53], "ndbin": [50, 53], "apply_condit": [50, 53, 56], "contains_condit": [50, 53], "cyclic": [50, 53, 56, 63, 76, 78], "closedbound": [50, 53], "openbound": [50, 53], "reflectedbound": [50, 53], "reflect": [50, 53, 56, 79, 88, 92, 100], "reflect_left": [50, 53], "reflect_right": [50, 53], "apply_cycl": [50, 53], "reflect_wel": [50, 53], "chi_a": [50, 53, 56], "chi_eff_from_spher": [50, 53, 93, 94], "chi_p": [50, 53, 56, 93, 94], "chi_p_from_spher": [50, 53, 93, 94], "chi_p_from_xi1_xi2": [50, 53], "chi_perp_from_mass1_mass2_xi2": [50, 53], "chi_perp_from_spinx_spini": [50, 53], "eta_from_mass1_mass2": [50, 53], "eta_from_q": [50, 53], "eta_from_tau0_tau3": [50, 53], "final_mass_from_f0_tau": [50, 53, 56], "final_mass_from_initi": [50, 53], "final_spin_from_f0_tau": [50, 53, 56], "final_spin_from_initi": [50, 53], "freq_from_final_mass_spin": [50, 53], "freqlmn_from_other_lmn": [50, 53], "invq_from_mass1_mass2": [50, 53], "lambda_from_mass_tov_fil": [50, 53], "lambda_tild": [50, 53], "mass1_from_mass2_eta": [50, 53], "mass1_from_mchirp_eta": [50, 53], "mass1_from_mtotal_eta": [50, 53], "mass1_from_mtotal_q": [50, 53], "mass1_from_tau0_tau3": [50, 53], "mass2_from_mass1_eta": [50, 53], "mass2_from_mchirp_eta": [50, 53], "mass2_from_mtotal_eta": [50, 53], "mass2_from_mtotal_q": [50, 53], "mass2_from_tau0_tau3": [50, 53], "mchirp_from_tau0": [50, 53], "mtotal_from_mass1_mass2": [50, 53], "mtotal_from_mchirp_eta": [50, 53], "mtotal_from_tau0_tau3": [50, 53], "nltides_gw_phase_diff_isco": [50, 53], "optimal_dec_from_detector": [50, 53], "optimal_ra_from_detector": [50, 53], "phi1_from_phi_a_phi_": [50, 53], "phi2_from_phi_a_phi_": [50, 53], "phi_a": [50, 53], "phi_from_spinx_spini": [50, 53], "phi_": [50, 53, 78], "primary_spin": [50, 53, 93, 94], "primary_xi": [50, 53], "remnant_mass_from_mass1_mass2_cartesian_spin_eo": [50, 53], "remnant_mass_from_mass1_mass2_spherical_spin_eo": [50, 53], "secondary_spin": [50, 53, 93, 94], "secondary_xi": [50, 53], "snr_from_loglr": [50, 53, 64, 94], "spin1x_from_xi1_phi_a_phi_": [50, 53], "spin1y_from_xi1_phi_a_phi_": [50, 53], "spin1z_from_mass1_mass2_chi_eff_chi_a": [50, 53], "spin2x_from_mass1_mass2_xi2_phi_a_phi_": [50, 53], "spin2y_from_mass1_mass2_xi2_phi_a_phi_": [50, 53], "spin2z_from_mass1_mass2_chi_eff_chi_a": [50, 53], "spin_from_pulsar_freq": [50, 53], "tau0_from_mass1_mass2": [50, 53], "tau0_from_mchirp": [50, 53], "tau0_from_mtotal_eta": [50, 53], "tau3_from_mass1_mass2": [50, 53], "tau3_from_mtotal_eta": [50, 53], "tau_from_final_mass_spin": [50, 53], "taulmn_from_other_lmn": [50, 53], "xi1_from_spin1x_spin1i": [50, 53], "xi2_from_mass1_mass2_spin2x_spin2i": [50, 53], "cosmological_quantity_from_redshift": [50, 53], "distance_from_comoving_volum": [50, 53, 93, 94], "redshift_from_comoving_volum": [50, 53, 93, 94], "effective_dist": [50, 53], "get_icrs_po": [50, 53], "gmst_estim": [50, 53], "optimal_orient": [50, 53], "set_gmst_refer": [50, 53], "time_delay_from_loc": [50, 53], "get_gcrs_po": [50, 53], "get_po": [50, 53], "get_available_lal_detector": [50, 53], "gmst_accur": [50, 53], "load_detector_config": [50, 53], "overhead_antenna_pattern": [50, 53], "ppdet": [50, 53], "single_arm_frequency_respons": [50, 53], "parse_flag_str": [50, 53], "parse_veto_defin": [50, 53], "query_cumulative_flag": [50, 53], "query_dqsegdb2": [50, 53], "query_str": [50, 53], "libutil": 50, "get_ctypes_librari": [50, 53], "get_libpath_from_dirlist": [50, 53], "import_opt": [50, 53], "pkg_config": [50, 53], "pkg_config_check_exist": [50, 53], "pkg_config_header_str": [50, 53], "pkg_config_libdir": [50, 53], "mchirp_area": 50, "calc_area": [50, 53], "calc_prob": [50, 53], "from_cli": [50, 53, 57, 58, 66, 72, 74, 76, 77, 82], "get_area": [50, 53], "insert_arg": [50, 53, 57], "intmc": [50, 53], "redshift_estim": [50, 53], "src_mass_from_z_det_mass": [50, 53], "limitedsizedict": [50, 53], "getconf": [50, 53], "insert_optimization_option_group": [50, 53], "verify_optimization_opt": [50, 53], "pnutil": 50, "a0": [50, 53, 64, 74], "a3": [50, 53, 71], "energi": [50, 53, 59], "energy_coeffici": [50, 53], "eta_mass1_to_mass2": [50, 53], "f_bklisco": [50, 53], "f_erd": [50, 53], "f_frd": [50, 53], "f_lrd": [50, 53], "f_lightr": [50, 53], "f_schwarzisco": [50, 53], "frequency_cutoff_from_nam": [50, 53], "frequency_to_veloc": [50, 53], "get_beta_sigma_from_aligned_spin": [50, 53], "get_final_freq": [50, 53], "get_freq": [50, 53], "get_inspiral_tf": [50, 53], "hybridenergi": [50, 53], "hybrid_meco_frequ": [50, 53], "hybrid_meco_veloc": [50, 53], "jframe_to_l0fram": [50, 53], "kerr_lightr": [50, 53], "kerr_lightring_veloc": [50, 53], "l0frame_to_jfram": [50, 53], "mass1_mass2_spin1z_spin2z_to_beta_sigma_gamma": [50, 53], "mass1_mass2_to_mtotal_eta": [50, 53], "mass1_mass2_to_tau0_tau3": [50, 53], "mchirp_mass1_to_mass2": [50, 53], "meco2": [50, 53], "meco_veloc": [50, 53], "megaparsecs_to_met": [50, 53], "mtotal_eta_to_mass1_mass2": [50, 53], "nearest_larger_binary_numb": [50, 53], "parsecs_to_met": [50, 53], "solar_mass_to_kg": [50, 53], "t2_cutoff_frequ": [50, 53], "t2_cutoff_veloc": [50, 53], "t4_cutoff_veloc": [50, 53], "tau0_tau3_to_mass1_mass2": [50, 53], "tau0_tau3_to_mtotal_eta": [50, 53], "velocity_to_frequ": [50, 53], "pool": [50, 64, 65, 82, 95, 97], "broadcastpool": [50, 53], "allmap": [50, 53], "broadcast": [50, 53], "singlepool": [50, 53], "imap": [50, 53], "choose_pool": [50, 53], "is_main_process": [50, 53], "use_mpi": [50, 53, 65], "compute_effici": [50, 53], "compute_lower_limit": [50, 53], "compute_upper_limit": [50, 53], "compute_volume_vs_mass": [50, 53], "confidence_interval_min_width": [50, 53], "filter_injections_by_mass": [50, 53], "hpd_coverag": [50, 53], "hpd_credible_interv": [50, 53], "hpd_threshold": [50, 53], "integral_el": [50, 53], "integrate_effici": [50, 53], "mean_efficiency_volum": [50, 53], "normalize_pdf": [50, 53], "cpuschem": [50, 53], "cudaschem": [50, 53], "choosebyschemedict": [50, 53], "defaultschem": [50, 53, 78], "mklscheme": [50, 53], "numpyschem": [50, 53], "clean_cuda": [50, 53], "cpuonli": [50, 53], "current_prefix": [50, 53], "insert_processing_option_group": [50, 53], "register_clean_cuda": [50, 53], "verify_processing_opt": [50, 53], "chirp_volume_montecarlo": [50, 53], "compute_search_efficiency_in_bin": [50, 53], "compute_search_volume_in_bin": [50, 53], "volume_binned_pyl": [50, 53], "volume_montecarlo": [50, 53], "volume_shel": [50, 53], "volume_to_distance_with_error": [50, 53], "inverse_transform": [50, 53], "basetransform": [50, 53], "format_output": [50, 53], "chiptocartesianspin": [50, 53], "default_params_nam": [50, 53], "get_eo": [50, 53], "lambda_param": [50, 53], "map_fil": [50, 53], "mass_param": [50, 53], "lambda_data": [50, 53], "lambda_from_tov_data": [50, 53], "mass_data": [50, 53], "inputvar": [50, 53, 94], "outputvar": [50, 53, 94], "apply_transform": [50, 53], "compute_jacobian": [50, 53], "get_common_cbc_transform": [50, 53], "order_transform": [50, 53], "read_transforms_from_config": [50, 53, 64], "logformatt": [50, 53], "formattim": [50, 53], "add_common_pycbc_opt": [50, 53], "gps_now": [50, 53], "init_log": [50, 53], "makedir": [50, 53], "random_str": [50, 53], "example_psd": 52, "from_txt": [52, 53, 72, 82], "is_asd_fil": [52, 72], "loglog": [52, 71, 75], "sample_frequ": [52, 53, 76, 78, 85, 86], "modif": 52, "load_frequencyseri": [52, 53, 76], "xmin": [52, 73], "xmax": [52, 73], "npy": [52, 76], "tmp_psd": 52, "get_lalsim_psd_list": [52, 53, 72, 82], "p1": [52, 76], "p2": 52, "from_str": [52, 53, 72, 82], "highpow": 52, "lowpow": 52, "fall": [52, 53, 57, 78, 95], "warn": [52, 53, 57, 59, 64, 74, 78, 79, 82, 84, 88, 96, 100], "rais": [52, 53, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 72, 73, 76, 78, 79, 80, 82, 86, 88, 92, 94, 95, 100], "meaningless": 52, "extrapol": [52, 53, 57, 69, 72, 76], "lest": 52, "incorrect": 52, "128": [52, 70, 82, 97, 100], "seg_len": [52, 72], "seg_strid": [52, 61, 72], "estimated_psd": 52, "linewidth": 52, "48": [52, 90, 95], "get_sourc": [53, 54], "list_catalog": [53, 54], "lvk_catalog": [53, 54], "populate_catalog": [53, 54], "find_event_in_catalog": [53, 54], "cartesian_to_spherical_azimuth": [53, 55], "cartesian_to_spherical_polar": [53, 55], "cartesian_to_spherical_rho": [53, 55], "earth_position_ssb": [53, 55], "lisa_position_ssb": [53, 55], "localization_to_propagation_vector": [53, 55], "polarization_newfram": [53, 55], "propagation_vector_to_loc": [53, 55], "rotation_matrix_ssb_to_geo": [53, 55], "rotation_matrix_ssb_to_lisa": [53, 55], "t_geo_from_ssb": [53, 55], "t_lisa_from_ssb": [53, 55], "t_ssb_from_t_geo": [53, 55], "t_ssb_from_t_lisa": [53, 55], "apply_boundary_condit": [53, 56], "azimuthal_angl": [53, 56], "polar_angl": [53, 56], "get_kde_from_arrai": [53, 56], "kde": [53, 56, 57, 61, 64, 65, 73], "set_bandwidth": [53, 56], "lognorm": [53, 56, 61, 64, 71], "get_arrays_from_fil": [53, 56], "boundeddist": [53, 56], "cdfinv": [53, 56], "logpdf": [53, 56], "bounded_from_config": [53, 56], "get_param_bounds_from_config": [53, 56], "supernovaeconvexhul": [53, 56], "required_paramet": [53, 56], "cdf": [53, 56, 57], "var": [53, 56, 57, 63, 73, 97], "jointdistribut": [53, 56, 64, 65], "variable_arg": [53, 56, 64, 78], "well_reflect": [53, 56], "within_constraint": [53, 56], "dim": [53, 56, 61, 82, 100], "prior_from_config": [53, 56, 61, 64], "read_constraints_from_config": [53, 56], "read_distributions_from_config": [53, 56], "read_params_from_config": [53, 56], "coherent_snr": [53, 57], "coincident_snr": [53, 57], "get_coinc_index": [53, 57], "get_coinc_trigg": [53, 57], "get_projection_matrix": [53, 57], "network_chisq": [53, 57], "null_snr": [53, 57], "reweight_snr_by_nul": [53, 57], "reweightedsnr_cut": [53, 57], "coincexpirebuff": [53, 57], "increment": [53, 57, 60, 62, 72, 78, 81, 93, 94, 95], "nbyte": [53, 57, 76], "num_great": [53, 57], "livecoinctimeslidebackgroundestim": [53, 57], "add_singl": [53, 57], "background_tim": [53, 57], "backout_last": [53, 57], "ifar": [53, 57, 71, 79, 89, 95], "pick_best_coinc": [53, 57], "restore_st": [53, 57], "save_st": [53, 57], "set_singles_buff": [53, 57], "verify_arg": [53, 57], "multiringbuff": [53, 57], "advance_tim": [53, 57], "check_expired_trigg": [53, 57], "discard_last": [53, 57], "expire_vector": [53, 57], "filled_tim": [53, 57], "num_el": [53, 57], "update_valid_start": [53, 57], "valid_slic": [53, 57], "background_bin_from_str": [53, 57], "cluster_coinc": [53, 57], "cluster_coincs_multiifo": [53, 57], "cluster_over_tim": [53, 57], "mean_if_greater_than_zero": [53, 57], "time_coincid": [53, 57], "time_multi_coincid": [53, 57], "timeslide_dur": [53, 57], "combination_noise_logr": [53, 57], "combination_noise_r": [53, 57], "multiifo_noise_coincident_area": [53, 57], "multiifo_noise_logr": [53, 57], "multiifo_signal_coincident_area": [53, 57], "apply_template_cut": [53, 57], "apply_template_fit_cut": [53, 57], "apply_trigger_cut": [53, 57], "check_update_cut": [53, 57], "convert_inputstr": [53, 57], "ingest_cuts_option_group": [53, 57], "insert_cuts_option_group": [53, 57], "sigma_multiple_cut_thresh": [53, 57], "eventmanag": [53, 57], "add_template_ev": [53, 57], "add_template_param": [53, 57], "chisq_threshold": [53, 57, 92], "cluster_template_ev": [53, 57], "consolidate_ev": [53, 57], "finalize_ev": [53, 57], "finalize_template_ev": [53, 57], "from_multi_ifo_interfac": [53, 57], "keep_loudest_in_interv": [53, 57], "keep_near_inject": [53, 57], "make_output_dir": [53, 57], "new_templ": [53, 57], "newsnr_threshold": [53, 57, 59], "save_perform": [53, 57], "write_ev": [53, 57], "write_to_hdf": [53, 57, 78], "eventmanagercoher": [53, 57], "add_template_events_to_network": [53, 57], "add_template_network_ev": [53, 57], "cluster_template_network_ev": [53, 57], "eventmanagermultidet": [53, 57], "cluster_template_events_single_ifo": [53, 57], "thresholdclust": [53, 57], "cluster_reduc": [53, 57], "findchirp_cluster_over_window": [53, 57], "threshold_and_clust": [53, 57], "threshold_onli": [53, 57], "threshold_real_numpi": [53, 57], "coincbuffer_expireel": [53, 57], "coincbuffer_numgreat": [53, 57], "findchirp_cluster_over_window_cython": [53, 57], "logsignalrateinternals_compute2detr": [53, 57], "logsignalrateinternals_computepsignalbin": [53, 57], "timecluster_cython": [53, 57], "timecoincidence_constructfold": [53, 57], "timecoincidence_constructidx": [53, 57], "timecoincidence_findidxlen": [53, 57], "timecoincidence_getslideint": [53, 57], "effsnr": [53, 57], "get_newsnr": [53, 57], "get_newsnr_sgveto": [53, 57], "get_newsnr_sgveto_psdvar": [53, 57], "get_newsnr_sgveto_psdvar_sc": [53, 57], "get_newsnr_sgveto_psdvar_scaled_threshold": [53, 57], "get_newsnr_sgveto_psdvar_threshold": [53, 57], "get_sngls_ranking_from_trig": [53, 57], "get_snr": [53, 57, 61, 64], "newsnr": [53, 57, 67, 92, 95], "newsnr_sgveto": [53, 57, 67, 92], "newsnr_sgveto_psdvar": [53, 57, 67, 92], "newsnr_sgveto_psdvar_sc": [53, 57, 92], "newsnr_sgveto_psdvar_scaled_threshold": [53, 57, 92], "newsnr_sgveto_psdvar_threshold": [53, 57, 67, 92], "apply_far_limit": [53, 57], "check_significance_opt": [53, 57], "count_n_loud": [53, 57], "digest_significance_opt": [53, 57], "get_far": [53, 57], "get_n_loud": [53, 57], "ifar_opt_to_far_limit": [53, 57], "insert_significance_option_group": [53, 57], "n_louder_from_fit": [53, 57], "positive_float": [53, 57, 76], "parallel_thresh_clust": [53, 57], "parallel_threshold": [53, 57], "livesingl": [53, 57], "calculate_ifar": [53, 57], "dqexpfitfgbgkdestatist": [53, 57], "coinc_lim_for_thresh": [53, 57], "kde_ratio": [53, 57], "logsignalr": [53, 57], "rank_stat_singl": [53, 57], "dqexpfitfgbgnormstatist": [53, 57], "assign_dq_r": [53, 57], "assign_template_bin": [53, 57], "find_dq_noise_r": [53, 57], "find_dq_state_by_tim": [53, 57], "lognoiser": [53, 57], "setup_seg": [53, 57], "expfitbgratestatist": [53, 57], "rank_stat_coinc": [53, 57], "reassign_r": [53, 57], "expfitcombinedsnr": [53, 57], "use_alphamax": [53, 57], "expfitfgbgkdestatist": [53, 57], "assign_kd": [53, 57], "find_kd": [53, 57], "expfitfgbgnormbbhstatist": [53, 57], "expfitfgbgnormstatist": [53, 57], "assign_median_sigma": [53, 57], "expfitstatist": [53, 57], "assign_fit": [53, 57], "coinc_old": [53, 57], "coinc_lim_for_thresh_old": [53, 57], "find_fit": [53, 57], "get_ref_v": [53, 57], "phasetdexpfitstatist": [53, 57], "phasetdstatist": [53, 57], "get_hist": [53, 57], "quadraturesumstatist": [53, 57], "get_sngl_rank": [53, 57], "get_statist": [53, 57], "get_statistic_from_opt": [53, 57], "insert_statistic_option_group": [53, 57], "parse_statistic_keywords_opt": [53, 57], "cputhresholdclust": [53, 57], "threshold_inlin": [53, 57], "threshold_numpi": [53, 57], "ks_test": [53, 57, 61], "cum_fit": [53, 57], "exponential_fitalpha": [53, 57], "fit_above_thresh": [53, 57], "fit_fn": [53, 57], "power_fitalpha": [53, 57], "rayleigh_fitalpha": [53, 57], "tail_threshold": [53, 57], "which_bin": [53, 57], "bank_bins_from_cli": [53, 57], "get_found_param": [53, 57], "get_inj_param": [53, 57], "get_mass_spin": [53, 57], "get_param": [53, 57], "insert_bank_bins_option_group": [53, 57], "get_segment_definer_com": [53, 57], "indices_outside_seg": [53, 57], "indices_outside_tim": [53, 57], "indices_within_seg": [53, 57], "indices_within_tim": [53, 57], "segments_to_start_end": [53, 57], "select_segments_by_defin": [53, 57], "start_end_from_seg": [53, 57], "start_end_to_seg": [53, 57], "get_backend_modul": [53, 58], "c2c_correlate_ifft": [53, 58], "c2c_half_correlate_ifft": [53, 58], "get_fn_plan": [53, 58], "htild": [53, 58, 59, 74, 77, 78], "param2": [53, 56, 58, 73, 79], "in_kmax": [53, 58], "out_kmax": [53, 58], "out_kmin": [53, 58], "export_double_wisdom_to_filenam": [53, 58], "export_single_wisdom_to_filenam": [53, 58], "get_flag": [53, 58], "get_measure_level": [53, 58], "import_double_wisdom_from_filenam": [53, 58], "import_single_wisdom_from_filenam": [53, 58], "import_sys_wisdom": [53, 58], "insert_fft_opt": [53, 58], "plan": [53, 58, 79, 82, 85, 92, 100], "set_measure_level": [53, 58], "set_planning_limit": [53, 58], "set_threads_backend": [53, 58], "verify_fft_opt": [53, 58], "wisdom_io": [53, 58], "fft_transpos": [53, 58], "fft_transpose_fftw": [53, 58], "first_phas": [53, 58], "plan_first_phas": [53, 58], "plan_transpos": [53, 58], "pruned_c2cifft": [53, 58], "second_phas": [53, 58], "splai": [53, 58], "second_phase_cython": [53, 58], "check_statu": [53, 58], "create_descriptor": [53, 58], "insert_fft_option_group": [53, 58], "calculate_acf": [53, 59], "calculate_acl": [53, 59], "livebatchmatchedfilt": [53, 57, 59], "combine_result": [53, 59], "process_al": [53, 59], "process_data": [53, 59], "set_data": [53, 59], "matchedfiltercontrol": [53, 59], "full_matched_filter_and_cluster_fc": [53, 59], "full_matched_filter_and_cluster_symm": [53, 59], "full_matched_filter_thresh_onli": [53, 59], "hierarchical_matched_filter_and_clust": [53, 59], "matchedfilterskymaxcontrol": [53, 59], "full_matched_filter_and_clust": [53, 59], "matchedfilterskymaxcontrolnophas": [53, 59], "compute_followup_snr_seri": [53, 59], "compute_max_snr_over_sky_loc_stat": [53, 59], "compute_max_snr_over_sky_loc_stat_no_phas": [53, 59], "compute_u_val_for_sky_loc_stat": [53, 59], "compute_u_val_for_sky_loc_stat_no_phas": [53, 59], "correl": [53, 58, 59, 77, 82], "followup_event_signific": [53, 59], "get_cutoff_indic": [53, 59, 64], "make_frequency_seri": [53, 59], "matched_filter_cor": [53, 59], "optimized_match": [53, 59], "overlap_cplx": [53, 59], "sigmasq_seri": [53, 59, 77], "cpucorrel": [53, 59], "batch_correlate_execut": [53, 59], "correlate_numpi": [53, 59], "deltam_f": [53, 59], "qplane": [53, 59, 76], "qseri": [53, 59], "qtile": [53, 59], "interpolate_complex_frequ": [53, 59], "lowpass": [53, 59, 76, 83], "notch_fir": [53, 59, 76], "resample_to_delta_t": [53, 59], "correlate_parallel": [53, 59], "correlate_simd": [53, 59], "ccorrf_parallel": [53, 59], "ccorrf_simd": [53, 59], "filter_zpk": [53, 59], "databuff": [53, 60, 74], "attempt_adv": [53, 60], "null_adv": [53, 60], "update_cach": [53, 60], "update_cache_by_incr": [53, 60], "statusbuff": [53, 60], "check_valid": [53, 60], "indices_of_flag": [53, 60], "is_extent_valid": [53, 60], "idqbuff": [53, 60], "locations_to_cach": [53, 60], "get_run": [53, 60], "gwosc_frame_json": [53, 60], "gwosc_frame_url": [53, 60], "read_frame_gwosc": [53, 60], "read_strain_gwosc": [53, 60], "read_stor": [53, 60], "jump": [53, 61, 65, 75], "bounded_norm": [53, 61], "discret": [53, 57, 59, 61, 64, 78, 82, 100], "base_data": [53, 61], "data_util": [53, 61], "relbin_cpu": [53, 61], "base_cub": [53, 61], "baseburnintest": [53, 61], "available_test": [53, 61], "burn_in_index": [53, 61, 62], "halfchain": [53, 61], "posterior_step": [53, 61], "ensemblemcmcburnintest": [53, 61, 65], "ensemblemultitemperedmcmcburnintest": [53, 61, 65], "mcmcburnintest": [53, 61], "multitemperedmcmcburnintest": [53, 61, 65], "evaluate_test": [53, 61], "check_hist_param": [53, 61], "compute_pdf": [53, 61], "kl": [53, 61], "arithmetic_mean_estim": [53, 61], "harmonic_mean_estim": [53, 61], "stepping_stone_algorithm": [53, 61], "thermodynamic_integr": [53, 61], "walk": [53, 61, 65], "parselabelarg": [53, 61], "parseparametersarg": [53, 61], "add_density_option_group": [53, 61], "add_injsamples_map_opt": [53, 61, 62], "add_plot_posterior_option_group": [53, 61], "add_scatter_option_group": [53, 61], "expected_parameters_from_cli": [53, 61], "plot_ranges_from_cli": [53, 61], "cbchdfinjectionset": [53, 66], "injtyp": [53, 66], "make_strain_from_inj_object": [53, 66], "required_param": [53, 66], "supported_approxim": [53, 66], "incoherentfromfilehdfinjectionset": [53, 66], "loadt": [53, 66], "set_ref_tim": [53, 66], "slice_and_tap": [53, 66], "injectionset": [53, 66], "ringdownhdfinjectionset": [53, 66], "sgburstinjectionset": [53, 66], "indoc": [53, 66, 78], "get_hdf_injtyp": [53, 66], "hdf_injtype_from_approxim": [53, 66], "legacy_approximant_nam": [53, 66], "projector": [53, 66], "set_sim_data": [53, 66], "from_cli_multi_ifo": [53, 64, 66, 72, 74, 82], "from_cli_single_ifo": [53, 66, 72, 74, 82], "generate_short_inj_from_inj": [53, 66], "template_segment_check": [53, 66], "insert_injfilterrejector_option_group": [53, 66], "insert_injfilterrejector_option_group_multi_ifo": [53, 66], "datafromfil": [53, 67], "get_column": [53, 67], "dictarrai": [53, 67], "filedata": [53, 67], "foregroundtrigg": [53, 67], "get_active_seg": [53, 67], "get_bankfile_arrai": [53, 67], "get_coincfile_arrai": [53, 67], "get_end_tim": [53, 67, 76], "get_ifo": [53, 67], "get_snglfile_array_dict": [53, 67], "sort_arr": [53, 67], "to_coinc_hdf_object": [53, 67], "to_coinc_xml_object": [53, 67], "trig_id": [53, 67, 79], "hfile": [53, 67], "multiifostatmapdata": [53, 67], "readbytempl": [53, 57, 67], "get_data": [53, 61, 64, 67], "set_templ": [53, 67], "and_mask": [53, 67], "apply_mask": [53, 67], "checkbank": [53, 67], "effective_spin": [53, 67], "f_seobnrv2_peak": [53, 67], "f_seobnrv4_peak": [53, 67], "get_param_nam": [53, 67], "get_rank": [53, 67], "mask_siz": [53, 67], "mask_to_n_loudest_clustered_ev": [53, 67], "psd_var_val": [53, 57, 67, 72], "rchisq": [53, 67], "trig_dict": [53, 67], "u_val": [53, 67, 77, 79], "statmapdata": [53, 67], "combine_and_copi": [53, 67], "dump_pickle_to_hdf": [53, 67], "dump_stat": [53, 67], "get_all_subkei": [53, 67], "get_chisq_from_file_choic": [53, 67], "load_hdf5_to_dict": [53, 67], "load_stat": [53, 67], "name_all_dataset": [53, 67], "recursively_save_dict_contents_to_group": [53, 67], "save_dict_to_hdf5": [53, 67], "ligolwcontenthandl": [53, 67], "endelementn": [53, 67], "startcolumn": [53, 67], "startstream": [53, 67], "starttabl": [53, 67], "create_process_t": [53, 67], "default_null_valu": [53, 67], "get_table_column": [53, 67], "legacy_row_id_convert": [53, 67], "return_empty_sngl": [53, 67], "return_search_summari": [53, 67], "candidateforgracedb": [53, 67], "gracedb_tag_with_vers": [53, 67], "add_field": [53, 67], "add_funct": [53, 67], "add_method": [53, 67], "add_properti": [53, 67], "add_virtualfield": [53, 67], "addattr": [53, 67], "alias": [53, 67], "append": [53, 62, 64, 65, 67, 76, 79, 82, 95, 97, 98], "del_funct": [53, 67], "from_arrai": [53, 67], "from_kwarg": [53, 62, 67], "from_ligolw_t": [53, 67], "from_record": [53, 67], "functionlib": [53, 67], "parse_boolarg": [53, 67, 78], "parse_paramet": [53, 61, 62, 67], "sort": [53, 57, 62, 64, 67, 73, 75, 79, 95, 99], "to_arrai": [53, 67], "virtualfield": [53, 67], "waveformarrai": [53, 66, 67, 78, 92], "remnant_mass": [53, 67], "spin_px": [53, 67], "spin_pi": [53, 67], "spin_pz": [53, 67], "spin_sx": [53, 67], "spin_si": [53, 67], "spin_sz": [53, 67], "get_fil": [53, 67], "callback_func": [53, 68], "check_snr_optimizer_opt": [53, 68], "compute_minus_network_snr": [53, 68], "compute_minus_network_snr_pso": [53, 68], "compute_network_snr_cor": [53, 68], "insert_snr_optimizer_opt": [53, 68], "optimize_di": [53, 68], "optimize_pso": [53, 68], "optimize_shgo": [53, 68], "foucart18": [53, 69], "initialize_eo": [53, 69], "interp_grav_mass_to_baryon_mass": [53, 69], "interp_grav_mass_to_compact": [53, 69], "load_ns_sequ": [53, 69], "isco_solut": [53, 69], "isso_eq_at_pol": [53, 69], "isso_eq_at_pole_dr": [53, 69], "isso_eq_at_pole_dr2": [53, 69], "pg_isso_eq": [53, 69], "pg_isso_eq_dr": [53, 69], "pg_isso_eq_dr2": [53, 69], "frequency_noise_from_psd": [53, 70, 82], "noise_from_str": [53, 70, 82], "colored_nois": [53, 70, 82], "backgroundeventr": [53, 71], "add_background": [53, 71], "eval_pdf": [53, 71], "get_norm": [53, 71], "plot_bg": [53, 71], "eventr": [53, 71], "add_bank": [53, 71], "filter_templ": [53, 71], "get_ctyp": [53, 71], "get_livetim": [53, 71], "in_coinc_time_excl": [53, 71], "make_bin": [53, 71], "moreifotim": [53, 71], "foregroundev": [53, 71], "add_zerolag": [53, 71], "get_bg_pdf": [53, 71], "get_sg_pdf": [53, 71], "signaleventr": [53, 71], "add_inject": [53, 71], "make_all_bin": [53, 71], "plot_inj": [53, 71], "alltim": [53, 71], "filter_bin_lo_hi": [53, 71], "filter_tmplt_mchirp": [53, 71], "get_start_dur": [53, 71], "ifos_from_combo": [53, 71], "in_coinc_time_incl": [53, 71], "log_rho_bg": [53, 71], "log_rho_fg": [53, 71], "log_rho_fg_analyt": [53, 71], "read_full_data": [53, 71], "read_full_data_mchirp": [53, 71], "type_in_tim": [53, 71], "augmented_rv_continu": [53, 71], "hpd_interv": [53, 71], "count_posterior": [53, 71], "p_bg": [53, 71], "dist_summari": [53, 71], "odds_summari": [53, 71], "plotdist": [53, 71], "check_template_param_bin_data": [53, 71], "noise_density_from_far": [53, 71], "read_template_bank_param": [53, 71], "signal_pdf_from_snr": [53, 71], "signal_rate_rescal": [53, 71], "signal_rate_trig_typ": [53, 71], "template_param_bin_pa": [53, 71], "template_param_bin_types_farlim_pa": [53, 71], "template_param_bin_types_pa": [53, 71], "pastrodata": [53, 71], "apply_significance_limit": [53, 71], "do_pastro_calc": [53, 71], "insert_live_pastro_option_group": [53, 71], "average_time_between_sign": [53, 71], "coalescence_r": [53, 71], "diff_lookback_tim": [53, 71], "distance_from_r": [53, 71], "merger_rate_dens": [53, 71], "norm_redshift_distribut": [53, 71], "p_tau": [53, 71], "sfr_grb_2008": [53, 71], "sfr_madau_dickinson_2014": [53, 71], "sfr_madau_fragos_2017": [53, 71], "total_rate_upto_redshift": [53, 71], "draw_flat_sampl": [53, 71], "draw_imf_sampl": [53, 71], "draw_lnm_sampl": [53, 71], "fgmc": [53, 71], "log_rho_fgmc": [53, 71], "mchirp_sampler_flat": [53, 71], "mchirp_sampler_imf": [53, 71], "mchirp_sampler_lnm": [53, 71], "prob_flat": [53, 71], "prob_imf": [53, 71], "prob_lnm": [53, 71], "process_full_data": [53, 71], "save_bkg_falloff": [53, 71], "skew_lognormal_sampl": [53, 71], "astro_redshift": [53, 71], "contracted_dvdc": [53, 71], "dlum_to_z": [53, 71], "estimate_vt": [53, 71], "inj_distance_pdf": [53, 71], "inj_mass_pdf": [53, 71], "inj_spin_pdf": [53, 71], "pdf_z_astro": [53, 71], "process_inject": [53, 71], "read_inject": [53, 61, 62, 71], "get_psd_model_list": [53, 72, 82], "get_pycbc_psd_list": [53, 72, 82], "analytical_csd_lisa_tdi_xi": [53, 72, 82], "analytical_psd_taiji_confusion_nois": [53, 72, 82], "analytical_psd_tianqin_confusion_nois": [53, 72, 82], "averaged_fplus_sq_approxim": [53, 72, 82], "averaged_lisa_fplus_sq_numer": [53, 72, 82], "averaged_response_lisa_tdi": [53, 72, 82], "averaged_response_taiji_tdi": [53, 72, 82], "averaged_response_tianqin_tdi": [53, 72, 82], "averaged_tianqin_fplus_sq_numer": [53, 72, 82], "confusion_fit_lisa": [53, 72, 82], "confusion_fit_taiji": [53, 72, 82], "confusion_fit_tianqin": [53, 72, 82], "lisa_psd_compon": [53, 72, 82], "omega_length": [53, 72, 82], "psd_lisa_acc_nois": [53, 72, 82], "psd_lisa_oms_nois": [53, 72, 82], "psd_taiji_acc_nois": [53, 72, 82], "psd_taiji_oms_nois": [53, 72, 82], "psd_tianqin_acc_nois": [53, 72, 82], "psd_tianqin_oms_nois": [53, 72, 82], "semi_analytical_psd_lisa_confusion_nois": [53, 72, 82], "sensitivity_curve_lisa_scird": [53, 72, 82], "sensitivity_curve_lisa_confus": [53, 72, 82], "sensitivity_curve_lisa_semi_analyt": [53, 72, 82], "sensitivity_curve_taiji_analyt": [53, 72, 82], "sensitivity_curve_taiji_confus": [53, 72, 82], "sensitivity_curve_tianqin_analyt": [53, 72, 82], "sensitivity_curve_tianqin_confus": [53, 72, 82], "taiji_psd_compon": [53, 72, 82], "tianqin_psd_compon": [53, 72, 82], "bandlimited_interpol": [53, 72, 82], "inverse_spectrum_trunc": [53, 72, 82], "median_bia": [53, 72, 82], "from_numpy_arrai": [53, 72, 82], "from_xml": [53, 72, 82], "calc_filt_psd_vari": [53, 72, 82], "create_full_filt": [53, 72, 82], "find_trigger_valu": [53, 72, 82], "live_calc_psd_vari": [53, 72, 82], "live_create_filt": [53, 72, 82], "live_find_var_valu": [53, 72, 82], "mean_squar": [53, 72, 82], "associate_psds_to_multi_ifo_seg": [53, 72, 82], "associate_psds_to_seg": [53, 72, 82], "associate_psds_to_single_ifo_seg": [53, 72, 82], "generate_overlapping_psd": [53, 72, 82], "insert_psd_option_group": [53, 72, 82], "insert_psd_option_group_multi_ifo": [53, 72, 82], "verify_psd_opt": [53, 72, 82], "verify_psd_options_multi_ifo": [53, 72, 82], "source_color": [53, 73], "get_summary_page_link": [53, 73], "coinc_timeseries_plot": [53, 73], "columns_from_file_list": [53, 73], "get_gracedb_search_link": [53, 73], "times_to_link": [53, 73], "times_to_url": [53, 73], "trigger_timeseries_plot": [53, 73], "sectionnumb": [53, 73, 79], "group_layout": [53, 73], "grouper": [53, 73, 79, 87], "single_layout": [53, 73], "two_column_layout": [53, 73], "metapars": [53, 73], "handle_data": [53, 73], "handle_starttag": [53, 73], "html_escap": [53, 73], "load_html_metadata": [53, 73], "load_metadata_from_fil": [53, 73], "load_png_metadata": [53, 73], "save_fig_with_metadata": [53, 73], "save_html_with_metadata": [53, 73], "save_pdf_with_metadata": [53, 73], "save_png_with_metadata": [53, 73], "clicklink": [53, 73], "javascript": [53, 73], "linetooltip": [53, 73], "mplslide": [53, 73], "tooltip": [53, 73], "add_style_opt_to_pars": [53, 73], "hist_overflow": [53, 73], "set_style_from_cli": [53, 73], "generate_asd_plot": [53, 73], "axis_max_valu": [53, 73], "contour_plott": [53, 73], "make_grb_segments_plot": [53, 73], "pygrb_plott": [53, 73], "construct_tri": [53, 73], "dataset_iter": [53, 73], "extract_basic_trig_properti": [53, 73], "extract_ifo": [53, 73], "extract_ifos_and_veto": [53, 73], "get_antenna_dist_factor": [53, 73], "get_coinc_snr": [53, 73], "load_segment_dict": [53, 73], "load_time_slid": [53, 73], "load_trigg": [53, 73], "load_xml_tabl": [53, 73], "max_median_stat": [53, 73], "mc_cal_wf_err": [53, 73], "pygrb_add_bestnr_cut_opt": [53, 73], "pygrb_add_bestnr_opt": [53, 73], "pygrb_add_injmc_opt": [53, 73], "pygrb_add_null_snr_opt": [53, 73], "pygrb_add_single_snr_cut_opt": [53, 73], "pygrb_initialize_plot_pars": [53, 73], "sort_stat": [53, 73], "sort_trig": [53, 73], "template_hash_to_id": [53, 73], "get_embedded_config": [53, 73], "render_default": [53, 73], "render_glitchgram": [53, 73], "render_ignor": [53, 73], "render_text": [53, 73], "render_tmplt": [53, 73], "render_workflow_html_templ": [53, 73], "setup_template_rend": [53, 73], "construct_kd": [53, 73], "create_axes_grid": [53, 73], "create_density_plot": [53, 73], "create_marginalized_hist": [53, 73], "create_multidim_plot": [53, 73], "get_scale_fac": [53, 73], "reduce_tick": [53, 73], "remove_common_offset": [53, 73], "set_marginal_histogram_titl": [53, 73], "generate_snr_plot": [53, 73], "drop_trailing_zero": [53, 73], "format_valu": [53, 73], "get_signum": [53, 73], "mathjax_html_head": [53, 73], "html_tabl": [53, 73], "static_t": [53, 73], "get_code_version_numb": [53, 73], "get_library_version_info": [53, 73], "cubicsplin": [53, 74], "apply_calibr": [53, 74], "map_to_adjust": [53, 74], "add_gate_option_group": [53, 74], "apply_gates_to_fd": [53, 74], "apply_gates_to_td": [53, 74], "gate_and_paint": [53, 74], "gates_from_cli": [53, 64, 74], "psd_gates_from_cli": [53, 74], "avg_inner_product": [53, 74], "calibration_lin": [53, 74], "clean_data": [53, 74], "complex_median": [53, 74], "line_model": [53, 74], "matching_lin": [53, 74], "physicalmodel": [53, 74], "adjust_strain": [53, 74], "tf_from_fil": [53, 74], "update_c": [53, 74], "update_g": [53, 74], "update_r": [53, 74], "strainbuff": [53, 59, 74], "add_hard_count": [53, 74], "check_psd_dist": [53, 74], "invalidate_psd": [53, 74], "near_hwinj": [53, 74], "null_advance_strain": [53, 74], "overwhitened_data": [53, 74], "recalculate_psd": [53, 74], "strainseg": [53, 72, 74], "fourier_seg": [53, 72, 74], "insert_segment_option_group": [53, 74], "insert_segment_option_group_multi_ifo": [53, 74], "required_opts_list": [53, 74], "verify_segment_opt": [53, 74], "verify_segment_options_multi_ifo": [53, 74], "create_memory_and_engine_for_class_based_fft": [53, 74], "detect_loud_glitch": [53, 74], "execute_cached_fft": [53, 74], "execute_cached_ifft": [53, 74], "gate_data": [53, 74], "insert_strain_option_group": [53, 74], "insert_strain_option_group_multi_ifo": [53, 74], "next_power_of_2": [53, 74], "verify_strain_opt": [53, 74], "verify_strain_options_multi_ifo": [53, 74], "read_model_from_config": [53, 74], "get_bank_properti": [53, 75, 82], "calculate_ethinca_metric_comp": [53, 75, 82], "convert_to_sngl_inspiral_t": [53, 75, 82], "output_bank_to_fil": [53, 75, 82], "output_bank_to_hdf": [53, 75, 82], "output_sngl_inspiral_t": [53, 75, 82], "find_xi_extrema_brut": [53, 75, 82], "get_mass_distribut": [53, 75, 82], "get_physical_covaried_mass": [53, 75, 82], "stack_xi_direction_brut": [53, 75, 82], "calculate_metr": [53, 75, 82], "calculate_metric_comp": [53, 75, 82], "calculate_mo": [53, 75, 82], "determine_eigen_direct": [53, 75, 82], "get_moment": [53, 75, 82], "interpolate_psd": [53, 75, 82], "calc_point_dist": [53, 75, 82], "calc_point_dist_vari": [53, 75, 82], "estimate_mass_rang": [53, 75, 82], "find_closest_calculated_frequ": [53, 75, 82], "find_max_and_min_frequ": [53, 75, 82], "get_conv_param": [53, 75, 82], "get_cov_param": [53, 75, 82], "get_covaried_param": [53, 75, 82], "get_mu_param": [53, 75, 82], "get_point_dist": [53, 75, 82], "get_random_mass": [53, 75, 82], "get_random_mass_point_particl": [53, 75, 82], "outspiral_loop": [53, 75, 82], "return_nearest_cutoff": [53, 75, 82], "rotate_vector": [53, 75, 82], "test_point_dist": [53, 75, 82], "ethinca_order_from_str": [53, 75, 82], "generate_inverse_map": [53, 75, 82], "generate_map": [53, 75, 82], "get_chirp_param": [53, 75, 82], "get_ethinca_ord": [53, 75, 82], "generate_anstar_3d_lattic": [53, 75, 82], "generate_hexagonal_lattic": [53, 75, 82], "indentedhelpformatterwithnl": [53, 75, 82], "format_descript": [53, 75, 82], "format_opt": [53, 75, 82], "check_ethinca_against_bank_param": [53, 75, 82], "ethincaparamet": [53, 75, 82], "from_argpars": [53, 75, 82], "get_options_from_group": [53, 75, 82], "insert_base_bank_opt": [53, 75, 82], "insert_ethinca_metric_opt": [53, 75, 82], "insert_mass_range_option_group": [53, 75, 82], "insert_metric_calculation_opt": [53, 75, 82], "massrangeparamet": [53, 75, 82], "default_delta_bh_spin": [53, 75, 82], "default_delta_ns_mass": [53, 75, 82], "default_ns_eo": [53, 75, 82], "default_nsbh_boundary_mass": [53, 75, 82], "is_outside_rang": [53, 75, 82], "metricparamet": [53, 75, 82], "eval": [53, 75, 82], "evec": [53, 75, 82], "evecscv": [53, 75, 82], "metric": [53, 69, 75, 90, 100], "time_unprojected_metr": [53, 75, 82], "verify_ethinca_metric_opt": [53, 75, 82], "verify_mass_range_opt": [53, 75, 82], "verify_metric_calculation_opt": [53, 75, 82], "partitionedtmpltbank": [53, 75, 82], "add_point_by_chi_coord": [53, 75, 82], "add_point_by_mass": [53, 75, 82], "add_tmpltbank_from_hdf_fil": [53, 75, 82], "add_tmpltbank_from_xml_t": [53, 75, 82], "calc_point_distance_vari": [53, 75, 82], "check_bin_exist": [53, 75, 82], "find_point_bin": [53, 75, 82], "get_freq_map_and_norm": [53, 75, 82], "get_point_from_bins_and_idx": [53, 75, 82], "output_all_point": [53, 75, 82], "test_point_distance_vari": [53, 75, 82], "check_align": [53, 76], "empti": [53, 56, 59, 61, 67, 71, 76, 78, 79, 91, 95], "abs_arg_max": [53, 76], "abs_max_loc": [53, 76], "almost_equal_elem": [53, 76], "almost_equal_norm": [53, 76], "astyp": [53, 76], "clear": [53, 65, 76, 78, 82, 90], "conj": [53, 76], "cumsum": [53, 76], "dot": [53, 76, 86], "fill": [53, 59, 64, 73, 76, 82, 90], "items": [53, 76], "kind": [53, 64, 67, 76, 78, 86, 95, 98], "max_loc": [53, 76], "multiply_and_add": [53, 76], "ndim": [53, 63, 76], "ptr": [53, 76], "squared_norm": [53, 76], "trim_zero": [53, 76, 85], "vdot": [53, 76], "weighted_inn": [53, 76], "check_same_len_precis": [53, 76], "common_kind": [53, 76], "complex_same_precision_a": [53, 76], "force_precision_to_match": [53, 76], "load_arrai": [53, 76], "real_same_precision_a": [53, 76], "abs_arg_max_complex": [53, 76], "inner_r": [53, 76], "deepcopyableconfigpars": [53, 76], "interpolatingconfigpars": [53, 76, 79, 90], "add_options_to_sect": [53, 76, 79, 87], "check_duplicate_opt": [53, 76, 79, 87], "get_opt_tag": [53, 76], "get_subsect": [53, 76], "has_option_tag": [53, 76], "interpolate_str": [53, 76, 79, 87], "perform_extended_interpol": [53, 76, 79, 87], "populate_shared_sect": [53, 76], "read_ini_fil": [53, 76, 79, 87], "sanitize_newlin": [53, 76], "sanity_check_subsect": [53, 76, 79, 87], "split_multi_sect": [53, 76, 79, 87], "at_frequ": [53, 76], "cyclic_time_shift": [53, 76], "epoch": [53, 59, 64, 76, 78, 85, 86], "get_delta_f": [53, 76], "get_epoch": [53, 76], "get_sample_frequ": [53, 76], "dictoptionact": [53, 76, 82, 100], "dictwithdefaultreturn": [53, 76, 82, 100], "default_set": [53, 76], "ifo_set": [53, 76], "multidetdictoptionact": [53, 76], "multidetmulticolonoptionact": [53, 76], "multidetoptionact": [53, 76], "multidetoptionactionspeci": [53, 76], "multidetoptionappendact": [53, 76], "convert_to_process_params_dict": [53, 76], "copy_opts_for_single_ifo": [53, 76], "ensure_one_opt": [53, 76], "ensure_one_opt_multi_ifo": [53, 76], "nonnegative_float": [53, 76], "nonnegative_int": [53, 76], "positive_int": [53, 76], "required_opt": [53, 76], "required_opts_multi_ifo": [53, 76], "add_into": [53, 76], "append_zero": [53, 76], "at_tim": [53, 76], "crop": [53, 76], "detrend": [53, 76], "epoch_clos": [53, 76], "filter_psd": [53, 76], "get_delta_t": [53, 76], "get_dur": [53, 76], "get_sample_r": [53, 76], "get_sample_tim": [53, 76], "prepend_zero": [53, 76], "sample_rate_clos": [53, 76], "to_astropi": [53, 76], "load_timeseri": [53, 66, 76], "singledetautochisq": [53, 77], "singledetskymaxautochisq": [53, 77], "autochisq_from_precomput": [53, 77], "singledetbankveto": [53, 77], "cache_overlap": [53, 77], "cache_segment_snr": [53, 77], "singledetskymaxbankveto": [53, 77], "bank_chisq_from_filt": [53, 77], "segment_snr": [53, 77], "template_overlap": [53, 77], "singledetpowerchisq": [53, 77], "cached_chisq_bin": [53, 77], "parse_opt": [53, 77], "singledetskymaxpowerchisq": [53, 77], "calculate_chisq_bin": [53, 77], "chisq_accum_bin": [53, 77], "fastest_power_chisq_at_point": [53, 77], "power_chisq_at_points_from_precomput": [53, 77], "power_chisq_bin": [53, 77], "power_chisq_bins_from_sigmasq_seri": [53, 77], "power_chisq_from_precomput": [53, 77], "shift_sum": [53, 77], "chisq_accum_bin_cython": [53, 77], "chisq_accum_bin_numpi": [53, 77], "point_chisq_cod": [53, 77], "singledetsgchisq": [53, 77], "insert_option_group": [53, 77], "filterbank": [53, 78], "generate_with_delta_f_and_max_freq": [53, 78], "get_decompressed_waveform": [53, 78], "filterbankskymax": [53, 78], "livefilterbank": [53, 59, 78], "freq_resolution_for_templ": [53, 78], "get_templ": [53, 78], "getslic": [53, 78], "id_from_param": [53, 78], "round_up": [53, 78], "templatebank": [53, 78, 92, 97], "has_compressed_waveform": [53, 78], "filehandl": [53, 78], "extra_arg": [53, 65, 68, 78], "end_frequ": [53, 78], "ensure_hash": [53, 78], "ensure_standard_filter_column": [53, 78], "parse_approxim": [53, 78], "template_thin": [53, 78], "add_approximant_arg": [53, 78], "boolargs_from_apprxstr": [53, 78], "find_variable_start_frequ": [53, 78], "parse_approximant_arg": [53, 78], "sigma_cach": [53, 78], "tuple_to_hash": [53, 78], "compressedwaveform": [53, 78], "load_to_memori": [53, 78], "mismatch": [53, 59, 75, 76, 78], "clear_cach": [53, 78], "decompress": [53, 78, 92], "from_hdf": [53, 78], "sample_point": [53, 78], "compress_waveform": [53, 78], "fd_decompress": [53, 78], "inline_linear_interp": [53, 78], "mchirp_compress": [53, 78], "rough_time_estim": [53, 78], "spa_compress": [53, 78], "vecdiff": [53, 78], "decomp_ccode_doubl": [53, 78], "decomp_ccode_float": [53, 78], "basecbcgener": [53, 78], "possible_arg": [53, 78], "basefdomaindetframegener": [53, 78], "detector_nam": [53, 66, 78], "current_param": [53, 61, 64, 78], "rframe_gener": [53, 78], "frozen_location_arg": [53, 78], "location_arg": [53, 78], "select_rframe_gener": [53, 78], "set_epoch": [53, 78], "static_arg": [53, 56, 66, 78], "basegener": [53, 78], "frozen_param": [53, 78], "fdomaincbcgener": [53, 64, 78], "fdomaincbcmodesgener": [53, 78], "fdomaindetframegener": [53, 64, 78], "fdomaindetframemodesgener": [53, 78], "fdomaindetframetwopolgener": [53, 78], "fdomaindetframetwopolnorespgener": [53, 78], "fdomaindirectdetframegener": [53, 64, 78], "fdomainfreqtauringdowngener": [53, 78], "fdomainmassspinringdowngener": [53, 78], "tdomaincbcgener": [53, 78], "tdomaincbcmodesgener": [53, 78], "tdomainfreqtauringdowngener": [53, 78], "tdomainmassspinringdowngener": [53, 78], "tdomainsupernovaegener": [53, 78], "select_waveform_gener": [53, 78], "select_waveform_modes_gener": [53, 78], "multiband_fd_waveform": [53, 78], "nltides_fourier_phase_differ": [53, 78], "nonlinear_tidal_spa": [53, 78], "parameterlist": [53, 78], "asdict": [53, 78], "aslist": [53, 78], "default_dict": [53, 78], "description_dict": [53, 78], "dtype_dict": [53, 78], "label_dict": [53, 78], "nodefault": [53, 78], "add_custom_waveform": [53, 78, 85, 86], "add_length_estim": [53, 78], "retrieve_waveform_plugin": [53, 78], "premerger_taylorf2": [53, 78], "kerr_factor": [53, 78], "fd_damped_sinusoid": [53, 78], "fd_output_vector": [53, 78], "format_lmn": [53, 78], "get_fd_from_final_mass_spin": [53, 78], "get_fd_from_freqtau": [53, 78], "get_td_from_final_mass_spin": [53, 78], "get_td_from_freqtau": [53, 78], "lm_amps_phas": [53, 78], "lm_arbitrary_harmon": [53, 78], "lm_deltaf": [53, 78], "lm_deltat": [53, 78], "lm_ffinal": [53, 78], "lm_freqs_tau": [53, 78], "lm_tfinal": [53, 78], "multimode_bas": [53, 78], "parse_mod": [53, 78], "prop": [53, 73, 78], "qnm_freq_decai": [53, 78], "qnm_time_decai": [53, 78], "spher_harm": [53, 78], "td_damped_sinusoid": [53, 78], "td_output_vector": [53, 78], "fd_sine_gaussian": [53, 78], "findchirp_chirptim": [53, 78], "spa_amplitude_factor": [53, 78], "spa_dist": [53, 78], "spa_length_in_tim": [53, 78], "spa_tmplt_end": [53, 78], "spa_tmplt_engin": [53, 78], "spa_tmplt_norm": [53, 78], "spa_tmplt_precondit": [53, 78], "cbrt_lookup": [53, 78], "get_cbrt": [53, 78], "get_log": [53, 78], "logv_lookup": [53, 78], "spa_tmplt_inline_sequ": [53, 78], "get_corecollapse_bounc": [53, 78], "amplitude_from_frequencyseri": [53, 78], "amplitude_from_polar": [53, 78, 85], "apply_fd_time_shift": [53, 78], "apply_fseries_time_shift": [53, 78], "ceilpow2": [53, 78], "coalign_waveform": [53, 78], "fd_taper": [53, 78], "fd_to_td": [53, 78], "frequency_from_polar": [53, 78, 85], "phase_from_frequencyseri": [53, 78], "phase_from_polar": [53, 78, 85], "taper_timeseri": [53, 78], "td_taper": [53, 66, 78], "time_from_frequencyseri": [53, 78], "fstimeshift": [53, 78], "fstimeshift32": [53, 78], "failedwaveformerror": [53, 64, 78], "nowaveformerror": [53, 78], "fd_approxim": [53, 78, 85], "filter_approxim": [53, 78], "get_fd_det_waveform": [53, 64, 78], "get_fd_det_waveform_sequ": [53, 78], "get_fd_waveform_from_td": [53, 78], "get_fd_waveform_sequ": [53, 78], "get_sgburst_waveform": [53, 78], "get_td_det_waveform_from_fd_det": [53, 78], "get_td_waveform_from_fd": [53, 78], "get_template_amplitude_norm": [53, 78], "get_two_pol_waveform_filt": [53, 78], "get_waveform_end_frequ": [53, 78], "get_waveform_filt": [53, 78], "get_waveform_filter_length_in_tim": [53, 75, 78], "get_waveform_filter_norm": [53, 78], "print_fd_approxim": [53, 78], "print_sgburst_approxim": [53, 78], "print_td_approxim": [53, 78], "sgburst_approxim": [53, 78], "td_approxim": [53, 78, 85], "td_waveform_to_fd_waveform": [53, 78], "waveform_norm_exist": [53, 78], "default_mod": [53, 78], "fd_waveform_mode_approxim": [53, 64, 78], "get_fd_waveform_mod": [53, 78], "get_glm": [53, 78], "get_imrphenomxh_mod": [53, 78], "get_nrhybsur_mod": [53, 78], "get_nrsur_mod": [53, 78], "get_td_waveform_mod": [53, 78], "sum_mod": [53, 78], "td_waveform_mode_approxim": [53, 64, 78], "censorforeground": [53, 79, 87], "current_retention_level": [53, 79, 87, 90, 91], "mergeexecut": [53, 79, 87], "pycbcaddstatmap": [53, 79, 87], "create_nod": [53, 79, 87, 91, 99], "pycbcbank2hdfexecut": [53, 79, 87], "pycbccombinestatmap": [53, 79, 87], "pycbcdistributebackgroundbin": [53, 79, 87], "pycbcexcludezerolag": [53, 79, 87], "pycbcfindcoincexecut": [53, 79, 87], "pycbcfindsnglsexecut": [53, 79, 87], "file_input_opt": [53, 79, 87], "pycbcfitbytemplateexecut": [53, 79, 87], "pycbcfitoverparamexecut": [53, 79, 87], "pycbchdfinjfindexecut": [53, 79, 87], "pycbcsnglsstatmapexecut": [53, 79, 87], "pycbcsnglsstatmapinjexecut": [53, 79, 87], "pycbcstatmapexecut": [53, 79, 87], "pycbcstatmapinjexecut": [53, 79, 87], "pycbctrig2hdfexecut": [53, 79, 87], "convert_bank_to_hdf": [53, 79, 87], "convert_trig_to_hdf": [53, 79, 87], "find_injections_in_hdf_coinc": [53, 79, 87], "get_ordered_ifo_list": [53, 79, 87], "make_foreground_censored_veto": [53, 79, 87], "merge_single_detector_hdf_fil": [53, 79, 87], "rerank_coinc_followup": [53, 79, 87], "select_files_by_ifo_combin": [53, 79, 87], "setup_combine_statmap": [53, 79, 87], "setup_exclude_zerolag": [53, 79, 87], "setup_interval_coinc": [53, 79, 87], "setup_interval_coinc_inj": [53, 79, 87], "setup_sngl": [53, 79, 87], "setup_sngls_inj": [53, 79, 87], "setup_sngls_statmap": [53, 79, 87], "setup_sngls_statmap_inj": [53, 79, 87], "setup_statmap": [53, 79, 87], "setup_statmap_inj": [53, 79, 87], "setup_trigger_fit": [53, 79, 87], "parse_workflow_ini_fil": [53, 79, 87], "get_cli_opt": [53, 79, 87, 90], "interpolate_ex": [53, 79, 87, 90], "perform_exe_expans": [53, 79, 87, 90], "resolve_file_url": [53, 79, 87, 90], "resolve_url": [53, 79, 87, 90], "section_to_cli": [53, 79, 87, 90], "add_workflow_command_line_group": [53, 76, 79, 87, 90], "calledprocesserrormod": [53, 79, 87], "all_trigg": [53, 79, 82, 87, 90, 94, 95], "do_not_keep": [53, 79, 87], "final_result": [53, 79, 87, 90], "intermediate_product": [53, 79, 87, 90], "keep_but_raise_warn": [53, 79, 87], "merged_trigg": [53, 79, 82, 87, 90, 95], "add_ini_profil": [53, 79, 87], "add_opt": [53, 79, 87], "get_opt": [53, 79, 87], "get_transform": [53, 79, 87], "has_opt": [53, 76, 79, 87], "time_dependent_opt": [53, 79, 87], "update_current_retention_level": [53, 79, 87], "update_current_tag": [53, 79, 87], "update_output_directori": [53, 79, 87], "add_metadata": [53, 79, 87], "cache_entri": [53, 79, 87], "from_path": [53, 79, 87], "filelist": [53, 67, 73, 79, 87, 88, 91, 92, 99, 100], "categorize_by_attr": [53, 79, 87], "convert_to_lal_cach": [53, 79, 87], "entry_class": [53, 79, 87], "find_all_output_in_rang": [53, 79, 87], "find_output": [53, 79, 87], "find_output_at_tim": [53, 79, 87], "find_output_in_rang": [53, 79, 87], "find_output_with_ifo": [53, 79, 87], "find_output_with_tag": [53, 79, 87], "find_output_without_tag": [53, 79, 87], "find_outputs_in_rang": [53, 79, 87], "get_times_covered_by_fil": [53, 79, 87], "to_file_object": [53, 79, 87], "add_multiifo_input_list_opt": [53, 79, 87], "add_multiifo_output_list_opt": [53, 79, 87], "get_command_lin": [53, 79, 87], "new_multiifo_output_list_opt": [53, 79, 87], "new_output_file_opt": [53, 79, 87], "resolve_td_opt": [53, 79, 87], "segfil": [53, 79, 87, 88, 98], "from_multi_segment_list": [53, 79, 87], "from_segment_list": [53, 79, 87], "from_segment_list_dict": [53, 79, 87], "from_segment_xml": [53, 79, 87], "parse_segdict_kei": [53, 79, 87], "remove_short_sci_seg": [53, 79, 87], "return_union_seglist": [53, 79, 87], "to_segment_xml": [53, 79, 87], "exec_sites_str": [53, 79, 87], "execute_nod": [53, 79, 87], "get_ifo_combin": [53, 79, 87], "output_map": [53, 79, 82, 87], "save_config": [53, 79, 87], "staging_sit": [53, 79, 87], "staging_site_str": [53, 79, 87], "add_workflow_settings_cli": [53, 79, 87], "configparser_value_to_fil": [53, 79, 87], "get_full_analysis_chunk": [53, 79, 87], "get_random_label": [53, 79, 87], "make_analysis_dir": [53, 79, 87], "make_external_cal": [53, 79, 87], "resolve_url_to_fil": [53, 79, 87], "convert_cachelist_to_filelist": [53, 79, 87, 88], "datafind_keep_unique_backup": [53, 79, 87, 88], "get_missing_segs_from_frame_file_cach": [53, 79, 87, 88], "get_science_segs_from_datafind_out": [53, 79, 87, 88], "get_segment_summary_tim": [53, 79, 87, 88], "log_datafind_command": [53, 79, 87, 88], "run_datafind_inst": [53, 79, 87, 88], "setup_datafind_from_pregenerated_lcf_fil": [53, 79, 87, 88], "setup_datafind_runtime_cache_multi_calls_perifo": [53, 79, 87, 88], "setup_datafind_runtime_cache_single_call_perifo": [53, 79, 87, 88], "setup_datafind_runtime_frames_multi_calls_perifo": [53, 79, 87, 88], "setup_datafind_runtime_frames_single_call_perifo": [53, 79, 87, 88], "setup_datafind_workflow": [53, 79, 87, 88], "pycbcbintemplatesdqexecut": [53, 79, 87], "pycbcbintriggerratesdqexecut": [53, 79, 87], "setup_dq_rerank": [53, 79, 87], "pycbcgrbinjcombinerexecut": [53, 79, 87], "pycbcgrbinjfinderexecut": [53, 79, 87], "pycbcgrbtrigclusterexecut": [53, 79, 87], "pycbcgrbtrigcombinerexecut": [53, 79, 87], "build_segment_filelist": [53, 79, 87], "build_veto_filelist": [53, 79, 87], "fermi_core_tail_model": [53, 79, 87], "get_sky_grid_scal": [53, 79, 87], "make_gating_nod": [53, 79, 87], "make_info_t": [53, 79, 87], "make_pygrb_injs_t": [53, 79, 87], "make_pygrb_plot": [53, 79, 87], "set_grb_start_end": [53, 79, 87], "setup_pygrb_minifollowup": [53, 79, 87], "setup_pygrb_pp_workflow": [53, 79, 87], "setup_pygrb_results_workflow": [53, 79, 87], "create_fits_fil": [53, 79, 87, 94], "create_posterior_fil": [53, 79, 87], "get_diagnostic_plot": [53, 79, 87], "get_plot_group": [53, 79, 87], "make_diagnostic_plot": [53, 79, 87], "make_inference_acceptance_rate_plot": [53, 79, 87], "make_inference_dynesty_run_plot": [53, 79, 87], "make_inference_dynesty_trace_plot": [53, 79, 87], "make_inference_inj_recovery_plot": [53, 79, 87], "make_inference_plot": [53, 79, 87], "make_inference_plot_mcmc_histori": [53, 79, 87], "make_inference_posterior_plot": [53, 79, 87], "make_inference_pp_plot": [53, 79, 87], "make_inference_pp_t": [53, 79, 87], "make_inference_prior_plot": [53, 79, 87], "make_inference_samples_plot": [53, 79, 87], "make_inference_skymap": [53, 79, 87], "make_inference_summary_t": [53, 79, 87], "make_posterior_workflow": [53, 79, 87], "pycbcmergehdfexecut": [53, 79, 87, 91], "pycbcoptimalsnrexecut": [53, 79, 87, 91], "compute_inj_optimal_snr": [53, 79, 87, 91], "cut_distant_inject": [53, 79, 87, 91], "inj_to_hdf": [53, 79, 87, 91], "setup_injection_workflow": [53, 79, 87, 91], "veto_inject": [53, 79, 87, 91], "jobsegment": [53, 79, 87], "get_data_times_for_job": [53, 79, 87], "get_valid_times_for_job": [53, 79, 87], "pick_tile_s": [53, 79, 87], "lalappsinspinjexecut": [53, 79, 87], "ligolwaddexecut": [53, 79, 87], "pycbcinspiralexecut": [53, 79, 87], "get_valid_tim": [53, 79, 87], "zero_pad_data_extend": [53, 79, 87], "pycbcmultiinspiralexecut": [53, 79, 87], "pycbctmpltbankexecut": [53, 79, 87], "create_nodata_nod": [53, 79, 87], "pycbcconditionstrainexecut": [53, 79, 87], "pycbccreateinjectionsexecut": [53, 79, 87], "pycbchdfsplitinjexecut": [53, 79, 87], "pycbcinferenceexecut": [53, 79, 87], "pycbcsplitbankexecut": [53, 79, 87], "pycbcsplitbankxmlexecut": [53, 79, 87], "pycbcsplitinspinjexecut": [53, 79, 87], "identify_needed_data": [53, 79, 87], "int_gps_time_to_str": [53, 79, 87], "multi_ifo_coherent_job_setup": [53, 79, 87], "select_generic_execut": [53, 79, 87], "select_matchedfilter_class": [53, 79, 87], "select_tmpltbank_class": [53, 79, 87], "sngl_ifo_job_setup": [53, 79, 87], "setup_matchedfltr_dax_gener": [53, 79, 87, 92], "setup_matchedfltr_dax_generated_multi": [53, 79, 87, 92], "setup_matchedfltr_workflow": [53, 79, 87, 92], "plotqscanexecut": [53, 79, 87], "singletemplateexecut": [53, 79, 87], "singletimefreqexecut": [53, 79, 87], "get_single_template_param": [53, 79, 87], "make_coinc_info": [53, 79, 87], "make_inj_info": [53, 79, 87], "make_plot_waveform_plot": [53, 79, 87], "make_qscan_plot": [53, 79, 87], "make_single_template_fil": [53, 79, 87], "make_single_template_plot": [53, 79, 87], "make_singles_timefreq": [53, 79, 87], "make_skipped_html": [53, 79, 87], "make_sngl_ifo": [53, 79, 87], "make_trigger_timeseri": [53, 79, 87], "make_upload_fil": [53, 79, 87], "setup_foreground_minifollowup": [53, 79, 87], "setup_injection_minifollowup": [53, 79, 87], "setup_single_det_minifollowup": [53, 79, 87], "setup_upload_prep_minifollowup": [53, 79, 87], "add_condorpool_copy_sit": [53, 79, 87], "add_condorpool_shared_sit": [53, 79, 87], "add_condorpool_symlink_sit": [53, 79, 87], "add_ini_site_profil": [53, 79, 87], "add_local_sit": [53, 79, 87], "add_osg_sit": [53, 79, 87], "add_sit": [53, 79, 87], "add_site_pegasus_profil": [53, 79, 87], "make_catalog": [53, 79, 87], "add_profil": [53, 79, 87], "create_transform": [53, 79, 87], "add_pfn": [53, 79, 87], "dax_repr": [53, 79, 87], "has_pfn": [53, 79, 87], "insert_into_dax": [53, 79, 87], "output_map_str": [53, 79, 87], "add_arg": [53, 79, 87], "add_input": [53, 79, 87], "add_input_arg": [53, 79, 87], "add_input_list_opt": [53, 79, 87], "add_input_opt": [53, 79, 87], "add_list_opt": [53, 79, 87], "add_output": [53, 79, 87], "add_output_arg": [53, 79, 87], "add_output_list_opt": [53, 79, 87], "add_output_opt": [53, 79, 87], "add_raw_arg": [53, 79, 87], "profileshortcut": [53, 79, 87], "set_categori": [53, 79, 87], "set_execution_sit": [53, 79, 87], "set_memori": [53, 79, 87], "set_num_cpu": [53, 79, 87], "set_num_retri": [53, 79, 87], "set_prior": [53, 79, 87], "set_storag": [53, 79, 87], "set_univers": [53, 79, 87], "subworkflow": [53, 79, 87], "add_into_workflow": [53, 79, 87], "add_planner_arg": [53, 79, 87], "set_subworkflow_properti": [53, 79, 87], "is_same_a": [53, 79, 87], "add_contain": [53, 79, 87], "add_explicit_depend": [53, 79, 87], "add_nod": [53, 79, 87], "add_subworkflow_depend": [53, 79, 87], "add_transform": [53, 79, 87], "add_workflow": [53, 79, 87], "plan_and_submit": [53, 79, 87], "traverse_workflow_io": [53, 79, 87], "plotexecut": [53, 79, 87], "excludestr": [53, 79, 87], "make_binned_hist": [53, 79, 87], "make_coinc_snrchi_plot": [53, 79, 87], "make_dq_flag_trigger_rate_plot": [53, 79, 87], "make_dq_segment_t": [53, 79, 87], "make_foreground_t": [53, 79, 87], "make_foundmissed_plot": [53, 79, 87], "make_gating_plot": [53, 79, 87], "make_ifar_plot": [53, 79, 87], "make_inj_t": [53, 79, 87], "make_range_plot": [53, 79, 87], "make_results_web_pag": [53, 79, 87], "make_seg_plot": [53, 79, 87], "make_seg_t": [53, 79, 87], "make_segments_plot": [53, 79, 87], "make_sensitivity_plot": [53, 79, 87], "make_single_hist": [53, 79, 87], "make_singles_plot": [53, 79, 87], "make_snrchi_plot": [53, 79, 87], "make_snrifar_plot": [53, 79, 87], "make_snrratehist_plot": [53, 79, 87], "make_spectrum_plot": [53, 79, 87], "make_template_bin_t": [53, 79, 87], "make_template_plot": [53, 79, 87], "make_throughput_plot": [53, 79, 87], "make_veto_t": [53, 79, 87], "requirestr": [53, 79, 87], "make_average_psd": [53, 79, 87], "make_psd_fil": [53, 79, 87], "merge_psd": [53, 79, 84, 87, 96], "setup_psd_calcul": [53, 79, 87], "setup_psd_pregener": [53, 79, 87], "setup_psd_workflow": [53, 79, 87], "generate_triggered_seg": [53, 79, 87, 98], "get_flag_segments_fil": [53, 79, 87, 98], "get_segments_fil": [53, 79, 87, 98], "get_triggered_coherent_seg": [53, 79, 87, 98], "save_veto_defin": [53, 79, 87, 98], "select_splitfilejob_inst": [53, 79, 87, 99], "setup_splittable_dax_gener": [53, 79, 87, 99], "setup_splittable_workflow": [53, 79, 87, 99], "setup_tmpltbank_dax_gener": [53, 79, 87, 100], "setup_tmpltbank_pregener": [53, 79, 87, 100], "setup_tmpltbank_without_fram": [53, 79, 87, 100], "setup_tmpltbank_workflow": [53, 79, 87, 100], "versioningexecut": [53, 79, 87], "make_versioning_pag": [53, 79, 87], "wrapper": [53, 57, 64, 65, 67, 76, 78, 79, 90, 92, 100], "element": [53, 56, 57, 62, 63, 64, 66, 67, 72, 73, 74, 75, 76, 78], "subclass": [53, 57, 58, 62, 67, 74, 76, 79, 91, 97], "tupl": [53, 54, 55, 56, 57, 59, 61, 62, 64, 65, 67, 71, 72, 73, 74, 76, 77, 78, 79], "ordin": 53, "5e": [53, 72], "324": 53, "logarithm": [53, 56, 61], "decrement": 53, "presum": [53, 79, 88, 91], "minv": 53, "maxv": 53, "intend": [53, 56, 64, 78, 79, 82, 86, 88, 92], "irregular": 53, "strict": [53, 58, 64, 76], "monoton": [53, 57, 78], "11": [53, 57, 72, 79, 82], "inf": [53, 56, 59, 64, 65, 66, 73], "13": [53, 56, 72, 82], "17": [53, 57, 82, 89, 95], "traceback": 53, "valueerror": [53, 56, 62, 64, 65, 69, 72, 73, 76, 79, 88], "linearli": [53, 72], "inclus": 53, "27": 53, "indexerror": 53, "overflow": [53, 73, 75], "infin": [53, 71], "99999999": 53, "999": 53, "92401774": 53, "54987973": 53, "70997595": 53, "62008869": 53, "builtin": 53, "manipul": [53, 57, 74, 75, 78], "min_bound": 53, "max_bound": 53, "btype_min": 53, "btype_max": 53, "btype_": 53, "isntanc": 53, "keyword": [53, 56, 57, 62, 64, 65, 66, 67, 71, 72, 73, 76, 78, 79, 86, 88, 90], "bool": [53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67, 68, 73, 74, 76, 78, 79], "finit": [53, 62, 80], "conditioned_x": 53, "lw": [53, 67], "vline": 53, "linestyl": [53, 73], "betewen": 53, "off": [53, 56, 59, 61, 62, 64, 73, 78, 79, 82, 94, 95, 98], "neither": [53, 65, 95], "_bound": 53, "notimplementederror": [53, 56, 66], "attributeerror": [53, 64, 67], "expos": [53, 62], "namespac": [53, 57, 61, 62, 64, 76, 79, 90], "xi1": 53, "xi2": 53, "plane": [53, 55, 59], "secondari": [53, 67], "ref_mass": 53, "lambdav": 53, "lambda": [53, 67, 75, 82, 100], "1302": 53, "4499": 53, "mathrm": [53, 56, 61, 64, 71], "dquadmon": 53, "frac": [53, 56, 59, 64, 72], "tau0": 53, "tau3": 53, "tau_0": [53, 75, 92], "tau_3": [53, 75], "f0": [53, 56, 59, 75, 78, 82, 90, 100], "tau": [53, 56, 59, 65, 71, 78, 82], "damp": [53, 56, 78], "keyerror": [53, 62], "harmon": [53, 57, 61, 64, 78, 96], "unphys": 53, "nan": [53, 62, 64, 66, 72], "seobnrv4phm": [53, 85], "nrsur7dq4": [53, 85], "eobnr": 53, "str": [53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 90, 98], "nrsur7dq4remn": 53, "xlalsimimreobfinalmassspin": 53, "xlalsimimreobfinalmassspinprec": 53, "final_mass": [53, 56, 78], "final_spin": [53, 56, 78], "overton": [53, 78], "fundament": 53, "current_l": 53, "current_m": 53, "new_l": 53, "new_m": 53, "kerr": [53, 69, 78], "m2": [53, 57, 67, 71, 75, 78, 83], "m1": [53, 57, 67, 71, 75, 78, 83], "tov_fil": 53, "eo": [53, 69, 75, 82, 100], "journal": 53, "ap": 53, "prd": [53, 69], "1103": [53, 72], "physrevd": [53, 72], "91": 53, "043002": 53, "force_r": 53, "heavier": [53, 75, 82], "lighter": [53, 75, 82], "in_second": 53, "f_low": [53, 72, 75, 77, 82, 85, 100], "bwtween": 53, "f_isco": 53, "tide": [53, 78], "nl": [53, 78], "delta_phi": 53, "overhead": [53, 67], "perpendicular": 53, "2h": [53, 69, 75, 82, 100], "swap_companion": 53, "ns_bh_mass_boundari": 53, "remnant": [53, 67, 69, 75, 82, 100], "discuss": [53, 57, 69, 77, 82, 89, 92, 93, 94, 99, 100], "foucart": [53, 69], "hinder": [53, 69], "nissank": [53, 69], "98": [53, 69, 79, 82], "081501": [53, 69], "2018": [53, 57, 64, 69, 82], "misalign": 53, "isso": [53, 69], "approach": [53, 88], "stone": [53, 61, 69], "loeb": [53, 69], "berger": [53, 69], "87": [53, 69], "084053": [53, 69], "2013": [53, 69, 82], "devis": 53, "86": [53, 72], "124007": [53, 82], "2012": [53, 82], "boolean": [53, 56, 57, 58, 59, 60, 61, 64, 67, 69, 71, 72, 74, 75, 76, 77, 78, 79, 92, 100], "swap": [53, 62, 65], "stringent": 53, "invok": [53, 69, 95], "baryon": [53, 69], "interp1d": [53, 69, 71, 78], "prescrib": 53, "role": 53, "tilt": [53, 55, 69], "w": [53, 57, 62, 69], "sqrt": [53, 56, 61, 64, 69, 78, 92], "radiu": [53, 56, 69, 75, 79], "pulsar": 53, "inertia": 53, "kilomet": 53, "dame": 53, "cosmolog": 53, "quantiti": [53, 57, 59, 73], "mostli": [53, 93, 94], "hand": [53, 56, 73, 84], "luminosity_dist": 53, "comoving_dist": 53, "strip_unit": 53, "kwarg": [53, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 71, 72, 73, 74, 75, 77, 78, 79, 88, 100], "ag": 53, "flatlambdacdm": 53, "san": 53, "get_cosmologi": [53, 71], "default_cosmologi": [53, 71], "vc": 53, "interp": [53, 64], "cube": [53, 56, 65], "disttoz": 53, "reference_tim": 53, "t_gp": 53, "polarization_typ": 53, "tensor": 53, "vector": [53, 55, 56, 57, 58, 59, 60, 64, 73, 74, 76, 78], "scalar": [53, 57, 62, 74, 76], "fplu": 53, "fx": [53, 59], "fb": 53, "breath": 53, "fcross": 53, "fy": 53, "fl": 53, "longitudn": 53, "strength": 53, "megaparsec": 53, "eff_dist": 53, "gcr": 53, "icr": 53, "au": 53, "det": [53, 57, 62, 64], "light": [53, 57, 59, 83, 95], "travel": [53, 57, 59, 83, 95], "antenna": [53, 57, 64, 72, 73, 78, 83], "pattern": [53, 60, 78, 83, 95], "vary_polar": 53, "other_detector": 53, "t2": [53, 57], "other_loc": 53, "word": [53, 61, 64, 71, 75, 78, 88, 91], "meter": 53, "ref_tim": [53, 73], "scalartyp": 53, "sattelit": 53, "correspod": 53, "height": [53, 73], "4000": 53, "letter": [53, 60], "geodet": 53, "rule": [53, 61, 64, 82, 90, 94, 95, 98], "ellipsoid": 53, "charact": [53, 73, 76, 90], "clearer": 53, "hope": [53, 82], "config_fil": [53, 62, 79], "hypothet": 53, "\u03c0": [53, 56], "underneath": 53, "f_plu": [53, 57], "f_cro": 53, "pretti": 53, "alphabet": 53, "comma": [53, 64, 95, 98], "arm_length": [53, 72], "wavelength": 53, "flag_str": 53, "sign": [53, 59, 76, 79, 95, 98], "dict": [53, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 78, 79, 88, 98], "segmentlist": [53, 57, 73, 79, 88, 92, 100], "veto_def_filenam": 53, "categori": [53, 79, 90, 95, 97, 98], "parsed_definit": 53, "segment_nam": [53, 57, 64, 67, 79], "override_ifo": 53, "atm": 53, "distinct": [53, 58, 82, 92, 98, 100], "start_pad": [53, 98], "end_pad": [53, 98], "flag_nam": [53, 79], "dqsegdb2": 53, "ex": [53, 54, 57, 60, 76, 78, 79, 82, 88, 90, 91, 92, 99], "ctype": [53, 71], "preferenti": 53, "pkg": 53, "libnam": 53, "architectur": 53, "fashion": [53, 95], "omit": [53, 59, 67, 74, 76, 82, 95], "suffix": [53, 78], "dylib": 53, "cdll": 53, "dir": [53, 82, 95, 96, 97], "tri": [53, 64, 67, 82, 94], "lexicograph": 53, "os": 53, "posix": 53, "library_nam": 53, "stub": [53, 76, 77], "sucess": [53, 95], "pkg_librari": 53, "pkg_libri": 53, "library_dir": 53, "include_dir": 53, "against": [53, 58, 59, 77, 79, 82, 88, 92, 100], "irrespect": 53, "area": [53, 57], "central": [53, 59, 74, 75, 76, 78], "trig_mc_det": 53, "mass_limit": 53, "mass_bdari": 53, "mass_gap": 53, "mass_gap_separ": 53, "extrem": [53, 75], "mchirp_uncertainti": 53, "classifi": [53, 86], "diagram": 53, "src_arg": 53, "candid": [53, 57, 59, 67, 98], "parser": [53, 56, 57, 58, 61, 62, 64, 65, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 90, 98], "trig_mc": 53, "lim_h1": 53, "lim_h2": 53, "lim_v1": 53, "lim_v2": 53, "sequenc": [53, 57, 62, 67, 68, 69, 73, 75, 78], "diagon": [53, 63, 73], "horizont": [53, 71, 73], "vertic": [53, 73], "x_min": 53, "x_max": 53, "distance_std": 53, "lal_cosmologi": 53, "planck15": 53, "planck15_lal_cosmologi": 53, "pesummari": 53, "blob": [53, 56, 65, 71], "del_z": 53, "mdet": 53, "del_mdet": 53, "kwd": [53, 56, 57, 64, 65, 66, 67, 73, 76, 77, 78, 79, 90], "ordereddict": 53, "fifo": 53, "confvar": 53, "optionpars": [53, 57, 58, 72, 74, 75, 76], "cli": [53, 57, 58, 61, 72, 74, 79, 90], "cokela": [53, 82], "0706": 53, "4437": 53, "appendix": [53, 57, 71, 72], "lalinspir": [53, 82], "tau0tau3": [53, 100], "s1z": [53, 57, 71], "s2z": [53, 57, 71], "return_mass_heavi": 53, "quadrat": [53, 59, 64, 76], "solut": [53, 64, 69], "invert": 53, "isco": [53, 69, 82], "buonanno": 53, "kidder": 53, "lehner": 53, "0709": 53, "3839": 53, "0801": 53, "4297v2": 53, "eq": [53, 56, 57, 64, 69, 71, 72, 73], "pan": 53, "et": [53, 56, 57, 59, 82], "al": [53, 56, 57, 59, 82], "0704": 53, "1964": 53, "nb": [53, 76, 78, 79, 88], "nonspin": [53, 75, 95], "07": 53, "omega_220": 53, "berti": 53, "cardoso": 53, "Will": [53, 65, 73, 74, 75, 76, 78, 79, 82, 100], "0512160": 53, "3732": 53, "inspiralbankgener": 53, "lorentzian": 53, "frd": [53, 82, 100], "captur": 53, "tail": [53, 57, 61, 79], "decai": [53, 63, 71, 78], "innermost": [53, 69], "stabl": [53, 69], "circular": [53, 55, 57, 69, 76, 78], "particl": 53, "schwarzschild": 53, "s_1": [53, 59], "onto": [53, 57, 76], "s_2": [53, 59], "0810": 53, "5336v3": 53, "heaviest": [53, 75], "bodi": [53, 75, 82], "beta": [53, 59, 61, 62, 65, 76, 78], "approx": [53, 72, 77, 100], "highest": [53, 57, 71], "taylortx": 53, "taylorfx": 53, "freqfunc": 53, "feobnrv2rd": 53, "n_point": [53, 74], "pn_2order": 53, "evolut": [53, 61, 65, 78, 83], "track": [53, 64, 88], "chi1": [53, 75], "chi2": [53, 75], "qm1": 53, "qm2": 53, "hybrid": [53, 64], "meco": [53, 64, 82, 100], "h_e": 53, "veloc": 53, "phiref": 53, "thetajn": 53, "phijl": 53, "spin12_deltaphi": 53, "l0": 53, "cone": 53, "vec": [53, 58, 59], "_1": 53, "2_1": 53, "_2": 53, "2_2": 53, "betwen": 53, "s1": [53, 57], "s2": 53, "m_chirp": 53, "cubic": [53, 74], "m_total": 53, "input_len": 53, "nearest": [53, 64, 73, 75, 76, 78, 82], "solar_mass": 53, "worker": [53, 79, 82, 95], "initarg": 53, "multiprocess": [53, 65, 92], "fcn": [53, 67], "funtion": [53, 61], "func": [53, 66, 71], "item": [53, 64, 67, 73, 75, 76, 79], "chunksiz": [53, 67], "catch": [53, 88, 90], "keyboard": 53, "interuppt": 53, "cleanli": 53, "mpi": [53, 65, 94], "require_mpi": 53, "f_dist": 53, "m_dist": [53, 71], "dbin": 53, "lost": 53, "mu_in": 53, "post": [53, 65, 75, 78, 79, 89, 92, 95], "mu_low": 53, "mu": [53, 56, 59, 71, 75], "mu_high": 53, "mass_bin": 53, "bin_typ": 53, "experi": [53, 71], "mbin": 53, "bin_num": 53, "bin_num2": 53, "thresh": [53, 57, 59, 71, 92], "hpd": 53, "credibl": 53, "multimod": 53, "contigu": [53, 78], "whole": [53, 67, 79, 88], "tol": [53, 76], "integrand": 53, "dp": 53, "dmu": 53, "trapezium": 53, "eff": [53, 56], "err": [53, 64, 73, 79, 94, 95], "logbin": 53, "pofmu": 53, "context": [53, 57, 58, 85], "num_thread": [53, 92], "device_num": 53, "ctx": 53, "found_d": 53, "missed_d": 53, "found_mchirp": 53, "missed_mchirp": 53, "distribution_param": 53, "limits_param": 53, "min_param": 53, "max_param": 53, "sim_to_bins_funct": 53, "volume_error": 53, "closer": 53, "d_min": 53, "neglig": [53, 59], "d_max": 53, "todo": 53, "collin": [53, 66], "usman": [53, 57], "OR": [53, 72], "distancesquar": 53, "dlim": 53, "vol": 53, "vol_err": 53, "rigidli": 53, "alia": [53, 62, 65, 67, 79], "old_map": 53, "new_map": 53, "datatyp": [53, 59, 64, 65, 67], "classmethod": [53, 56, 57, 61, 62, 63, 64, 65, 66, 67, 74, 75, 76, 77, 78, 79], "cp": [53, 56, 61, 62, 63, 64, 65, 73, 74, 76, 79, 88, 91, 98, 100], "skip_opt": [53, 79, 90], "additional_opt": [53, 56], "varargs_delim": [53, 56, 63, 65], "cl": [53, 56, 63, 64, 97], "deprec": [53, 88], "caretsian": 53, "00993347": 53, "00099667": 53, "09950042": 53, "52073522": 53, "39": [53, 56, 72], "48595679": 53, "input_arg": 53, "output_arg": 53, "transform_funct": 53, "59999999999999998": 53, "outvar1": 53, "outvar2": 53, "inputvar1": 53, "inputvar2": 53, "func1": 53, "func2": 53, "19650987609144363": 53, "tc_lisa_param": 53, "longitude_lisa_param": 53, "latitude_lisa_param": 53, "polarization_lisa_param": 53, "tc_geo_param": 53, "longitude_geo_param": 53, "latitude_geo_param": 53, "polarization_geo_param": 53, "tc_ssb_param": 53, "longitude_ssb_param": 53, "latitude_ssb_param": 53, "polarization_ssb_param": 53, "default_latitude_geo": 53, "default_latitude_ssb": 53, "default_longitude_geo": 53, "default_longitude_ssb": 53, "default_polarization_geo": 53, "default_polarization_ssb": 53, "default_tc_geo": 53, "default_tc_ssb": 53, "default_latitude_lisa": 53, "default_longitude_lisa": 53, "default_polarization_lisa": 53, "default_tc_lisa": 53, "redshift_mass": 53, "file_column": 53, "mass_lambda_fil": 53, "eos_index": 53, "piecewis": 53, "extract": [53, 57, 62, 65, 71, 72, 73, 74, 78, 79, 94], "filepath": [53, 73], "srcmass": [53, 94], "shut": [53, 64], "worri": [53, 67, 75, 82, 98], "m_src": 53, "tov": 53, "codomain": 53, "logitq": [53, 64], "4375183": 53, "21875915": 53, "97717521": 53, "mass1_param": [53, 94], "mass2_param": [53, 94], "mchirp_param": 53, "q_param": 53, "catesian": 53, "spsin": 53, "opposit": [53, 75], "fo": [53, 92, 100], "requested_param": 53, "valid_param": 53, "inferencefil": [53, 62, 65], "all_c": 53, "rorderd": 53, "carri": [53, 59, 61, 65, 67, 75, 90], "worflowconfigpars": [53, 56, 74], "retriev": [53, 54, 56, 57, 61, 62, 64, 65, 67, 74, 78, 79, 95, 98], "datefmt": 53, "formatt": 53, "iso": 53, "6801": 53, "millisecond": 53, "en": [53, 58, 65, 85], "wikipedia": [53, 58, 85], "wiki": [53, 58, 85], "iso_8601": 53, "2022": 53, "18t09": 53, "53": 53, "554": 53, "timestamp": [53, 57, 76], "tz": 53, "creation": [53, 57, 64], "logrecord": 53, "strftime": 53, "iso8601": 53, "rfc": 53, "3339": 53, "localtim": 53, "signatur": 53, "gmtime": 53, "gmt": 53, "argpars": [53, 57, 61, 62, 64, 71, 73, 75, 76, 79, 90], "argumentpars": [53, 57, 61, 62, 64, 71, 73, 74, 75, 76, 78, 79, 90], "asctim": 53, "levelnam": 53, "send": [53, 59, 66, 74, 79, 88, 90], "sigusr1": 53, "debug": [53, 74, 75, 79, 82, 88, 92, 93, 94, 99, 100], "noth": [53, 56, 72, 74, 75, 82, 88, 92, 95, 99, 100], "stringlength": 53, "announc": 54, "refresh": 54, "nump": 54, "informaton": 54, "yet": [54, 57, 62, 64, 65, 67, 94, 99], "rho": [55, 59, 71], "born": [55, 64, 72], "realist": 55, "t_geo": 55, "displac": 55, "longitude_geo": 55, "latitude_geo": 55, "polarization_geo": 55, "t0": [55, 74], "use_astropi": 55, "offset": [55, 56, 57, 64, 73, 78, 85, 86, 92, 95], "19": [55, 63, 72, 92, 95], "t_lisa": 55, "longitude_lisa": 55, "latitude_lisa": 55, "t_ssb": 55, "longitude_ssb": 55, "latitude_ssb": 55, "polarization_ssb": 55, "eclipt": 55, "barycent": 55, "propag": [55, 73], "rotation_matrix": 55, "old_fram": 55, "new_fram": 55, "matrix": [55, 57, 64, 75], "polarization_new_fram": 55, "40909262775014904": 55, "axial": 55, "obliqu": 55, "3x3": 55, "revolut": 55, "r_total": 55, "cosin": 56, "sin": [56, 64, 67, 78], "costheta_0": 56, "costheta_1": 56, "theta_0": 56, "theta_1": 56, "cyclic_domain": 56, "2pi": [56, 63, 64, 85], "azimuthal_cyclic_domain": 56, "angluar": 56, "init": [56, 64, 65, 67], "south": 56, "northern": 56, "hemispher": 56, "initili": 56, "val1": 56, "val2": 56, "configpars": [56, 62, 64, 65, 73, 76, 78, 79, 88, 90, 91, 92, 98, 99, 100], "bandwidth": [56, 59, 76], "scott": [56, 61], "gaussian_kd": [56, 73], "set_bw": 56, "datagroup": 56, "retriv": [56, 59, 67], "ra_prior": 56, "param_nam": 56, "unrecogn": [56, 78], "bounds_requir": 56, "btype": 56, "obei": [56, 82, 90, 98], "collaps": [56, 59, 78], "lie": [56, 57, 75, 79], "convex": 56, "hull": 56, "princip": [56, 75, 78, 82, 100], "supernovae_convex_hul": 56, "coeff_0": 56, "coeff_1": 56, "file_path": 56, "column_index": 56, "quad": [56, 69], "accuraci": [56, 59, 75], "param1": [56, 73, 79], "custom_mod": 56, "custom_function_nam": 56, "custom_function_name2": 56, "_logpdf": 56, "_cdfinv": 56, "invcdf": 56, "instant": 56, "semi": [56, 72], "abitrari": 56, "desir": [56, 58, 59, 65, 67, 70, 71, 72, 75, 76, 78, 79, 82, 87, 92, 94, 95, 100], "cumul": [56, 57, 59, 60, 76, 77, 79, 89, 95, 98], "erf": 56, "infti": [56, 64], "__call__": 56, "_mean": 56, "_var": 56, "foo_mean": 56, "foo_var": 56, "mass1_mean": 56, "mass1_var": 56, "phi_mean": 56, "phi_var": 56, "callabl": [56, 64, 71], "rest": [56, 66, 78, 82, 93, 94, 95], "n_test_sampl": 56, "mtotal_lt_30": 56, "mass_lim": 56, "uniform_prior": [56, 64], "prior_ev": 56, "reject": [56, 62, 65, 66, 82, 92], "dm_1dm_2": 56, "mathcal": [56, 64], "_c": 56, "_cdq": 56, "partial": [56, 64, 69], "l416": 56, "const": [56, 76], "mathemat": 56, "law": [56, 57, 71], "dr": 56, "r_": 56, "probabilti": 56, "solv": [56, 67, 90, 95], "multipli": [56, 57, 58, 59, 64, 65, 72, 74, 75, 76, 78], "notat": [56, 67, 73], "distriubt": 56, "rdfreq": 56, "damping_tim": [56, 78], "norm_toler": 56, "norm_se": 56, "renorm": 56, "randomli": [56, 62, 82, 95, 99], "996": 56, "tighter": 56, "010": 56, "von_mis": 56, "fisher": 56, "concentr": 56, "rotation": 56, "invari": 56, "rayleigh": [56, 57], "fabrycki": 56, "winn": 56, "2009": [56, 82], "apj": 56, "696": 56, "1230": 56, "2\u03c0": 56, "mean_ra": 56, "mean_dec": 56, "spread": [56, 61], "interpret": [56, 58, 76, 79], "brigg": 56, "1999": 56, "122": 56, "503": 56, "angle_unit": 56, "xi_bound": 56, "chi_": 56, "latter": [56, 61, 62, 82, 93, 94], "xi_1": 56, "xi_2": 56, "3777589082278725": 56, "36": [56, 69, 72], "90885758394699": 56, "51": 56, "294212757995254": 56, "109058546060346": 56, "36220145743631": 56, "34": [56, 85], "49594465315212": 56, "47": 56, "531953033719454": 56, "f8": [56, 67], "025": 56, "150914": 56, "prior_sect": [56, 64], "constraint_sect": [56, 64], "vargs_sect": 56, "sargs_sect": 56, "snr_trigger": 57, "projection_matrix": 57, "coinc_snr": 57, "26": [57, 64, 78], "harri": [57, 82], "fairhurst": 57, "2011": [57, 71], "1012": 57, "4939": 57, "normalis": 57, "rho_coh": 57, "surviv": [57, 74], "snrv": [57, 59, 77], "deector": 57, "snr_dict": 57, "time_delay_idx": 57, "rho_coinc": 57, "coinc_trigg": 57, "idx_dict": 57, "seen": [57, 62, 66, 71, 79, 87, 91], "time_delai": 57, "coinc_idx": 57, "idx": [57, 59, 67, 72, 75], "t_delay_idx": 57, "f_cross": 57, "1712": 57, "04724": 57, "williamson": 57, "2014": [57, 71, 82, 87], "1410": 57, "6042": 57, "unrestrict": 57, "dorrington": 57, "2019": [57, 79], "orca": 57, "cardiff": 57, "ac": 57, "uk": 57, "eprint": 57, "128124": 57, "freedom": [57, 77, 92], "net_chisq": 57, "apply_cut": 57, "null_min": 57, "null_grad": 57, "null_step": 57, "null": [57, 67, 73], "elsewher": [57, 97], "downweight": 57, "retain": [57, 92], "gradient": 57, "suviv": 57, "network_snr": [57, 68], "rw_snr": 57, "rw_snr_threshold": [57, 73], "reweight": [57, 71], "rw_snr_threshhold": 57, "expir": [57, 95], "initial_s": 57, "1048576": [57, 92, 100], "unord": 57, "timer": [57, 74], "num_templ": 57, "analysis_block": 57, "background_statist": 57, "sngl_rank": 57, "stat_fil": [57, 79], "ifar_limit": 57, "timeslide_interv": 57, "035": 57, "coinc_window_pad": 57, "002": 57, "return_background": 57, "background": [57, 71, 79, 87, 95, 98], "coinc_result": [57, 67], "updated_singl": 57, "num_coinc": 57, "analysis_chunk": 57, "coinc_stat": 57, "alarm": [57, 71], "inter": 57, "ifar_satur": 57, "tie": 57, "breaker": 57, "trial": [57, 73, 79], "restor": [57, 76], "num_r": 57, "max_tim": 57, "min_buffer_s": 57, "buffer_incr": 57, "resize_invalid_fract": 57, "buffer_index": 57, "valid_start": 57, "background_bin": [57, 79], "time1": [57, 67], "time2": [57, 67], "timeslide_id": [57, 67], "slide": [57, 71, 79, 89, 92, 95, 99], "timeslid": [57, 73, 89, 90, 95], "cindex": 57, "time_coinc": 57, "particip": 57, "cython": 57, "pure": 57, "num_above_zero": 57, "slide_step": 57, "idx1": 57, "idx2": 57, "slop": 57, "003": [57, 78], "pivot": [57, 79], "tof": 57, "stage": [57, 58, 79, 82, 87, 90, 92, 95, 97, 98, 99, 100], "subsequ": [57, 76, 78, 79, 85, 88, 95], "start1": 57, "start2": 57, "end1": 57, "end2": 57, "timeslide_offset": 57, "slid": [57, 73, 87], "timseslide_offset": 57, "log_rat": 57, "flight": [57, 89], "underflow": 57, "extent": [57, 59, 73, 79], "allowed_area": 57, "n_ifo": 57, "expected_log_r": 57, "occupi": 57, "template_cut_dict": 57, "preselect": 57, "findtrig": 57, "anyth": [57, 58, 66, 73, 82, 93, 94, 95], "cut_funct": 57, "cut_threshold": 57, "down": [57, 73, 76, 78, 82, 92, 95, 97], "fits_by_tid": 57, "tids_out": 57, "parameter_cut_funct": 57, "cut_thresh": 57, "trigger_cut_dict": 57, "idx_out": 57, "cut_dict": 57, "new_cut": 57, "strictest": 57, "inputstr": 57, "median_sigma": 57, "column_typ": 57, "tcolumn": 57, "window_s": 57, "gwstrain": [57, 72], "num_keep": 57, "statnam": [57, 61, 64], "log_chirp_width": 57, "outnam": [57, 67], "ncore": 57, "nfilter": 57, "ntemplat": 57, "run_tim": 57, "setup_tim": 57, "tnum_finish": 57, "hdf5": [57, 67, 71, 75, 76, 78, 79, 87], "h5": 57, "network_column": 57, "network_column_typ": 57, "time_slid": [57, 90], "eventmanagermultidetbas": 57, "perform_coincid": 57, "coinc_window": [57, 59], "window_length": 57, "absolut": [57, 74, 75, 76, 95], "cbuffer": 57, "timer1": 57, "timer2": 57, "absvalu": 57, "tlen": [57, 59, 85], "nbinned0": 57, "nbinned1": 57, "nbinned2": 57, "c0_size": 57, "c1_size": 57, "c2_size": 57, "rtype": [57, 64], "sref": 57, "two_det_weight": 57, "max_penalti": 57, "ref_snr": [57, 61, 64], "pdif": 57, "tdif": 57, "sdif": 57, "pbin": 57, "tbin": 57, "sbin": 57, "sig": [57, 95], "pref": 57, "tref": [57, 74], "sigref": 57, "senseref": 57, "twidth": 57, "pwidth": 57, "swidth": 57, "to_shift_ref": 57, "to_shift_ifo": 57, "leftlen": 57, "fold1": 57, "fold2": 57, "length1": 57, "length2": 57, "sort1": 57, "sort2": 57, "leftlength": 57, "sort2length": 57, "reduced_x2": 57, "fac": 57, "s5y1": 57, "weigth": 57, "sg_chisq": [57, 59, 77], "1208": 57, "3491": 57, "glue": [57, 79, 88, 98], "lsctabl": [57, 67], "brchisq": 57, "min_expected_psdvar": 57, "65": [57, 78, 85], "bchisq": [57, 77], "brchisq_threshold": 57, "psd_var_val_threshold": 57, "far": [57, 65, 71, 78, 79, 82, 95], "significance_dict": 57, "combo": 57, "far_limit": 57, "active_combin": 57, "utf": 57, "encod": [57, 59], "far_out": 57, "bstat": 57, "fstat": 57, "foreground": [57, 67, 71, 79, 89], "louder": 57, "decim": [57, 59, 73, 79, 89, 95], "cum_back_num": 57, "fore_n_loud": 57, "combo_kei": 57, "parse_arg": [57, 61, 62, 64], "back_stat": 57, "fore_stat": 57, "dec_fac": 57, "n_louder": 57, "1508": 57, "02357": 57, "n_bg": 57, "t_bg": 57, "exp": [57, 64, 71, 85, 86], "ifar_str": 57, "fit_funct": 57, "exponenti": [57, 71], "fit_threshold": 57, "count": [57, 62, 71, 75], "bg_n_louder": 57, "fg_n_louder": 57, "inp": [57, 79], "slen": [57, 77], "segsiz": [57, 59], "arr": [57, 67, 73], "outv": 57, "outl": 57, "assign": [57, 61, 64, 67, 75, 78, 82, 94, 100], "reduced_chisq_threshold": 57, "duration_threshold": 57, "fit_fil": 57, "sngl_ifar_est_dist": 57, "fixed_ifar": 57, "data_read": [57, 59], "rerank": 57, "limifo": 57, "kde_signalr": 57, "to_shift": 57, "single_info": 57, "dq_dict": 57, "dq_valu": 57, "bin_dict": 57, "dq_state": 57, "rescal": [57, 58, 64, 79, 82, 100], "aren": [57, 94, 95], "onlin": [57, 64], "benchmark_logr": 57, "falloff": [57, 71], "quiet": [57, 79], "sngls_list": 57, "unus": [57, 60, 75], "rework": 57, "neg": [57, 62, 72, 73, 76, 78], "slope": [57, 64], "kname": 57, "triger": 57, "lookup": 57, "ratio_kd": 57, "max_chirp_mass": [57, 75, 82, 100], "roughli": 57, "swamp": 57, "benchmark_logvol": 57, "reference_ifo": 57, "phasetd": 57, "expfitbg": 57, "alphabelow": 57, "lognoisel": 57, "rate_dict": 57, "s0": 57, "bunch": [57, 82], "template_num": 57, "alphai": 57, "ratei": 57, "largest": [57, 62, 64, 75, 77, 79], "alphamax": 57, "pregenerate_hist": 57, "2017": [57, 71], "3847": 57, "1538": 57, "4357": 57, "aa8f50": 57, "endtim": [57, 79, 88], "quadratur": [57, 64], "runtimeerror": 57, "statistic_opt_group": 57, "default_ranking_statist": 57, "default_ranking_statis": 57, "strain_opt_group": 57, "argument_group": 57, "stat_kwarg_list": 57, "kwarg1": 57, "value1": [57, 79, 90], "kwarg2": 57, "value2": [57, 79, 90], "kwarg3": 57, "value3": 57, "stat_kwarg_dict": 57, "_basethresholdclust": 57, "instanti": [57, 58, 67], "uint32": 57, "event_v": 57, "event_loc": 57, "kolmogorov": 57, "smirnov": 57, "sigma_alpha": 57, "fit_exponenti": 57, "xval": 57, "xrang": 57, "exponential_fit": 57, "expfit": 57, "exponential_fit_1": 57, "kstest": 57, "ks_stat": 57, "ks_pval": 57, "hypothesi": 57, "perfect": 57, "revers": [57, 58, 77, 86, 92], "x_t": 57, "par": 57, "minpar": 57, "maxpar": 57, "nbin": [57, 64], "binind": 57, "bins_idx": 57, "injfil": 57, "bankfil": 57, "trigfil": 57, "translat": [57, 73, 75, 82, 100], "popular": 57, "anitz": 57, "documentm": [57, 77], "tid": [57, 79], "parval": 57, "xml_file": [57, 79], "include_vers": 57, "comment": [57, 61, 62, 67, 82, 89, 90, 94], "segment_fil": [57, 79, 98], "veto_fil": [57, 67, 73, 79, 91], "backend_list": 58, "front": [58, 81, 82, 84, 95], "invec": 58, "outvec": 58, "nbatch": 58, "divis": 58, "pycbc_align": 58, "cufft": 58, "callback": [58, 65, 92], "out_callback": 58, "pycbc_cufft": 58, "_basefft": 58, "objet": 58, "intent": 58, "invoc": [58, 95, 97], "unlik": [58, 64, 76, 78, 82], "NOT": [58, 79, 91, 92, 100], "_baseifft": 58, "prec": 58, "ityp": 58, "otyp": 58, "mlvl": 58, "decid": [58, 79, 82, 90, 92, 95, 98, 100], "shortest": 58, "optgroup": 58, "fft_option": 58, "idtyp": 58, "odtyp": 58, "inplac": [58, 64, 76], "expend": 58, "action": [58, 61, 62, 73, 76, 79, 90], "prune": 58, "decomposit": 58, "coolei": 58, "93tukey_fft_algorithm": 58, "minor": [58, 81], "twiddl": 58, "transpos": 58, "n2": 58, "fftwf": 58, "pruned_fft": [58, 59, 92], "pretranspos": 58, "easier": [58, 87, 90, 95, 98], "explicit": [58, 64, 79, 82], "ni": [58, 61], "asid": 58, "fft_group": 58, "unbias": 59, "side": [59, 72, 73, 74, 76, 77, 78, 92], "autocovari": 59, "hat": [59, 67], "sum_": [59, 64, 78], "x_": [59, 78], "tuneabl": 59, "madra": 59, "sokal": 59, "109": 59, "1988": 59, "ceil": [59, 62, 78], "snr_threshold": [59, 77, 92], "chisq_bin": [59, 77, 92], "maxel": 59, "134217728": 59, "snr_abort_threshold": 59, "max_triggers_in_batch": 59, "batch": 59, "progress": [59, 82, 92, 95, 97, 99, 100], "reader": [59, 74], "high_frequency_cutoff": [59, 61, 64, 74, 76, 77, 78], "segment_list": 59, "template_output": 59, "use_clust": 59, "downsample_factor": [59, 92], "upsample_threshold": [59, 92], "upsample_method": 59, "gpu_callback_method": [59, 92], "cluster_funct": 59, "segnum": 59, "template_norm": 59, "hplu": [59, 78], "hcross": [59, 78], "hplus_norm": 59, "hcross_norm": 59, "h_quantiti": 59, "me": [59, 82], "IN": [59, 91, 92, 100], "trig_tim": [59, 79], "095": 59, "check_stat": 59, "anywai": [59, 97], "contamin": 59, "ligotimegp": [59, 60, 76, 78, 79], "bad": [59, 64, 84, 98], "hphccorr": 59, "hpnorm": [59, 77], "hcnorm": [59, 77], "analyse_slic": 59, "maximis": 59, "1603": 59, "02444": 59, "encourag": 59, "implicit": [59, 95], "hx": 59, "imaginari": [59, 74, 76, 78], "quick": [59, 67, 82], "overestim": [59, 78], "hpsigmasq": 59, "hcsigmasq": 59, "det_stat": 59, "1709": [59, 77], "09181": 59, "contrast": 59, "coinc_tim": [59, 68, 71], "coinc_threshold": 59, "lookback": [59, 71], "dal": 59, "canton": 59, "2021": 59, "2008": [59, 82], "07494": 59, "bayestar": [59, 79], "snr_seri": 59, "peak_tim": 59, "pvalu": 59, "realiz": [59, 95], "pvalue_satur": 59, "sigma2": 59, "nomin": 59, "onsourc": [59, 79, 98], "offsourc": [59, 73, 79, 98], "followup_info": 59, "did": [59, 61, 62], "usabl": 59, "fhigh": [59, 82], "df": [59, 78, 82, 100], "kmin": [59, 61, 64, 77, 78], "kmax": [59, 61, 64, 77, 78], "vec1": 59, "vec2": 59, "v1_norm": 59, "v2_norm": 59, "subsample_interpol": 59, "return_phas": 59, "fourth": 59, "spectral": [59, 72, 76, 77, 80, 94], "discontinu": [59, 78], "move": [59, 73, 88, 95, 96, 97], "dc": 59, "nyquist": [59, 64, 74, 76], "h_norm": 59, "corr_out": 59, "alloc": [59, 78, 95], "caller": 59, "minimize_scalar": 59, "loud": [59, 74], "duncan": [59, 73, 82], "brown": [59, 73, 82], "thesi": 59, "unnorm": [59, 77], "_basecorrel": 59, "neighbour": [59, 72], "tile": [59, 76, 77, 79, 92, 100], "percentag": [59, 73], "qplane_tile_dict": 59, "fseri": [59, 72, 78], "return_complex": [59, 64, 76], "tuppl": 59, "saml": 59, "constructor": [59, 65, 73, 79, 91], "fir": [59, 76, 83], "filtered_seri": [59, 76], "filter_ord": 59, "attenu": [59, 76, 92, 100], "typeerror": [59, 66, 67, 76], "time_seri": 59, "kaiser": [59, 66, 76, 78], "lobe": [59, 76], "zeros_offset": 59, "notch": [59, 76], "achiev": [59, 67, 72], "butterworth": 59, "resmpl": 59, "h_plus_sampl": 59, "h_plu": [59, 78], "qt": 59, "inconj": 59, "innoconj": 59, "arrlen": 59, "s_3": 59, "s_n": [59, 64], "s_4": 59, "s_m": 59, "omega": [59, 72], "bilinearli": 59, "100hz": 59, "1hz": 59, "filtered_data": 59, "zpk_filter": 59, "frame_src": [60, 74], "max_buff": [60, 74], "force_update_cach": [60, 74], "increment_update_cach": [60, 74], "filo": 60, "blocksiz": [60, 74], "timeout": [60, 74], "retri": [60, 67], "failur": [60, 67, 79, 88, 93, 94, 95, 97], "beyond": [60, 64, 78], "conta": 60, "guess": 60, "gpsx": 60, "valid_mask": 60, "valid_on_zero": 60, "ly": 60, "inact": 60, "mark": [60, 89], "url_typ": 60, "span": [60, 70, 79, 88, 92], "represent": [60, 66, 74, 75, 78, 79, 88], "h1_er_c00_l1": 60, "h1_ldas_c02_l2": [60, 90], "968995968": 60, "idq_channel_nam": 60, "idq_status_channel_nam": 60, "idq_threshold": [60, 74], "idq": 60, "succes": 60, "glob": [60, 95], "check_integr": [60, 61, 62], "sn": [60, 77], "checksum": [60, 79], "incompat": [60, 76], "unusu": 60, "circumst": 60, "gw170608": 60, "cmd": [61, 62, 73, 79], "config_group": [61, 62], "copy_info": [61, 62], "copy_metadata": [61, 62], "copy_sampl": [61, 62], "data_group": [61, 62], "effective_nsampl": [61, 62, 65], "extra_args_pars": [61, 62], "get_slic": [61, 62], "getattr": [61, 62], "injections_group": [61, 62], "log_evid": [61, 62], "read_config_fil": [61, 62], "read_data": [61, 62], "read_psd": [61, 62], "read_random_st": [61, 62], "sampler_group": [61, 62], "samples_from_cli": [61, 62], "samples_group": [61, 62], "write_command_lin": [61, 62], "write_config_fil": [61, 62], "write_data": [61, 62], "write_effective_nsampl": [61, 62], "write_inject": [61, 62], "write_kwargs_to_attr": [61, 62], "write_logevid": [61, 62], "write_psd": [61, 62, 79], "write_random_st": [61, 62], "write_stild": [61, 62], "write_strain": [61, 62], "format_attr": [61, 62], "is_burned_in": [61, 62], "last_iter": [61, 62], "raw_acl": [61, 62, 65], "raw_act": [61, 62, 65], "write_niter": [61, 62], "ensemble_read_raw_sampl": [61, 62], "nsamples_in_chain": [61, 62], "thin_samples_for_writ": [61, 62], "parsetempsarg": [61, 62], "run_end_tim": [61, 62], "run_start_tim": [61, 62], "update_checkpoint_histori": [61, 62], "write_run_end_tim": [61, 62], "write_run_start_tim": [61, 62], "read_pickled_data_from_checkpoint_fil": [61, 62], "write_pickled_data_into_checkpoint_fil": [61, 62], "write_raw_sampl": [61, 62], "read_acceptance_fract": [61, 62], "write_acceptance_fract": [61, 62], "read_acceptance_r": [61, 62], "read_acceptance_ratio": [61, 62], "swap_interv": [61, 62, 65], "write_acceptance_ratio": [61, 62], "write_temperature_data": [61, 62], "read_raw_samples_from_fil": [61, 62], "write_samples_to_fil": [61, 62], "read_beta": [61, 62], "read_ensemble_attr": [61, 62], "starting_beta": [61, 62, 65], "write_beta": [61, 62], "write_ensemble_attr": [61, 62], "delimit": [61, 62, 74, 76], "noinputfileerror": [61, 62], "printfileparam": [61, 62], "resultsargumentpars": [61, 62], "add_results_option_group": [61, 62], "parse_known_arg": [61, 62], "get_common_paramet": [61, 62], "get_file_typ": [61, 62], "injections_from_cli": [61, 62], "results_from_cli": [61, 62], "validate_checkpoint_fil": [61, 62], "epsieatadaptiveangular": [61, 63], "epsieadaptiveangular": [61, 63], "epsieangular": [61, 63], "epsieatadaptiveboundednorm": [61, 63], "epsieadaptiveboundednorm": [61, 63], "epsieboundednorm": [61, 63], "epsieadaptiveboundeddiscret": [61, 63], "epsieadaptivenormaldiscret": [61, 63], "epsieboundeddiscret": [61, 63], "epsienormaldiscret": [61, 63], "epsieatadaptivenorm": [61, 63], "epsieadaptivenorm": [61, 63], "epsienorm": [61, 63], "epsie_adaptive_from_config": [61, 63], "epsie_at_adaptive_from_config": [61, 63], "epsie_from_config": [61, 63], "get_epsie_adaptation_set": [61, 63], "get_epsie_discrete_successive_set": [61, 63], "get_param_boundari": [61, 63], "get_vari": [61, 63], "load_opt": [61, 63], "epsie_proposals_from_config": [61, 63, 65], "current_stat": [61, 64], "default_stat": [61, 64, 65], "extra_args_from_config": [61, 64], "get_current_stat": [61, 64], "logjacobian": [61, 64, 65], "logposterior": [61, 64], "logprior": [61, 64, 65], "prior_rv": [61, 64], "write_metadata": [61, 64, 65], "modelstat": [61, 64], "getstat": [61, 64], "getstatsdict": [61, 64], "samplingtransform": [61, 64], "check_for_cartesian_spin": [61, 64], "read_sampling_params_from_config": [61, 64], "basedatamodel": [61, 64], "lognl": [61, 64, 94], "likelihood_wrapp": [61, 64], "novaliddataerror": [61, 64], "check_for_nan": [61, 64], "check_validtim": [61, 64], "create_data_pars": [61, 64], "data_from_cli": [61, 64], "data_opts_from_config": [61, 64], "detectors_with_valid_data": [61, 64], "fd_data_from_strain_dict": [61, 64], "gate_overwhitened_data": [61, 64], "strain_from_cli_multi_ifo": [61, 64], "basegatedgaussian": [61, 64], "det_lognl": [61, 64], "det_lognorm": [61, 64], "get_gate_tim": [61, 64], "get_gate_times_hmeco": [61, 64], "get_gated_data": [61, 64], "get_gated_waveform": [61, 64], "get_residu": [61, 64], "get_waveform": [61, 64], "td_data": [61, 64], "get_gated_residu": [61, 64], "basegaussiannois": [61, 64], "ignore_failed_waveform": [61, 64], "psd_segment": [61, 64], "set_psd_seg": [61, 64], "whitened_data": [61, 64, 76], "det_cplx_loglr": [61, 64], "det_optimal_snrsq": [61, 64], "multi_loglikelihood": [61, 64], "multi_signal_support": [61, 64], "create_waveform_gener": [61, 64], "get_values_from_inject": [61, 64], "hstatic_param": [61, 64], "hvariable_param": [61, 64], "hierarchicalparam": [61, 64], "fullnam": [61, 64], "delim": [61, 64], "from_subnam": [61, 64], "model_delim": [61, 64], "others_lognl": [61, 64], "total_loglr": [61, 64], "update_all_model": [61, 64], "hpiter": [61, 64], "map_param": [61, 64], "phase_fac": [61, 64], "calculate_hihj": [61, 64], "combine_layout": [61, 64], "init_from_frequ": [61, 64], "likelihood_funct": [61, 64], "max_curvature_from_refer": [61, 64], "setup_antenna": [61, 64], "summary_product": [61, 64], "setup_bin": [61, 64], "likelihood_part": [61, 64], "likelihood_parts_det": [61, 64], "likelihood_parts_det_multi": [61, 64], "likelihood_parts_multi": [61, 64], "likelihood_parts_multi_v": [61, 64], "likelihood_parts_v": [61, 64], "likelihood_parts_v_pol": [61, 64], "likelihood_parts_v_pol_tim": [61, 64], "likelihood_parts_v_tim": [61, 64], "likelihood_parts_vector": [61, 64], "likelihood_parts_vectorp": [61, 64], "likelihood_parts_vectort": [61, 64], "snr_predictor": [61, 64], "snr_predictor_dom": [61, 64], "distmarg": [61, 64], "distance_interpol": [61, 64], "distance_margin": [61, 64], "draw_ifo": [61, 64], "draw_sky_tim": [61, 64], "draw_tim": [61, 64], "get_precalc_antenna_factor": [61, 64], "marginalize_loglr": [61, 64], "premarg_draw": [61, 64], "reset_vector_param": [61, 64], "setup_margin": [61, 64], "setup_peak_lock": [61, 64], "snr_draw": [61, 64], "draw_sampl": [61, 64, 65], "marginalize_likelihood": [61, 64], "setup_distance_marg_interpol": [61, 64], "str_to_bool": [61, 64], "str_to_tupl": [61, 64], "callmodel": [61, 64, 65], "available_model": [61, 64], "get_model": [61, 64], "read_from_config": [61, 64], "register_model": [61, 64], "resume_from_checkpoint": [61, 65], "create_new_output_fil": [61, 65], "initial_dist_from_config": [61, 65], "setup_output": [61, 65], "cubemodel": [61, 65], "log_likelihood": [61, 65], "prior_transform": [61, 65], "call_global_loglikelihood": [61, 65], "call_global_logprior": [61, 65], "setup_cal": [61, 65], "base_shap": [61, 65], "checkpoint_from_config": [61, 65], "checkpoint_sign": [61, 65], "ckpt_signal_from_config": [61, 65], "clear_sampl": [61, 65], "get_thin_interv": [61, 65], "max_samples_per_chain": [61, 65], "p0": [61, 65], "po": [61, 65], "set_burn_in": [61, 65], "set_burn_in_from_config": [61, 65], "set_p0": [61, 65], "set_start_from_config": [61, 65], "set_state_from_fil": [61, 65], "set_target_from_config": [61, 65], "set_thin_interval_from_config": [61, 65], "target_eff_nsampl": [61, 65], "target_niter": [61, 65], "thin_safety_factor": [61, 65], "write_result": [61, 65], "blob_data_to_dict": [61, 65], "ensemble_compute_acf": [61, 65], "ensemble_compute_acl": [61, 65], "get_optional_arg_from_config": [61, 65], "raw_samples_to_dict": [61, 65], "betas_from_config": [61, 65], "acl_from_raw_acl": [61, 65], "read_betas_from_hdf": [61, 65], "call_reconstruct": [61, 65], "logz": [61, 65], "logz_err": [61, 65], "estimate_nmcmc": [61, 65], "sample_rwalk_mod": [61, 65], "burn_in_class": [61, 65], "calculate_logevid": [61, 65], "check_if_finish": [61, 65], "get_posterior_sampl": [61, 65], "importance_dlogz": [61, 65], "importance_logz": [61, 65], "transform_prior": [61, 65], "nessaimodel": [61, 65], "from_unit_hypercub": [61, 65], "log_prior": [61, 65], "new_point": [61, 65], "new_point_log_prob": [61, 65], "to_dict": [61, 65], "to_live_point": [61, 65], "to_unit_hypercub": [61, 65], "checkpoint_callback": [61, 65], "get_default_kwd": [61, 65], "adaptation_lag": [61, 65], "adaptation_tim": [61, 65], "ensembl": [61, 62, 65], "scale_factor": [61, 65], "compare_kd": [61, 65], "run_sampl": [61, 65], "call_model": [61, 64, 65], "resample_equ": [61, 65], "load_from_config": [61, 65], "burn_in_test": 61, "test_is_burned_in": 61, "test_burn_in_it": 61, "not_burned_in_it": 61, "samples1": 61, "samples2": 61, "thershold": 61, "lnps_per_walk": 61, "burn_in_idx": 61, "gone": 61, "past": [61, 98], "halfwai": [61, 73], "logpost": 61, "kullback": 61, "leibler": 61, "diverg": 61, "hist_min": 61, "hist_max": 61, "hist_bin": 61, "fd": [61, 78, 83, 86], "doan": 61, "rice": 61, "sturg": 61, "freedman": 61, "diaconi": 61, "hist_rang": 61, "kernel": [61, 95], "pdf1": 61, "718281828459045": 61, "nat": 61, "jensen": 61, "shannon": 61, "pdf2": 61, "arithmet": 61, "am": 61, "billion": 61, "hme": 61, "formal": [61, 69], "infinit": [61, 72, 78], "prone": 61, "mcmc_std": 61, "simpson": 61, "thermodynam": [61, 65], "trapezoid": 61, "trapzoid": 61, "trapezoid_correct": 61, "gelman": 61, "rubin": 61, "diagnost": [61, 79, 94, 95, 96], "auto_burn_in": 61, "univari": [61, 64], "reduct": [61, 95], "psrf": 61, "conerverg": 61, "calucl": 61, "ncalcul": 61, "seg_length": 61, "end_idx": 61, "ref_start": 61, "ref_end": 61, "seg_start": 61, "narg": [61, 62, 76], "dest": [61, 62, 76], "_label": 61, "opton": 61, "add_argu": 61, "shlex": 61, "parameters_label": 61, "odot": 61, "z_arg": 61, "z_arg_label": 61, "latex": [61, 73], "colour": [61, 70], "plot_posterior": [61, 79, 93, 94], "parameter_nam": 62, "read_arg": 62, "write_arg": 62, "former": [62, 82, 93, 94], "skip_arg": [62, 64], "create_miss": 62, "array_class": 62, "return_cp": 62, "restart": [62, 93, 94], "stringio": 62, "set_stat": 62, "defaut": 62, "overriden": [62, 78, 79, 82, 90, 92], "config_pars": [62, 79], "atom": 62, "subgroup": 62, "recurs": 62, "overwritten": [62, 67, 74, 78, 88, 90], "injection_fil": [62, 64, 66, 79, 82, 92, 100], "lnz": [62, 65], "dlnz": [62, 65], "dlog_evid": 62, "random_st": 62, "get_stat": 62, "stilde_dict": [62, 64, 74], "strain_dict": [62, 64, 72, 74], "unicod": 62, "decod": 62, "obj": [62, 73, 78], "bytes_": 62, "baseinfer": 62, "thin_": 62, "start_it": 62, "thin_bi": 62, "sampel": 62, "unthin": 62, "vararg": 62, "commonmcmcmetadatio": 62, "fewer": [62, 64], "base_nest_fil": 62, "multitemperedmcmcio": 62, "unix": [62, 95], "began": 62, "histori": [62, 65, 79, 98], "checkpoint_histori": 62, "_update_sampler_histori": 62, "curent": 62, "attrbut": 62, "pickel": 62, "raw_sampl": [62, 65], "unweight": 62, "shuffl": 62, "acceptance_fract": 62, "attemp": 62, "acceptance_ratio": 62, "swap_index": 62, "importance_lnz": 62, "importance_dlnz": 62, "immedi": [62, 75, 78, 79, 82, 95, 97], "behvior": 62, "defaultparam": 62, "autoparamlabel": 62, "preload": 62, "nor": [62, 67, 76, 93, 95], "releat": 62, "ioerror": 62, "file_typ": 62, "injection_samples_map": [62, 79], "remap": 62, "load_sampl": 62, "fp_all": 62, "samples_al": 62, "checkpoint_fil": 62, "backup_fil": 62, "check_nsampl": [62, 65], "invalid": [62, 66, 72, 74, 92, 95], "checkpoint_valid": 62, "adaptation_dur": 63, "componentwis": 63, "start_step": 63, "target_r": 63, "jump_interv": 63, "atadaptiveangular": 63, "adaptiveboundednorm": 63, "with_boundari": 63, "adaptive_angular_propos": 63, "adaptiveangularpropos": 63, "adaptiveangular": 63, "adaptive_angular": 63, "cov": [63, 64], "jump_interval_dur": 63, "atadaptiveboundednorm": 63, "adaptiveboundedpropos": 63, "adaptive_bounded_propos": 63, "adaptive_bounded_norm": 63, "boundednorm": 63, "mchrip": 63, "adaptiveboundeddiscret": 63, "adaptive_bounded_discret": 63, "prior_width": 63, "adaptivenormaldiscret": 63, "adaptive_normal_discret": 63, "boundeddiscret": 63, "bounded_discret": 63, "normaldiscret": 63, "atadaptivenorm": 63, "atadaptivepropos": 63, "adaptivepropos": 63, "adaptive_propos": 63, "adaptivenorm": 63, "adaptive_norm": 63, "boundary_arg_nam": 63, "adaptivesupport": 63, "adaptation_decai": 63, "start_iter": 63, "basepropos": 63, "AT": 63, "train": 63, "global": [63, 65, 73, 82], "pop": [63, 71], "var_": 63, "eggbox": 64, "prod_": 64, "theta_": 64, "multivariate_norm": 64, "covari": [64, 75], "8628770664093453": 64, "rosenbrock": 64, "volcano": 64, "bay": 64, "theorem": [64, 72], "posteror": 64, "_loglikelihood": 64, "_noprior": 64, "replace_paramet": 64, "understood": [64, 66, 67, 78, 92, 93], "parameter": 64, "sole": 64, "hasn": [64, 65], "cast": [64, 65, 67, 78], "ride": 64, "postion": 64, "impli": [64, 95], "assertionerror": [64, 79], "mathbf": 64, "p_x": 64, "p_y": 64, "ij": 64, "g_i": 64, "y_j": 64, "spinn": 64, "section_group": 64, "logitspin1_a": 64, "replaced_param": 64, "mofdel": 64, "no_save_data": 64, "propeti": [64, 67], "_loglr": 64, "_lognl": 64, "return_sh_hh": 64, "loop_polar": 64, "base_model": [64, 72], "data_sect": 64, "contin": 64, "unwrap": [64, 78], "fold": [64, 79], "symmetri": 64, "gps_start": 64, "gps_end": 64, "shift_to_valid": 64, "max_shift": 64, "nearbi": [64, 75, 82], "use_start": 64, "use_end": 64, "check_for_valid_tim": 64, "shift_psd_times_to_valid": 64, "err_on_missing_detector": 64, "psd_strain_dict": 64, "psd_": 64, "_time": 64, "dctionari": 64, "filter_flow": 64, "wre": 64, "wasn": 64, "pad_data": [64, 82, 92, 100], "psd_estim": [64, 72], "psd_from_cli_multi_ifo": 64, "psd_dict": 64, "concurr": 64, "sleep": 64, "inpaint": 64, "highpass_waveform": 64, "d_i": 64, "n_i": 64, "alpha_i": 64, "gatefunc": 64, "hmeco": 64, "t_gate_start": 64, "t_gate_end": 64, "residu": 64, "haven": 64, "analyzed_detector": [64, 94], "_analysis_seg": 64, "_psd_segment": 64, "polarization_sampl": 64, "gatedgaussian": 64, "excis": [64, 76], "2105": 64, "05238": 64, "unwhiten": 64, "prependend": 64, "a__b__lognl": 64, "det_frame_waveform": 64, "sum_i": 64, "h_i": 64, "a_i": 64, "b_i": 64, "k_": 64, "tild": 64, "_i": 64, "_n": 64, "lfloor": 64, "rfloor": 64, "manual": [64, 67, 72, 79, 93, 96], "cancel": 64, "pypsd": 64, "seglen": 64, "fmin": [64, 75, 78], "38": [64, 78], "76": [64, 78], "tsig": 64, "2f": 64, "282": 64, "h1_cplx_loglr": 64, "177": 64, "00j": 64, "h1_optimal_snrsq": 64, "355": 64, "52": 64, "l1_cplx_loglr": 64, "104": 64, "67": [64, 85], "l1_optimal_snrsq": 64, "209": 64, "77": 64, "toggl": [64, 78], "835397": 64, "8757405131": 64, "101": 64, "ii": [64, 72, 78], "enumer": 64, "283": 64, "92": 64, "opitm": 64, "opimt": 64, "generator_class": 64, "fdomain": 64, "update_cp": 64, "encas": 64, "quot": [64, 73], "h_": [64, 78, 79], "model1": 64, "model2": 64, "underscor": 64, "event1_event2__foo": 64, "__data": 64, "prece": 64, "hierachicalparam": 64, "subdata": 64, "possible_model": 64, "event1__mass": 64, "event1_event2__mass": 64, "e1_e2__foo": 64, "model_label": 64, "subp": 64, "stellar": 64, "variant": 64, "em": [64, 82, 100], "rec": [64, 67], "constitu": 64, "crossterm": 64, "h_j": 64, "aris": [64, 74, 80], "coa_phase_sampl": 64, "n_d": 64, "0_i": 64, "equiv": 64, "int_0": 64, "gather": [64, 82, 91, 92, 94, 97, 99, 100], "int_": 64, "i_0": 64, "bessel": 64, "apparoxim": 64, "fiducial_param": 64, "earth_rot": 64, "earth_rotation_mod": 64, "coarser": 64, "1806": 64, "08792": 64, "fiduci": [64, 78, 85, 86], "figucial_param": 64, "param_ref": 64, "powerlaw": 64, "tune": [64, 82], "predetermin": 64, "hihj": 64, "h00": 64, "fbin_ind": 64, "fedg": 64, "summari": [64, 73, 79, 88, 90, 93, 94, 95, 96, 97], "wf": [64, 79, 85, 86], "supportedi": 64, "f_full": 64, "f_lo": 64, "f_hi": 64, "ep": 64, "barak": 64, "venumadhav": 64, "tunabl": 64, "fbin": 64, "loop": [64, 67, 74, 75, 79], "dtc": 64, "b0": 64, "dtc2": 64, "hp2": 64, "h002": 64, "fp2": 64, "fc2": 64, "hc2": 64, "pol_phas": 64, "tstart": 64, "bookkeep": 64, "transpar": 64, "peak_snr_threshold": 64, "precalculate_marginalization_point": 64, "incoher": 64, "sh_total": 64, "hh_total": 64, "skip_vector": 64, "return_peak": 64, "prechosen": 64, "set_loglr": 64, "redraw": 64, "marginalize_sky_initial_sampl": 64, "marginin": 64, "appopri": 64, "logl": [64, 65], "hh": 64, "kwag": 64, "peak_lock_ratio": 64, "peak_lock_region": 64, "bother": 64, "inclu": 64, "logw": 64, "favor": 64, "reconstuct": 64, "loglikehood": 64, "dist_marg": 64, "snr_rang": 64, "dist_loc": 64, "dist_weight": 64, "sval": 64, "ftype": 64, "callstat": 64, "return_all_stat": 64, "promot": 64, "model_nam": 64, "loglikelihood_funct": 65, "copy_prior": 65, "iteraiton": 65, "otherw": 65, "arrrai": 65, "samples_fil": [65, 79], "mape": 65, "eff_nsampl": 65, "stat_nam": 65, "nstat": 65, "start_index": [65, 78], "end_index": 65, "per_walk": 65, "autocorrl": 65, "min_nsampl": 65, "nd": 65, "temeratur": 65, "accessor": 65, "no_save_st": 65, "run_kwd": 65, "extra_kwd": 65, "internal_kwd": 65, "finalz": 65, "maxit": 65, "logl_max": 65, "n_effect": 65, "rwalk2": 65, "nact": 65, "autorcorrel": 65, "first_update_min_ncal": 65, "first_update_min_neff": 65, "drop": [65, 73, 82, 100], "ball": 65, "bond": 65, "initial_distribut": 65, "accept_ratio": 65, "old_act": 65, "acc": 65, "adap": 65, "johnveitch": 65, "farr": 65, "jl": 65, "sample_rwalk": 65, "bilbi": 65, "logpost_funct": 65, "ensemblesampl": 65, "ptsampler": 65, "ladder": 65, "geometr": 65, "parallelizt": 65, "samlper": 65, "usr2": 65, "unfortun": 65, "regardless": [65, 82], "default_propos": 65, "default_proposal_arg": 65, "gievn": 65, "default_props": 65, "checkpointin": 65, "subsect": [65, 76, 79, 98, 99], "epsieptsampl": 65, "importance_nested_sampl": 65, "evidence_toler": 65, "sampling_effici": 65, "criterion": 65, "hypercub": 65, "readthedoc": 65, "flowsampl": 65, "default_kwd": 65, "tmax": 65, "make_ladd": 65, "stretch": [65, 72, 88], "_chain": 65, "float1": 65, "float2": 65, "intial": [65, 74], "startup": 65, "iterative_kde_sampl": 65, "min_refinement_step": 65, "max_refinement_step": 65, "offbase_fract": 65, "update_group": 65, "max_kde_sampl": [65, 73], "conclus": 65, "kde1": 65, "kde2": 65, "kde_new": 65, "logp": 65, "update_param": 65, "ksampl": 65, "logwt": 65, "log_dir": 65, "stepsampl": 65, "enable_plot": 65, "hit": 65, "sim_fil": [66, 71], "hdf_group": [66, 79], "_hdfinjectionset": 66, "distance_scal": 66, "inj_filter_rejector": [66, 74, 78], "injection_sample_r": [66, 82, 92, 100], "detector_gps_tim": 66, "h1_gps_time": 66, "ref_point": 66, "absmax": 66, "detector_phase_shift": 66, "detector_amp_scal": 66, "slice_start": 66, "slice_end": 66, "left_taper_width": 66, "right_taper_width": 66, "incoherent_from_fil": 66, "siminspiralt": [66, 67], "write_param": 66, "hdfinjectionset": 66, "simburstt": 66, "foat": 66, "apx": [66, 85], "hate": 66, "siminspir": 66, "coars": [66, 72, 82, 92], "chirp_time_window": 66, "match_threshold": 66, "coarsematch_deltaf": 66, "coarsematch_fmax": 66, "seg_buff": 66, "unncessari": 66, "inj_waveform": 66, "t_num": [66, 78], "justifi": 66, "ther": 66, "proce": [66, 90, 99], "fixm": [66, 71, 79, 82, 88, 92, 99], "columnlist": 67, "filter_func": 67, "col": [67, 73], "concaten": 67, "legaci": [67, 91, 92, 100], "pylal": 67, "snglinspiralutil": 67, "coinc_fil": [67, 73, 79], "bank_fil": [67, 71, 73, 77, 79, 92, 97], "sngl_file": [67, 79], "n_loudest": [67, 79], "has_inc": 67, "ifos_list": 67, "file_nam": [67, 73, 76], "libver": 67, "userblock_s": 67, "swmr": 67, "rdcc_nslot": 67, "rdcc_nbyte": 67, "rdcc_w0": 67, "track_ord": 67, "fs_strategi": 67, "fs_persist": 67, "fs_threshold": 67, "fs_page_s": 67, "page_buf_s": 67, "min_meta_keep": 67, "min_raw_keep": 67, "lock": 67, "alignment_threshold": 67, "alignment_interv": 67, "meta_block_s": 67, "return_data": 67, "premask": 67, "return_tupl": 67, "colum": 67, "gating_veto_window": 67, "trigger_id": [67, 79], "trig_fil": [67, 73, 79, 84], "filter_rank": 67, "filter_threshold": 67, "logic_mask": 67, "cname": 67, "plottabl": 67, "rank_nam": 67, "rank_method": 67, "ranking_threshold": 67, "cluster_window": [67, 74, 92], "loudest": [67, 73, 79, 89, 92, 95], "trigger_id1": 67, "trigger_id2": 67, "decimation_factor": 67, "memfp": 67, "dsetnam": 67, "stream": 67, "protocol": 67, "picklabl": 67, "grp": 67, "hdfile": [67, 71], "chisq_choic": 67, "h5file": 67, "dic": 67, "deal": [67, 68, 75, 88, 95], "start_handl": 67, "uri_localnam": 67, "qname": 67, "__orig_endelementn": 67, "ilwdchar": 67, "__orig_startcolumn": 67, "use_in": 67, "ilwd": 67, "strip_ilwdchar": 67, "__orig_startstream": 67, "tablestream": 67, "__orig_startt": 67, "program_nam": 67, "sane": 67, "col_nam": 67, "col_typ": 67, "sensibl": [67, 92], "process_id": 67, "columnnam": 67, "contenthandl": 67, "fly": [67, 95], "loos": 67, "_outermost_": 67, "decor": 67, "snglinspir": [67, 75, 78], "event_id": [67, 79], "nevent": 67, "searchsummari": 67, "seachsummari": 67, "coinc_ifo": 67, "gracedb_serv": 67, "extra_str": 67, "allski": 67, "annot": 67, "servic": [67, 95, 97], "recarrai": 67, "gravitationa": 67, "default_zero": 67, "obviou": [67, 95], "subfield": 67, "c0": [67, 74], "unexpect": 67, "misspel": 67, "fooo": 67, "narf": 67, "similarili": 67, "_virtualfield": 67, "preced": [67, 79, 81, 98], "predefin": [67, 79, 100], "19866933": 67, "3271947": 67, "41557185": 67, "47942554": 67, "cat": [67, 95, 97], "bankhdf": 67, "bank2hdf": [67, 89, 95], "1117400416": 67, "928800": 67, "71731389": 67, "10231435": 67, "99999857": 67, "67488706": 67, "00531888": 67, "11106491": 67, "7173138856887817": 67, "2124452590942383": 67, "1023143529891968": 67, "0074082612991333": 67, "9999985694885254": 67, "0578444004058838": 67, "6748870611190796": 67, "1758257150650024": 67, "0053188800811768": 67, "0020891427993774": 67, "111064910888672": 67, "0143394470214844": 67, "f4": 67, "000025987625122": 67, "0000133514404297": 67, "0002814531326294": 67, "0005437135696411": 67, "999999523162842": 67, "371169090270996": 67, "4072519540786743": 67, "4617927074432373": 67, "sim_tabl": 67, "sim_arrai": 67, "27440691": 67, "85058105": 67, "61507106": 67, "0504961": 67, "33554196": 67, "02732205": 67, "spintaylort2": 67, "274406909942627": 67, "6340370178222656": 67, "8505810499191284": 67, "8336880207061768": 67, "6150710582733154": 67, "2336490154266357": 67, "11607": 67, "0504961013793945": 67, "6019821166992188": 67, "11608": 67, "3355419635772705": 67, "2164380550384521": 67, "11609": 67, "0273220539093018": 67, "2453839778900146": 67, "i8": 67, "optimal_snr": 67, "tricki": 67, "essenti": [67, 75, 82], "pointer": [67, 75, 76, 91, 92, 99, 100], "flexibl": [67, 82, 90, 97], "question": [67, 82, 89], "answer": 67, "stackoverflow": 67, "relax": 67, "substanti": 67, "assubarrai": 67, "fi": [67, 71, 93, 94], "subarrai": 67, "new_arrai": 67, "2954373": 67, "1366472": 67, "attrnam": 67, "persist": [67, 71], "whenev": [67, 69, 82], "virut": 67, "modulo": 67, "fromarrai": 67, "cast_to_dtyp": 67, "tablenam": 67, "validcolumn": 67, "fromrecord": 67, "boolen": 67, "return_valu": 67, "leftover_indic": 67, "popluat": 67, "leftov": 67, "s8": 67, "seobnr_rom_doublespin": 67, "s23": 67, "int64": 67, "possible_field": 67, "quicksort": 67, "mergesort": 67, "heapsort": 67, "additional_field": 67, "field_kwarg": 67, "_fieldarraywithdefault": 67, "warr": 67, "d_l": 67, "download_fil": 67, "flaki": 67, "primarili": 68, "pycbc_optimize_snr": 68, "xi": [68, 75, 82], "argv": 68, "f_end": 68, "raise_err": 68, "snr_series_dict": 68, "cli_arg": 68, "initial_point": 68, "ns_compact": 69, "ns_b_mass": 69, "bh_spin_mag": 69, "bh_spin_pol": 69, "ns_mass": 69, "regim": [69, 82], "exceed": [69, 92], "ns_g_mass": 69, "ns_sequenc": 69, "equilibrium": 69, "eos_nam": 69, "grav": [69, 82], "msun": [69, 82], "max_ns_g_mass": 69, "massiv": [69, 82], "solver": 69, "perez": 69, "giz": 69, "pg": 69, "incl": 69, "bardeen": 69, "press": 69, "teukolski": 69, "1972": 69, "articl": 69, "adsab": 69, "harvard": 69, "1972apj": 69, "178": 69, "347b": 69, "polynomi": 69, "pm": [69, 73], "qquad": 69, "isco_eq": 69, "equatori": 69, "frequencyseriesseri": 70, "psd_name": [70, 72], "low_fr": 70, "low_frequency_cutof": 70, "sd": 70, "filter_dur": 70, "nosi": 70, "disjoint": 70, "t2100060": 71, "coinc_typ": 71, "bin_param": 71, "bin_lo": 71, "bin_hi": 71, "full_fil": 71, "chunk": [71, 72, 73, 74, 92, 95, 100], "ctime": 71, "statval": 71, "tdict": 71, "cstring": 71, "test_tim": 71, "exactli": [71, 76, 95], "maxval": 71, "bg": 71, "ctstring": 71, "bg_rate": 71, "sg_rate": 71, "inj_fil": [71, 73, 79, 91], "fg_file": [71, 79], "mincount": 71, "hi": 71, "bankf": 71, "lo_mchirp": 71, "hi_mchirp": 71, "ct": 71, "zerolag": [71, 79], "poisson": [71, 82], "injstat": 71, "rhomin": 71, "fullf": 71, "tmplt_filter": 71, "mc_lo": 71, "mc_hi": 71, "cty": 71, "ultim": [71, 95], "ratesandpopul": 71, "o1_script": 71, "lvc_rates_calc_posterior": 71, "t1700029": 71, "texunit": 71, "mbox": 71, "texsymb": 71, "rv_continu": 71, "array_lik": 71, "logbf": 71, "laguerre_n": 71, "lambda0": 71, "lambda_1": 71, "plot_styl": 71, "semilogx": 71, "plot_extens": 71, "middl": [71, 79], "credible_interv": 71, "rankstat": 71, "p_b": 71, "ntop": 71, "plot_lim": 71, "spec_json": 71, "json": 71, "exp_fac": 71, "spec_d": 71, "prerequisit": 71, "astro": 71, "calc": 71, "bank_data": [71, 79], "netsnr": 71, "horizon": [71, 74], "ref_dhor": 71, "sens_ifo": 71, "trig_ifo": 71, "padata": 71, "trdata": 71, "p_astro": 71, "p_terr": 71, "specfil": 71, "trigger_data": 71, "satur": 71, "op": 71, "despatch": 71, "live_pastro_group": 71, "z_arrai": 71, "merger_r": 71, "average_tim": 71, "rate_den": 71, "maxz": 71, "npoint": 71, "3yr": 71, "coalescence_rate_interp": 71, "peas": 71, "02717v3": 71, "redshit": 71, "dt_dz": 71, "dz": 71, "total_r": 71, "dl": 71, "stai": [71, 79, 91], "almost": [71, 76, 95], "sfr_func": 71, "td_model": 71, "rho_loc": 71, "symbol": [71, 95], "sfr": 71, "convolution_tran": 71, "rho_z": 71, "a2": 71, "norm_coalescence_r": 71, "timescal": [71, 78], "radiat": [71, 78], "p_t": 71, "msolar": 71, "yr": 71, "0804": 71, "4008": 71, "madau": 71, "dickinson": 71, "1403": 71, "0007": 71, "k_imf": 71, "66": 71, "frago": 71, "kimf": 71, "imf": 71, "salpet": 71, "broken": [71, 92, 95, 96, 99], "kroupa": 71, "1606": 71, "07887": 71, "1706": 71, "07053": 71, "occurr": 71, "log_fg_ratio": 71, "mu_log_vt": 71, "sigma_log_vt": 71, "maxfg": 71, "skew": 71, "achiv": 71, "ff": 71, "p_m1_m2": 71, "threhold": 71, "fname_statmap": 71, "fname_bank": 71, "statmap": [71, 79, 89, 95], "destin": [71, 76, 79], "minrp": 71, "maxrp": 71, "min_z": 71, "max_z": 71, "z_astro": 71, "mchirp_sampl": 71, "model_pdf": 71, "strategi": 71, "injection_chunk": 71, "vt": 71, "low_dist": 71, "high_dist": 71, "lomass": 71, "himass": 71, "lomass_2": 71, "himass_2": 71, "high_spin": 71, "v_min": 71, "v_max": 71, "hdffile": 71, "s_dist": 71, "d_dist": 71, "containign": 71, "low_freq_cutoff": [72, 74], "uniti": [72, 76], "simnoisepsd": 72, "taiji": 72, "tianqin": 72, "lcst": 72, "sg": [72, 78, 92], "tn": 72, "man": [72, 95], "1088": 72, "1361": 72, "6382": 72, "ab1101": 72, "0264": 72, "9381": 72, "035010": 72, "102": 72, "063021": 72, "043003": 72, "107": 72, "064021": 72, "2500000000": 72, "3e": 72, "om": 72, "csd": 72, "56": 72, "radler": 72, "58": 72, "galact": 72, "59": 72, "3000000000": 72, "8e": 72, "173205080": 72, "75688773": 72, "f_": [72, 78], "fp_sq_approx": 72, "fp_sq_numer": 72, "response_tdi": 72, "mhz": 72, "low_freq_compon": 72, "high_freq_compon": 72, "omega_len": 72, "s_acc_nu": 72, "s_oms_nu": 72, "scird": 72, "114": 72, "41": 72, "utilit": 72, "But": [72, 76, 82], "inconsist": 72, "max_filter_len": [72, 76], "trunc_method": [72, 76], "grain": [72, 82], "0509116": 72, "bia": 72, "avg_method": 72, "num_seg": 72, "require_exact_data_fit": 72, "freq_data": 72, "noise_data": 72, "freq_arr": 72, "herz": 72, "ifo_str": 72, "root_nam": 72, "short_seg": 72, "psd_long_seg": 72, "psd_durat": [72, 74], "psd_stride": [72, 74], "psd_avg_method": [72, 74], "low_freq": 72, "high_freq": 72, "composit": 72, "f_high": 72, "rough": [72, 78, 82], "parsev": 72, "480": 72, "psd_var": 72, "filt": 72, "plong": 72, "srate": 72, "convolv": [72, 76], "full_filt": 72, "varaibl": 72, "data_trim": 72, "short_strid": 72, "adjac": 72, "trim": 72, "artefact": 72, "recreat": 72, "psd_var_timeseri": 72, "substitut": [72, 78], "m_": 72, "fd_segment": 72, "dyn_range_factor": 72, "strain_seg": 72, "psd_model": 72, "asd_fil": [72, 82, 92, 100], "psd_segment_length": [72, 74, 82, 92, 100], "psd_segment_strid": [72, 82, 92, 100], "psd_inverse_length": [72, 74, 82, 92, 100], "psd_output": [72, 82, 92, 100], "frequnci": 72, "length_dict": 72, "delta_f_dict": 72, "low_frequency_cutoff_dict": 72, "psd_and_tim": 72, "include_data_opt": 72, "optiongroup": [72, 74, 75, 79, 90], "utc_tim": 73, "alog": 73, "resp": 73, "return_str": 73, "file_list": 73, "file_list_fil": 73, "trigger_dict": 73, "sec": [73, 79], "fillvalu": [73, 79], "htmlparser": 73, "sanit": 73, "fig_kwd": 73, "keword": 73, "mpld3": 73, "pluginbas": 73, "register_plugin": 73, "prototyp": 73, "requiredprop": 73, "defaultprop": 73, "get_el": 73, "mousedown": 73, "hoffset": 73, "voffset": 73, "css": 73, "linehtmltooltip": 73, "button": [73, 97], "typeof": 73, "undefin": 73, "dt0": 73, "last_t": 73, "dt1": 73, "last_": 73, "zoom_x": 73, "foreach": 73, "bind": 73, "zoomplugin": 73, "mpld3_zoomplugin": 73, "zoombutton": 73, "buttonfactori": 73, "buttonid": 73, "sticki": 73, "scroll": 73, "drag": 73, "onactiv": 73, "ondeactiv": 73, "ondraw": 73, "setstat": 73, "icon": 73, "enable_zoom": 73, "disable_zoom": 73, "pointhtmltooltip": 73, "premad": 73, "val_max": 73, "mpl": 73, "rcparam": 73, "psddict": 73, "output_filenam": [73, 99], "f_min": 73, "pygrb": [73, 79, 82, 97], "trig_valu": 73, "inj_valu": 73, "deterim": 73, "snr_val": 73, "vert_spik": 73, "wkflow": 73, "science_seg": [73, 79, 92, 95, 100], "trigger_nam": 73, "out_dir": [73, 79, 91, 98, 99], "coherent_seg": 73, "fail_criterion": 73, "cont": 73, "shade_cont_valu": 73, "seg_fil": [73, 79, 88, 98], "seg_dict": 73, "slide_dict": [73, 79], "trial_dict": 73, "bestnr": 73, "veto_cat": 73, "geocent_tim": 73, "57": 73, "ph": 73, "trigs_or_inj": 73, "hdf_file_path": 73, "slide_id": 73, "table_nam": 73, "time_veto_max_stat": 73, "trig_stat": 73, "total_tri": 73, "deterin": 73, "num_mc_inj": 73, "inj_dist": 73, "cal_err": 73, "wf_err": 73, "max_dc_cal_err": 73, "trigger_fil": [73, 79], "bank_path": 73, "attach": [73, 78, 95], "tab": [73, 93, 95], "segmentlistdict": [73, 79, 98], "glitchgram": 73, "subtempl": 73, "gatewai": [73, 79, 91, 92, 99], "samples_arrai": 73, "use_kombin": 73, "kdearg": 73, "kombin": 73, "clustered_kd": 73, "optimized_kd": 73, "height_ratio": 73, "width_ratio": 73, "no_diagon": 73, "gridspec": 73, "axis_dict": 73, "xparam": 73, "yparam": 73, "plot_dens": 73, "plot_contour": 73, "viridi": 73, "contour_color": 73, "label_contour": 73, "contour_linestyl": 73, "exclude_region": 73, "colormap": [73, 94], "exclue_region": 73, "fillcolor": 73, "grai": 73, "linecolor": 73, "navi": 73, "plot_marginal_lin": 73, "expected_valu": 73, "expected_color": 73, "plot_min": 73, "plot_max": 73, "pecentil": 73, "scalefac": 73, "font": 73, "expected_paramet": 73, "expected_parameters_color": 73, "plot_margin": 73, "plot_scatt": 73, "plot_maxl": 73, "marginal_percentil": 73, "contour_percentil": 73, "marginal_titl": 73, "marginal_linestyl": 73, "zval": 73, "show_colorbar": 73, "cbar_label": 73, "scatter_cmap": 73, "plasma": 73, "density_cmap": 73, "hist_color": 73, "line_color": 73, "fill_color": 73, "maginal_percentil": 73, "zvalu": 73, "maxmimum": 73, "fiducial_width": 73, "fiducial_height": 73, "maxtick": 73, "tick": 73, "270": 73, "sidewai": 73, "snrdict": 73, "displai": [73, 79, 95, 97], "trail": [73, 76], "plus_error": 73, "use_scientific_not": 73, "include_error": 73, "use_relative_error": 73, "ndec": 73, "round": [73, 76, 78, 82, 92], "log10": [73, 93], "1f": 73, "spot": 73, "enclos": 73, "9278372067613837e": 73, "2351435286500487e": 73, "93": 73, "pm5": 73, "000000000000000000000393": 73, "err_plu": 73, "2700310560051804e": 73, "928": 73, "083": 73, "max_sig": 73, "sortabl": 73, "page_s": 73, "format_str": 73, "icu": 73, "tableo": 73, "cell": 73, "executable_nam": [73, 90], "executable_fil": 73, "minimum_frequ": 74, "maximum_frequ": 74, "ifo_nam": 74, "spline": 74, "strain_adjust": 74, "cubic_splin": 74, "recalib_": 74, "lindex": 74, "rindex": 74, "data1": 74, "data2": 74, "bin_siz": 74, "inner_prod": 74, "amp": [74, 78, 85], "avg_bin": 74, "wander": 74, "complex_list": 74, "freq_lin": 74, "t1400682": 74, "logspac": 74, "d0": 74, "a_tst0": 74, "a_pu0": 74, "caviti": 74, "cc": 74, "spring": 74, "recycl": 74, "delta_qinv": 74, "delta_fc": 74, "kappa_c": 74, "kappa_tst_r": 74, "kappa_tst_im": 74, "kappa_pu_r": 74, "kappa_pu_im": 74, "kappa_a": 74, "f_c": 74, "qinv": 74, "a_": [74, 78], "tst0": 74, "pu0": 74, "physical_model": 74, "highpass_frequ": 74, "highpass_reduct": 74, "highpass_bandwidth": 74, "psd_sampl": 74, "trim_pad": 74, "autogating_threshold": 74, "autogating_clust": 74, "autogating_pad": 74, "autogating_width": 74, "autogating_tap": 74, "autogating_dur": 74, "autogating_psd_segment_length": 74, "autogating_psd_strid": 74, "state_channel": 74, "data_quality_channel": 74, "idq_channel": 74, "idq_state_channel": 74, "dyn_range_fac": 74, "902958103587057e": 74, "psd_abort_differ": 74, "psd_recalculate_differ": 74, "analyze_flag": 74, "data_quality_flag": 74, "dq_pad": 74, "countdown": 74, "min_dist": [74, 75], "max_dist": 74, "influenc": 74, "overwhit": 74, "segment_length": [74, 92], "segment_start_pad": [74, 92], "segment_end_pad": [74, 92], "trigger_start": 74, "trigger_end": 74, "filter_inj_onli": 74, "injection_window": [74, 92], "allow_zero_pad": 74, "cumulative_index": 74, "npoints_tim": 74, "uid": 74, "r2c": 74, "c2r": 74, "corrupt_tim": 74, "high_freq_cutoff": 74, "output_intermedi": 74, "identif": 74, "downsampl": [74, 80, 92], "invec_data": 74, "normalize_by_r": 74, "copy_output": 74, "overwrit": [74, 95], "unintention": 74, "gating_fil": [74, 82, 92, 100], "inj_filter_rejector_dict": 74, "gate_param": 74, "tukei": 74, "conversion_opt": 75, "metricparam": 75, "ethincaparam": 75, "full_ethinca": 75, "ethinca": [75, 82, 100], "au_0": 75, "au_3": 75, "eigenvalu": 75, "eigenvector": 75, "gamma0": [75, 82, 100], "fmax_theor": 75, "gammav": 75, "numpy_arrai": 75, "slot": [75, 78], "proc_id": 75, "snglinspiralt": 75, "outputfil": 75, "tempbank": 75, "optdict": 75, "programnam": 75, "output_dur": 75, "modular": 75, "outdoc": 75, "bestmass": 75, "bestxi": 75, "direction_num": 75, "req_match": 75, "massrangeparam": 75, "fupper": [75, 82], "find_minimum": 75, "scalefactor": 75, "numiter": 75, "throw": [75, 76, 79, 82, 90], "extrema": 75, "assess": [75, 79, 91, 92], "depth": 75, "xi_i": [75, 82], "xi_ext": 75, "numjumppoint": 75, "chirpmassjumpfac": 75, "etajumpfac": 75, "spin1zjumpfac": 75, "spin2zjumpfac": 75, "chirpmass": 75, "tjo": 75, "awai": [75, 82, 94], "totmass": 75, "diff": 75, "new_xi": 75, "giveupthresh": 75, "took": [75, 95, 97], "xi_spac": 75, "maxima": 75, "minima": 75, "xi_min": 75, "xi_max": 75, "logj": 75, "loglogj": 75, "logloglogj": 75, "loglogloglogj": 75, "unmax_metr": 75, "psd_f": 75, "psd_amp": 75, "fmax": [75, 78, 92], "funct": 75, "vary_fmax": 75, "vary_dens": 75, "psd_x": 75, "delta_x": 75, "evenli": 75, "f_cutoff": 75, "f_upper": [75, 82, 100], "preservemo": 75, "transfom": 75, "expans": 75, "THE": [75, 91, 92, 100], "ident": [75, 79], "lambda_i": 75, "compos": 75, "compound": 75, "nomral": 75, "i7": 75, "deltaf": [75, 92], "new_psd_f": 75, "new_psd_amp": 75, "vsa": 75, "entrya": 75, "chi_i": 75, "mmdista": 75, "mus1": 75, "fupper1": 75, "mus2": 75, "fupper2": 75, "fmap": 75, "norm_map": 75, "chi_j": 75, "numpoint": 75, "input_freq": 75, "metric_freq": 75, "output_freq": 75, "mass_range_param": 75, "quadparam1": 75, "quadparam2": 75, "mu_i": 75, "point1": 75, "point2": 75, "xis1": 75, "xis2": 75, "outward": 75, "lattic": [75, 82], "mass_dict": 75, "schwarzisco": [75, 82, 100], "lightr": [75, 82, 100], "erd": [75, 82, 100], "named_frequency_cutoff": 75, "old_vector": 75, "rescale_factor": 75, "xi_j": 75, "point_1_chi": 75, "point_2_chi": 75, "distance_threshold": 75, "newtonian": [75, 78], "zeropn": [75, 82, 100], "onepn": [75, 82, 100], "onepointfivepn": [75, 82, 100], "twopn": [75, 82, 100], "twopointfivepn": [75, 82, 100], "threepn": [75, 82, 100], "threepointfivepn": [75, 82, 90, 92, 97, 100], "great": [75, 92], "maxv1": 75, "minv1": 75, "maxv2": 75, "minv2": 75, "maxv3": 75, "minv3": 75, "mindist": 75, "1st": 75, "2nd": 75, "hexagon": [75, 82, 100], "prog": 75, "indent_incr": 75, "max_help_posit": 75, "argumentdefaultshelpformatt": 75, "forum": 75, "topic": [75, 86], "comp": 75, "lang": 75, "bfbmtughw8i": 75, "nicer": 75, "specfic": 75, "crappi": 75, "tim": 75, "chase": 75, "previous": [75, 95, 98], "pnorder": 75, "freqstep": 75, "time_ethinca": 75, "option_group": 75, "match_req": 75, "minmass1": 75, "maxmass1": 75, "minmass2": 75, "maxmass2": 75, "maxnsspinmag": 75, "maxbhspinmag": 75, "maxtotmass": 75, "mintotmass": 75, "maxeta": 75, "mineta": 75, "min_chirp_mass": [75, 82, 100], "ns_bh_boundary_mass": [75, 82], "nsbhflag": 75, "remnant_mass_threshold": [75, 82, 100], "ns_eo": [75, 82, 100], "use_eos_max_ns_mass": 75, "delta_bh_spin": [75, 82, 100], "delta_ns_mass": [75, 82, 100], "massparam": [75, 76], "write_metr": 75, "unproject": 75, "metric_param": 75, "ref_freq": 75, "bin_spac": 75, "bin_range_check": 75, "partit": 75, "intermediari": [75, 95], "chi_coord": 75, "point_fupp": 75, "vary_fupp": 75, "concern": [75, 82, 95], "hdf_fp": 75, "sngl_tabl": 75, "sngl_inspiral_t": [75, 82], "chi1_bin": 75, "chi2_bin": 75, "li": 75, "lot": [75, 82, 90, 92, 95], "chi_1": 75, "chi_2": 75, "frequency_list": 75, "upper_freq_formula": 75, "abrupt": [75, 78], "theshold": 75, "ndarr": 76, "devic": [76, 92], "initial_arrai": 76, "convienc": 76, "elementwis": 76, "meta": 76, "reloc": 76, "agre": 76, "normwis": 76, "conjug": 76, "mult_fac": 76, "new_siz": 76, "unchang": [76, 79, 90], "dict_typ": 76, "allow_no_valu": 76, "comment_prefix": 76, "inline_comment_prefix": 76, "empty_lines_in_valu": 76, "default_sect": 76, "safeconfigpars": 76, "deepcopi": [76, 79], "issue16058": 76, "configfil": [76, 79, 82, 90, 95, 97], "overridetupl": [76, 79, 90], "parsedfilepath": [76, 79, 90], "deletetupl": [76, 79, 90], "skip_extend": 76, "overwrite_opt": [76, 79], "section1": [76, 79, 90], "section2": [76, 79, 90], "raise_error": [76, 79, 88, 90, 95, 96, 97], "simplic": 76, "supplement": [76, 82, 89], "defaultvalu": 76, "section_nam": [76, 79, 90], "test_str": [76, 79, 90], "extendedinterpol": [76, 79], "python2": [76, 79], "sharedopt": 76, "dataparam": 76, "copit": 76, "fpath": 76, "unedit": [76, 79], "await": 76, "newlin": 76, "multilin": 76, "backslash": 76, "thrown": [76, 79], "dtol": 76, "enforc": [76, 79, 94], "cycliclli": 76, "lal_data": 76, "bewar": 76, "option_str": 76, "metavar": 76, "defaultdict": 76, "colon": 76, "foobar": 76, "register_to_process_param": 76, "opt_list": 76, "required_bi": 76, "nearest_sampl": 76, "outsidd": 76, "trend": 76, "circularli": [76, 78], "segment_dur": 76, "taper_width": 76, "exciz": 76, "remove_corrupt": 76, "resampled_t": 76, "floor": 76, "max_filter_dur": 76, "return_psd": 76, "num_point": 77, "onesid": [77, 92], "twophas": 77, "reverse_templ": 77, "take_maximum_valu": 77, "maximal_value_dof": 77, "precomput": 77, "anyon": [77, 82], "ever": 77, "corr_sn": 77, "hautocorr": 77, "maxvalu": 77, "chisquar": 77, "autochisquar": 77, "twosid": 77, "cdtype": 77, "tmplt_snr": 77, "tmplt_norm": 77, "bank_snr": 77, "bank_norm": 77, "tmplt_bank_match": 77, "bank_filt": 77, "corr": 77, "snr_norm": 77, "corr_plu": 77, "corr_cross": 77, "template_plu": 77, "template_cross": 77, "hplus_cross_corr": 77, "fastest": 77, "explainm": 77, "return_bin": 77, "commensur": 77, "preweight": 77, "blen": 77, "08974": 77, "chisq_loc": 77, "bchisq_dof": 77, "filter_length": 78, "max_template_length": [78, 92], "enable_compressed_waveform": 78, "waveform_decompression_method": [78, 92], "max_freq": 78, "cached_mem": 78, "tempout": 78, "out_plu": 78, "out_cross": 78, "minimum_buff": 78, "sindex": 78, "param_tupl": 78, "sting": 78, "thereof": 78, "default_field": [78, 92], "xmldoc": 78, "ot": 78, "stop_index": 78, "skip_field": 78, "write_compressed_waveform": 78, "recognis": 78, "oserror": 78, "approximant_str": 78, "apprxstr": 78, "apprx": [78, 92], "cond": [78, 92], "fieldarg": 78, "boolarg": 78, "f_start": 78, "max_length": 78, "shorter": [78, 79, 98, 100], "approximant_arg": 78, "warrai": 78, "tandem": [78, 94], "tuple_to_be_hash": 78, "nativ": [78, 90], "unsaf": 78, "unequ": 78, "load_now": 78, "compressed_waveform": 78, "decomp_scratch": 78, "maximim": 78, "garaunte": 78, "wors": 78, "inline_linear": 78, "interpolat": 78, "imin": 78, "ordinarili": 78, "min_seglen": 78, "02": 78, "df_multipl": 78, "fudge_length": 78, "fudge_min": 78, "necessarili": 78, "fudg": 78, "convserv": 78, "hinterp": 78, "hlen": 78, "sflen": 78, "rframegeneratorclass": 78, "recalib": 78, "frquenci": 78, "frozen": 78, "children": 78, "record_failur": 78, "repeat": [78, 94], "cbc_paramet": 78, "0x1110c1450": 78, "0x1110c1510": 78, "0x116637350": 78, "0x116637a50": 78, "rframe": 78, "decomps": 78, "ulm": 78, "vlm": 78, "hlm": 78, "f_220": 78, "tau_220": 78, "f_210": 78, "tau_210": 78, "amp220": 78, "amp210": 78, "phi220": 78, "phi210": 78, "lmn": 78, "211": 78, "317": 78, "274": 78, "0x51614d0": 78, "0x5161550": 78, "0x10e546710": 78, "0x115f37690": 78, "ringdown_fd_approxim": 78, "fouerier": 78, "frequeni": 78, "stitch": 78, "carefulli": 78, "subband": 78, "keyworkd": 78, "nonlinear": 78, "delta_psi": 78, "1808": 78, "07013": 78, "include_label": 78, "summar": [78, 79], "initlist": 78, "userlist": 78, "has_det_respons": 78, "f_0": 78, "t_0": [78, 94], "polnm": 78, "sinusoid": 78, "resolv": [78, 79, 90], "dphi": 78, "dbeta": 78, "0_": 78, "varphi": 78, "spheroid": 78, "hptild": 78, "hctild": 78, "quasi": 78, "nmode": 78, "331": 78, "220": 78, "330": 78, "lm": 78, "ref_amp": 78, "amp330": 78, "1107": 78, "0854": 78, "amplmn": 78, "philmn": 78, "degener": 78, "pollmn": 78, "pol220": 78, "polnmlmn": 78, "polnm220": 78, "delta_flmn": 78, "new_flmn": 78, "flmn": 78, "predict": [78, 79, 91], "delta_taulmn": 78, "new_taulmn": 78, "taulmn": 78, "hplustild": 78, "hcrosstild": 78, "f_lmn": 78, "tau_lmn": 78, "dphi220": 78, "dbeta220": 78, "t_final": 78, "ringup": 78, "superposit": 78, "input_param": 78, "freq_tau_approxim": 78, "td": [78, 83, 86], "domain_arg": 78, "f_decai": 78, "t_decai": 78, "psi_": 78, "nm": 78, "xlm": 78, "xlnm": 78, "im": 78, "tau_": 78, "mn": 78, "beta_": 78, "10x": 78, "bursti": 78, "central_frequ": 78, "spa": 78, "flower": 78, "porder": 78, "lower_frequency_cutoff": 78, "pim": 78, "pfan": 78, "pfa2": 78, "pfa3": 78, "pfa4": 78, "pfa5": 78, "pfl5": 78, "pfa6": 78, "pfl6": 78, "pfa7": 78, "amp_factor": 78, "tmplt": 78, "precondit": 78, "ampc": 78, "_fval": 78, "_htild": 78, "bounc": 78, "postbounc": 78, "oscil": 78, "h_cross": 78, "tmeseri": 78, "gwamplitud": 78, "shifttim": 78, "shiftim": 78, "makecopi": 78, "accross": 78, "left_window": 78, "right_window": 78, "left_beta": 78, "right_beta": 78, "gwfrequenc": 78, "remove_start_phas": 78, "gwphase": 78, "tsdata": 78, "tapermethod": 78, "return_l": 78, "taper_non": 78, "taper_end": 78, "taper_startend": 78, "discont_threshold": 78, "1101767270538954": 78, "toward": 78, "untrustworthi": 78, "freqseri": 78, "genener": 78, "subsitut": 78, "hrss": 78, "rss": 78, "rwrap": 78, "meaning": [78, 96], "outplu": 78, "outcross": 78, "buffer_length": 78, "pend": 78, "ffting": [78, 92], "expicitli": 78, "mathfrak": 78, "maginitud": 78, "y_": 78, "g_": 78, "imrphenomxhm": [78, 85], "nrhybsur3dq8": [78, 85], "nrhyb": 78, "h_x": [78, 79], "nrsurrog": 78, "nrsur": 78, "reuse_execut": [79, 91], "set_submit_subdir": [79, 91], "statmap_fil": 79, "background_fil": 79, "other_statmap_fil": 79, "veto_nam": [79, 91], "template_str": 79, "pivot_ifo": 79, "fixed_ifo": 79, "raw_fit_fil": 79, "inj_coinc_fil": 79, "inj_xml_fil": 79, "fap": 79, "sngls_file": 79, "full_data": [79, 92, 95], "xmlbank": 79, "hdfbank": 79, "xml_trigger_fil": 79, "ifocomb": 79, "ifo_id": 79, "bg_file": 79, "censored_nam": 79, "ranking_fil": 79, "insp": 79, "final_bg_file_list": 79, "bg_file_list": 79, "inj_trig_fil": 79, "sngls_inj_fil": 79, "output_dir": [79, 82, 91, 92, 95, 97, 100], "preserve_orig_fil": 79, "preserv": 79, "teststr": [79, 90], "cpfile": 79, "parsed_filepath": 79, "configparset": 79, "ahop": [79, 87, 88, 90, 91, 95, 98, 99, 100], "initialization_inifil": [79, 90], "copy_to_cwd": [79, 90], "option_nam": [79, 90, 98], "lalapps_tmpltbank": [79, 82, 90, 100], "newstr": [79, 90], "macro": 79, "new_str": [79, 90], "magic": [79, 90], "drive": [79, 90], "detchar": [79, 90, 96, 97, 98], "some_gating_fil": [79, 90], "filea": [79, 90], "fileb": [79, 90], "filec": [79, 90], "option1": [79, 90], "option2": [79, 90], "permiss": [79, 90], "returncod": 79, "errfil": 79, "outfil": [79, 95], "cmdfile": 79, "profil": [79, 95], "retent": [79, 82, 90, 94, 95, 96, 97], "retain_fil": 79, "pegasu": [79, 82, 88, 96], "exe_nam": [79, 92, 100], "file_url": 79, "store_fil": 79, "use_tmp_subdir": 79, "stuff": [79, 98], "inspiral_s6lowmass": 79, "815901601": 79, "815902001": 79, "localhost": [79, 95], "spxiwh": [79, 82, 90, 91, 99, 100], "cacheentri": 79, "ifo_list": 79, "categor": 79, "currseg": 79, "usesplitlist": 79, "ligogpstim": 79, "pycbc_fil": 79, "current_seg": 79, "intersect": 79, "ahopefil": 79, "valid_seg": 79, "input1": 79, "input2": 79, "analysis_tim": 79, "sqlite": 79, "mapper": 79, "td_option": 79, "segment_dict": 79, "seg_summ_dict": 79, "seg_summ_list": 79, "segmentslist": 79, "segment_summari": [79, 88], "file_exist": 79, "segmentslistdict": 79, "segdict": 79, "minseglength": 79, "override_file_if_exist": 79, "storage_path": 79, "verbatim_ex": 79, "output_map_path": 79, "dax": [79, 82, 93, 94, 95, 96, 97], "exucut": 79, "include_subdax_opt": 79, "subdax": [79, 95], "fileobj_from_path": 79, "fullseg": 79, "subdirectori": [79, 95], "cmdlist": 79, "out_basenam": 79, "external_cal": 79, "fail_on_error": 79, "stderr": [79, 95], "redirect": 79, "seriou": [79, 92], "secur": 79, "exploit": 79, "exitcod": [79, 95], "val_str": 79, "opt_1": 79, "value_a": 79, "value_b": 79, "value_c": 79, "curr_pfn": 79, "pfn": [79, 95], "cvfm": 79, "nonfsio": 79, "lfn": 79, "2000000000": 79, "emphas": 79, "child": 79, "datafindcache_list": [79, 88], "datafind_filelist": [79, 88], "backup_out": [79, 88], "orig_out": [79, 88], "datafindcach": [79, 88], "isfil": [79, 88], "outgrouplist": [79, 88], "missingframeseg": [79, 88], "datafindout": [79, 88], "missingfram": [79, 88], "newscienceseg": [79, 88], "sciencefil": [79, 88], "segmentnam": [79, 88], "summseglist": [79, 88], "frametyp": [79, 88], "starttim": [79, 88], "outputdir": [79, 88], "dfkwarg": [79, 88], "uniqueifi": [79, 88], "uniquifi": [79, 88], "dfcach": [79, 88], "cachefil": [79, 88], "lcf": [79, 82, 88, 92, 100], "scienceseg": [79, 88, 98, 100], "gwdatafind": [79, 88], "oppos": [79, 82, 88], "setup_datafind_runtime_single_call_perifo": [79, 88], "setup_datafind_runtime_gener": [79, 88], "outfilelist": [79, 88], "dagman": [79, 88, 95], "framefil": [79, 88], "get_science_seg": [79, 88], "sci_avlble_fil": [79, 88], "updatesegmenttim": [79, 88], "sci_avlble_nam": [79, 88], "template_bank_fil": 79, "flag_fil": 79, "analysis_segment_fil": 79, "analysis_segment_nam": 79, "template_bins_fil": 79, "analyzable_seg_fil": 79, "analyzable_nam": 79, "dq_seg_fil": 79, "pycbc_grb_inj_combin": 79, "ifo_tag": 79, "pycbc_grb_inj_find": 79, "inj_insp_fil": 79, "pycbc_grb_trig_clust": 79, "in_fil": 79, "pycbc_grb_trig_combin": 79, "seg_dir": 79, "insp_fil": 79, "sky_err": 79, "core_frac": 79, "core_sigma": 79, "tail_sigma": 79, "fermi": 79, "systemat": 79, "1909": 79, "03006": 79, "septemb": 79, "gbm": 79, "sky_error": [79, 97], "upscal": 79, "fermi_si": 79, "swift": 79, "datafind_fil": 79, "outdir": 79, "condition_strain_nod": 79, "condition_strain_out": 79, "snippet": 79, "inj_set": 79, "exec_nam": 79, "onsource_fil": 79, "followups_fil": 79, "dax_output": 79, "pp_dir": 79, "inj_tag": [79, 91], "all_tim": 79, "offtrial_1": 79, "offtrial_n": 79, "clustered_fil": 79, "inj_find_fil": 79, "foundmiss": 79, "inj_comb_fil": 79, "res_dir": 79, "explicit_depend": 79, "webpag": [79, 95, 97], "inference_fil": 79, "analysis_seg": 79, "extract_posterior": [79, 93, 94], "plot_sampl": [79, 94], "acceptance_r": 79, "plot_acceptance_r": [79, 94], "section_tag": 79, "rdir": 79, "plot_dynesty_run": 79, "plot_dynesty_traceplot": 79, "trace": 79, "inj_recoveri": [79, 93], "versu": [79, 93], "injection_param": 79, "samples_param": 79, "input_file_opt": 79, "output_file_extens": 79, "add_to_workflow": 79, "boiler": 79, "plate": 79, "plot_mcmc_histori": 79, "plot_prior_from_fil": 79, "corner": [79, 80, 93, 94], "plot_pp": [79, 93], "pp_table_summari": [79, 93], "table_summari": [79, 94], "plot_prior": [79, 94], "paras": 79, "fits_fil": 79, "plot_skymap": [79, 94], "skymap": [79, 94], "print_metadata": 79, "posterior_file_dir": 79, "summary_t": [79, 94], "summary_plot": [79, 94], "label1": 79, "label2": 79, "clariti": 79, "plot_posterior_summari": [79, 93, 94], "lalbel": 79, "plot_param": [79, 94], "worfkow": 79, "summary_fil": 79, "prior_plot": 79, "resul": 79, "posterior_plot": 79, "notyetcr": [79, 91, 92, 99], "precalc_psd_fil": [79, 91], "group_str": [79, 91], "distant": [79, 91], "inj_section_nam": [79, 91], "subfunct": [79, 88, 91, 92, 100], "moudl": [79, 91], "data_length": 79, "valid_chunk": 79, "valid_length": 79, "curr_seg": 79, "curr_exe_class": 79, "num_job": 79, "allow_overlap": 79, "seg_siz": 79, "exttrig_fil": 79, "ligolw_add": [79, 95, 96, 97], "jobseg": 79, "data_seg": 79, "df_parent": 79, "job_data_seg": 79, "gate_fil": 79, "pycbc_multi_inspir": [79, 92], "dfparent": 79, "bankvetobank": 79, "ipn_fil": 79, "pycbc_geom_nonspin_bank": [79, 100], "declar": 79, "condordagmannod": 79, "num_split": 79, "pycbc_hdf_splitinj": 79, "num_bank": 79, "pycbc_hdf5_splitbank": 79, "splitbank": [79, 97, 99], "resons": 79, "pycbc_splitbank": [79, 95, 97], "pycbc_split_inspinj": [79, 97], "curr_exe_job": 79, "get_valid": 79, "datalength": 79, "72": 79, "nonzero": 79, "out_fil": 79, "datafind_out": [79, 92, 100], "exe_tag": 79, "select_xxx_class": 79, "exe_class": [79, 99], "curr_ex": [79, 99], "aforement": 79, "tmplt_bank": [79, 92, 100], "principl": [79, 92], "lalapps_inspir": [79, 90, 92], "jobutil": [79, 92], "serv": [79, 90, 92, 95], "bnsinject": [79, 92], "noinjectionanalysi": [79, 92], "inspiral_out": [79, 92], "pycbc_plot_qscan": 79, "pycbc_single_templ": 79, "pycbc_plot_singles_timefreq": 79, "curr_idx": 79, "bank_id": 79, "fsdt": 79, "trigger_merg": 79, "file_substr": 79, "sort_ord": 79, "sort_var": 79, "injection_index": 79, "plot_waveform": 79, "time_window": 79, "make_qscan": 79, "singles_timefreq": 79, "data_read_nam": 79, "analyzed_nam": 79, "use_mean_tim": 79, "use_exact_inj_param": 79, "u_vals_": 79, "single_template_plot": 79, "params_str": 79, "pycbc_single_template_plot": 79, "caption": 79, "hdf_file": 79, "plot_fil": 79, "skipped_data": 79, "statfil": 79, "ifo_tim": 79, "special_tid": 79, "snr_timeseri": 79, "xml_all": 79, "pysbs_single_templ": 79, "all_output_fil": 79, "single_trigg": 79, "insp_seg": 79, "insp_data_nam": 79, "insp_anal_nam": 79, "nth": 79, "cointain": 79, "minifollop": 79, "single_trig_fil": 79, "veto_segment_nam": 79, "fg_name": 79, "supplementari": 79, "xml_all_fil": 79, "sitecat": 79, "condorpool_copi": 79, "local_path": 79, "local_url": 79, "condorpool_shar": 79, "condorpool_symlink": 79, "sitenam": 79, "pegasus_profil": [79, 82, 94, 95, 96, 97], "dax3": 79, "arch": 79, "x86_64": 79, "perspect": 79, "rep_cat": 79, "megabyt": 79, "prioriti": 79, "nomenclatur": 79, "linkag": 79, "container_wflow": 79, "output_map_fil": 79, "cache_fil": [79, 82, 95, 97], "is_stag": 79, "bypass_stag": 79, "os_typ": 79, "os_releas": 79, "os_vers": 79, "my_workflow": 79, "dax_file_nam": 79, "parent_workflow": 79, "child_workflow": 79, "ye": 79, "tranform": 79, "submit_now": 79, "plan_now": 79, "substr": 79, "inj_trig": 79, "dq_file": 79, "dq_label": 79, "hierarchical_level": 79, "page_ifar": 79, "results_dir": 79, "orang": 79, "seg_nam": 79, "title_text": 79, "closed_box": 79, "vetodef_fil": 79, "output_fmt": 79, "geom_nonspinbank": 79, "geom_aligned_bank": [79, 82], "pycbc_plot_psd_fil": [79, 94, 96], "indivud": [79, 98], "up_flag1": [79, 98], "up_flag2": [79, 98], "up_flag3": [79, 98], "down_flag1": [79, 98], "down_flag2": [79, 98], "intanc": [79, 98], "insuffici": [79, 98], "curr_sect": [79, 99], "executbl": [79, 99], "create_job": [79, 99], "input_t": [79, 99], "split_table_out": [79, 99], "lalapps_splitbank": [79, 99], "independent_ifo": [79, 100], "return_format": [79, 100], "concret": 80, "1242442818": 80, "1242442882": 80, "liter": 80, "strain_condit": 80, "strain_with_inject": 80, "o4": 80, "1234": [80, 95], "simulated_strain": 80, "author": [81, 84, 86], "patch": 81, "draft": 81, "dev0": 81, "someon": [81, 82], "travi": 81, "docker": 81, "urgent": 81, "email": [81, 82], "cherri": 81, "pycbc_make_sbank_workflow": 82, "pycbc_make_uberbank_workflow": 82, "peopl": [82, 84, 89], "situat": [82, 95], "overcov": 82, "undercov": 82, "strong": 82, "he": 82, "advis": 82, "wast": [82, 95], "stupid": 82, "overcoverag": 82, "sathyaprakash": 82, "dhurandhar": 82, "rev": 82, "d44": 82, "3819": 82, "1991": 82, "eric": 82, "clifford": 82, "d52": 82, "848": 82, "1995": 82, "balasubramanian": 82, "d53": 82, "3033": 82, "1996": 82, "owen": 82, "benjamin": 82, "6749": 82, "d60": 82, "022002": 82, "1998": 82, "babak": 82, "quant": 82, "5477": 82, "2006": 82, "thoma": 82, "d76": 82, "102004": 82, "2007": 82, "d87": 82, "024033": 82, "d86": 82, "084017": 82, "ohm": 82, "frank": 82, "d88": 82, "024002": 82, "trivial": 82, "testnonspin": [82, 100], "zero_det_high_p": 82, "900000033": [82, 100], "900002081": [82, 100], "h1_ninja2_g1000176_early_recolored_cach": [82, 100], "900000024": [82, 100], "10653": [82, 100], "min_match": [82, 100], "pn_order": [82, 100], "min_mass1": [82, 100], "max_mass1": [82, 100], "min_mass2": [82, 100], "max_mass2": [82, 100], "max_total_mass": [82, 100], "min_total_mass": [82, 100], "max_eta": [82, 100], "min_eta": [82, 100], "psd_file_xml_ifo_str": [82, 92, 100], "psd_file_xml_root_nam": [82, 92, 100], "psd_num_seg": [82, 92, 100], "strain_high_pass": [82, 92, 100], "strain_low_pass": [82, 92, 100], "taper_data": [82, 92, 100], "hdf_store": [82, 92, 100], "fake_strain_se": [82, 92, 100], "fake_strain_from_fil": [82, 92, 100], "sgburst_injection_fil": [82, 92, 100], "injection_scale_factor": [82, 92, 100], "injection_f_ref": [82, 92, 100], "injection_f_fin": [82, 92, 100], "normalize_strain": [82, 92, 100], "zpk_z": [82, 92, 100], "zpk_p": [82, 92, 100], "zpk_k": [82, 92, 100], "wit": [82, 92, 100], "witness_frame_typ": [82, 92, 100], "tf": [82, 92, 100], "witness_tf_fil": [82, 92, 100], "witness_filter_length": [82, 92, 100], "bklisco": [82, 100], "lrd": [82, 100], "hybridmeco": [82, 100], "imrphenombfin": [82, 100], "imrphenomcfin": [82, 100], "imrphenomdpeak": [82, 100], "eobnrv2rd": [82, 100], "eobnrv2hmrd": [82, 100], "seobnrv1rd": [82, 100], "seobnrv1peak": [82, 100], "seobnrv2rd": [82, 100], "seobnrv2peak": [82, 100], "seobnrv4rd": [82, 100], "seobnrv4peak": [82, 100], "seobnrv5rd": [82, 100], "seobnrv5peak": [82, 100], "ethinca_frequency_step": [82, 100], "vv": [82, 92, 99, 100], "70hz": [82, 100], "impos": [82, 100], "minumum": [82, 100], "thrsehold": [82, 100], "0x7f62ca6a9940": [82, 100], "0x7f62ca6a9a60": [82, 100], "f_max": [82, 100], "1000hz": 82, "cours": 82, "lose": [82, 95], "certainli": 82, "trust": 82, "zdhp": [82, 85], "encount": 82, "d89": 82, "024010": 82, "techniqu": 82, "surpris": 82, "testalign": 82, "bbh_template_bank": 82, "t1200307v4": 82, "example_geom_aligned_bank": 82, "accounting_group": [82, 93, 94, 95], "request_disk": 82, "On": [82, 89, 95], "pycbc_submit_dax": [82, 84, 93, 94, 95, 96, 97], "stack_dist": 82, "split_bank_num": 82, "intermediate_data_fil": 82, "metadata_fil": 82, "storage_path_bas": 82, "supplement_config_fil": 82, "max_ns_spin_mag": 82, "max_bh_spin_mag": 82, "workflow_nam": [82, 93, 94, 95, 97], "dax_fil": [82, 95, 97], "dax_file_directori": 82, "stack": 82, "threed": 82, "pycbc_tmpltbank_to_chi_param": 82, "pretend": 82, "conflict": 82, "000000": 82, "0x7fd9477e11f0": 82, "0x7fd9477e1310": 82, "_output": [82, 95, 97], "input_map": [82, 95, 97], "yml": 82, "wall": [82, 95], "pannaral": 82, "apjl": 82, "francesco": 82, "taylorr2f4": 82, "difficult": [82, 90], "spend": 82, "disadvantag": [82, 92], "wait": 82, "thumb": 82, "benefit": 82, "nevertheless": 82, "184027": 82, "195011": 82, "d80": 82, "104014": 82, "manca": 82, "vallisneri": 82, "d81": 82, "2010": 82, "024004": 82, "ajith": 82, "084041": 82, "privitera": 82, "024003": 82, "capano": 82, "d93": 82, "2016": 82, "absenc": 82, "okai": [82, 90, 98], "breakdown": [82, 97], "incorpor": 82, "imrphenomx": 82, "teststoch": 82, "2000000": 82, "batshit": 82, "bank_fupper_step": 82, "num_se": 82, "num_failed_cutoff": 82, "lai": [82, 87, 98], "5000000": 82, "0x7fed2ffc1d30": 82, "0x7fed2ffc1e50": 82, "lalapps__cbc__sbank_8py_sourc": 82, "sbankexecut": 82, "blank": [82, 95, 97], "entur": [82, 95, 97], "all_fil": [82, 90, 95, 97], "irrelev": 82, "900000000": 82, "900010000": 82, "repetit": 82, "recombin": [82, 89], "nbank": 82, "sbank_mchirp_bin": 82, "lalapps_cbc_sbank_hdf5_choose_mchirp_boundari": 82, "h5add": 82, "lalapps_cbc_sbank_hdf5_bankcombin": 82, "t1200307v4_h1": 82, "mratio": 82, "9899": [82, 90], "20000000": 82, "readder": 82, "500000000": 82, "20000000000": 82, "llwadd": [82, 95, 96, 97], "exercis": 82, "request_memori": [82, 94, 95, 97], "ram": 82, "get_env": 82, "cycle0": 82, "cycle1": 82, "cycle2": 82, "cycle3": 82, "cycle4": 82, "cycle5": 82, "cycle6": 82, "cycle7": 82, "cycle8": 82, "cycle9": 82, "cycle10": 82, "cycle11": 82, "cycle12": 82, "verbatim": 82, "clock": [82, 95], "abbott": 82, "122003": 82, "focu": 82, "scope": [82, 94], "reorder": 82, "idepend": 82, "bank_structur": 82, "inde": 82, "foreseen": [82, 91], "alter": 82, "hopefulli": 82, "bulk": 82, "decis": [82, 90], "uwm": [82, 90, 95], "ligovirgo": [82, 90, 95], "cbcnote": 82, "o2templatebank": 82, "tito": 82, "all_o1_c02_estim": 82, "average_psd": [82, 96], "11203200": 82, "1137254417": 82, "weird": [82, 98], "monitor": [82, 93, 94], "sbank_workflow": 82, "1915": 82, "seobnrv2_rom_doublespin_hi": [82, 85], "989": 82, "965": 82, "cycle13": 82, "cycle14": 82, "cycle15": 82, "cycle16": 82, "introduct": 83, "ldr": 83, "listen": 83, "pycbc_upload_xml_to_gracedb": 84, "client": 84, "contributor": 84, "branson": 84, "stephen": 84, "run_dir": [84, 97], "ran": [84, 97], "_result": 84, "page_foreground_xmlloudest": 84, "1130754617": 84, "1019335": 84, "novemb": 84, "hundr": 84, "coinc_inspir": 84, "coinc_ev": 84, "opencl": 85, "what_waveform": 85, "spintaylort1": 85, "spintaylort5": 85, "phenspintaylor": 85, "teobresum_rom": 85, "seobnrv2_opt": 85, "seobnrv3": 85, "seobnrv3_pert": 85, "seobnrv3_opt": 85, "seobnrv3_opt_rk4": 85, "seobnrv4_opt": 85, "seobnrv4p": 85, "seobnrv2t": 85, "seobnrv4t": 85, "seobnrv4_rom_nrtidalv2": 85, "seobnrv4_rom_nrtidalv2_nsbh": 85, "hgimri": 85, "imrphenoma": 85, "imrphenomd_nrtidalv2": 85, "imrphenomnsbh": 85, "imrphenomhm": 85, "imrphenompv2_nrtid": 85, "imrphenompv2_nrtidalv2": 85, "tayloret": 85, "eccentrictd": 85, "spindominatedwf": 85, "nr_hdf5": 85, "nrsur7dq2": 85, "seobnrv4hm": 85, "imrphenomxa": 85, "imrphenompv3": 85, "imrphenompv3hm": 85, "imrphenomxp": 85, "imrphenomxphm": 85, "teobresum": 85, "imrphenomt": 85, "imrphenomthm": 85, "imrphenomtp": 85, "imrphenomtphm": 85, "seobnrv4hm_pa": 85, "pseobnrv4hm_pa": 85, "imrphenomxas_nrtidalv2": 85, "imrphenomxp_nrtidalv2": 85, "imrphenomxo4a": 85, "externalpython": 85, "seobnrv1_rom_effectivespin": 85, "seobnrv1_rom_doublespin": 85, "seobnrv2_rom_effectivespin": 85, "eobnrv2_rom": 85, "eobnrv2hm_rom": 85, "seobnrv4hm_rom": 85, "seobnrv5_rom": 85, "imrphenomd_nrtid": 85, "spintaylorf2": 85, "taylorf2nl": 85, "pretaylorf2": 85, "spintaylorf2_swapp": 85, "eccentricfd": 85, "taylorf2ecc": 85, "taylorf2nltid": 85, "taylorf2redspin": 85, "taylorf2redspintid": 85, "lackey_tidal_2013_seobnrv2_rom": 85, "seobnrv4_rom_nrtid": 85, "seobnrv4t_surrog": 85, "imrphenomp": 85, "spintaylort4fouri": 85, "spintaylort5fouri": 85, "nrsur4d2": 85, "seobnrv5hm_rom": 85, "taylorf2_interp": 85, "seobnrv1_rom_effectivespin_interp": 85, "seobnrv1_rom_doublespin_interp": 85, "seobnrv2_rom_effectivespin_interp": 85, "seobnrv2_rom_doublespin_interp": 85, "eobnrv2_rom_interp": 85, "eobnrv2hm_rom_interp": 85, "seobnrv2_rom_doublespin_hi_interp": 85, "seobnrv4_rom_interp": 85, "seobnrv4hm_rom_interp": 85, "seobnrv5_rom_interp": 85, "imrphenomc_interp": 85, "imrphenomd_interp": 85, "imrphenompv2_interp": 85, "imrphenomd_nrtidal_interp": 85, "imrphenompv2_nrtidal_interp": 85, "imrphenomhm_interp": 85, "imrphenompv3hm_interp": 85, "imrphenomxhm_interp": 85, "imrphenomxphm_interp": 85, "spintaylorf2_interp": 85, "taylorf2nl_interp": 85, "pretaylorf2_interp": 85, "spintaylorf2_swapper_interp": 85, "det_h1": 85, "det_l1": 85, "det_v1": 85, "1192529720": 85, "signal_h1": 85, "signal_l1": 85, "signal_v1": 85, "decompos": 85, "hm": 85, "mode_select": 85, "sp": 85, "sc": 85, "4f": 85, "match_waveform": 85, "9534": 85, "exhibit": 85, "gibb": 85, "phenomenon": 85, "gibbs_phenomenon": 85, "sptild": 85, "sctild": 85, "test_waveform": [85, 86], "fpeak": [85, 86], "my": [85, 86, 95], "0j": [85, 86], "hf": [85, 86], "notebook": 86, "freuqenc": 86, "useabl": 86, "distinguish": 86, "advertis": 86, "entry_point": 86, "revchirp": 86, "long_descript": 86, "descr": 86, "author_email": 86, "gmail": 86, "download_url": 86, "install_requir": 86, "py_modul": 86, "reverse_chirp_td": 86, "reverse_chirp_fd": 86, "audienc": 86, "research": 86, "natur": 86, "english": 86, "astronomi": 86, "licens": 86, "osi": 86, "approv": 86, "gnu": 86, "gplv3": 86, "approximant_nam": 86, "module_path": 86, "function_nam": 86, "capbl": 86, "poster": 87, "presenti": 87, "march": 87, "especi": [87, 90], "bri": 87, "databas": [87, 88, 90, 95, 96, 97, 98], "navig": [87, 97], "specfi": 88, "at_runtime_single_fram": [88, 90, 95, 96], "quickest": 88, "at_runtime_multiple_fram": 88, "at_runtime_single_cach": [88, 97], "at_runtime_multiple_cach": 88, "from_pregenerated_lcf_fil": 88, "at_runtim": [88, 90, 91, 95, 97], "gsiftp": [88, 95], "urltyp": [88, 95, 96, 98], "symlink": 88, "basic_pegasu": 88, "x509": 88, "certif": 88, "ian": 88, "configuart": 88, "no_test": [88, 90, 95, 97, 98], "discrep": 88, "update_tim": [88, 90, 95, 96], "on_gap": 88, "experiment": 89, "gaurante": 89, "stabil": 89, "infrastructur": 89, "familiar": 89, "slate": 89, "anlysi": 89, "example_hdf_post": 89, "porport": 89, "pycbc_coinc_bank2hdf": [89, 95], "trig2hdf": [89, 95], "pycbc_coinc_trig2hdf": 89, "hdfinjfind": [89, 95], "pycbc_coinc_hdfinjfind": [89, 95], "pycbc_coinc_findtrig": [89, 95], "pycbc_coinc_statmap": [89, 95], "plot_sensit": [89, 95], "pycbc_page_sensit": [89, 95], "plot_foundmiss": [89, 95], "pycbc_page_foundmiss": [89, 95], "plot_snrifar": [89, 95], "pycbc_page_snrifar": [89, 95], "plot_snrchi": [89, 95], "pycbc_page_snrchi": [89, 95], "page_foreground": [89, 95], "pycbc_page_foreground": [89, 95], "hdf_trigger_merg": [89, 95], "significan": 89, "total_mass": [89, 95], "89": [89, 95], "74": [89, 95], "120": [89, 95], "binless": 89, "similari": 89, "planner": [90, 95], "ihop": [90, 92, 100], "grew": 90, "huge": 90, "novic": 90, "obscur": 90, "specifii": 90, "repeatedli": [90, 95], "exe1": 90, "exe2": 90, "acheiv": 90, "accomod": 90, "OF": 90, "garbag": 90, "happili": 90, "THERE": 90, "NO": 90, "TO": [90, 94], "backport": 90, "macport": 90, "file1": 90, "file2": 90, "file3": 90, "filex": 90, "weekly_ahop": [90, 91, 95, 99, 100], "pipedown": [90, 91, 92], "critic": 90, "atrribut": 90, "svd": 90, "exenam": 90, "exename1": 90, "exename2": 90, "suffic": 90, "basedir": 90, "public_html": [90, 95], "l1_ldas_c02_l2": 90, "h2_ldas_c02_l2": 90, "sepcifi": 90, "demand": 90, "itf_sciencemod": 90, "segdb": 90, "s6": [90, 95, 98], "h1l1v1": [90, 95], "s6_cbc_lowmass_b_offlin": 90, "937473702": 90, "workflow_independent_ifo": [90, 92, 95, 96, 100], "matchedfilter_util": 90, "matchedfltr": [90, 100], "in_workflow": [90, 91, 95, 99], "singular": [90, 95], "s6b": 90, "ab577e4e5dad14e46fce511cffdb04917836ba36": 90, "thinca": 90, "ligolw_thinca": 90, "bottom": [90, 95], "subset_tag": 90, "Such": 90, "token": 90, "h1_channel_nam": 90, "massrang": 90, "exe3": 90, "exe5": 90, "1100": 90, "submiss": [91, 95, 97, 99], "injsectionnam": 91, "xxxx": 91, "dawn": [91, 100], "inspinj_8c": 91, "Of": [91, 92, 100], "THESE": [91, 92, 100], "961671943": [91, 100], "lscsoft_git": [91, 99, 100], "961585543": [91, 92, 99, 100], "injections_bnslininj_2134": 91, "taylort4threepointfivepn": 91, "837": 91, "155": [91, 95], "60000": 91, "obvious": 92, "hardcod": [92, 100], "inspiral_hip": [92, 100], "inspiral_exec": 92, "inflex": [92, 100], "inspiral_8c": 92, "rsq": 92, "971614817": 92, "69": [92, 100], "tmpltbank_19": 92, "971612833": 92, "971614881": 92, "real_8": [92, 97, 100], "971613852": 92, "spec": 92, "atten": [92, 100], "524288": 92, "968556757": 92, "3058132": 92, "subbank": 92, "findchirpsp": 92, "0002": 92, "update_progress": 92, "update_progress_fil": 92, "statement": 92, "reman": 92, "bank_veto_bank_fil": 92, "chisq_snr_threshold": 92, "chisq_delta": 92, "autochi": 92, "autochi_number_point": 92, "ifdo": 92, "theauto": 92, "autochi_strid": 92, "atwhich": 92, "usingpoint": 92, "beus": 92, "beforecalcul": 92, "willcom": 92, "snrtime": 92, "recomput": 92, "upsampl": 92, "keep_loudest_log_chirp_window": 92, "ln": 92, "keep_loudest_interv": 92, "keep_loudest_num": 92, "new_snr": 92, "maxtim": 92, "checkpoint_exit_maxtim": 92, "checkpoint_exit_cod": 92, "multiprocessing_nprocess": 92, "thread": 92, "proc": 92, "setto": 92, "trig_start_tim": 92, "trig_end_tim": 92, "revert": 92, "pycbc_num_thread": 92, "processing_device_id": 92, "fft_backend": 92, "fftw_measure_level": 92, "fftw_threads_backend": 92, "openmp": 92, "pthread": 92, "unthread": 92, "wisdom": 92, "fftw_input_float_wisdom_fil": 92, "fftw_input_double_wisdom_fil": 92, "fftw_output_float_wisdom_fil": 92, "fftw_output_double_wisdom_fil": 92, "_import_system_wisdom": 92, "affin": 92, "cpu_affin": 92, "taskset": 92, "cpu_affinity_from_env": 92, "enivorn": 92, "chanc": 92, "rejector": 92, "injection_filter_rejector_chirp_time_window": 92, "injection_filter_rejector_match_threshold": 92, "coarsematch": 92, "injection_filter_rejector_coarsematch_deltaf": 92, "injection_filter_rejector_coarsematch_fmax": 92, "injection_filter_rejector_seg_buff": 92, "injection_filter_rejector_f_low": 92, "sgchisq_snr_threshold": 92, "sgchisq_loc": 92, "q1": 92, "offset1": 92, "q2": 92, "offset2": 92, "961592867": 92, "filetmpltbank": 92, "tmpltbank_01": 92, "961591486": 92, "1382": 92, "961592884": 92, "961591534": 92, "961590836": 92, "650": 92, "7349": 92, "inspiral_1": 92, "1333": 92, "workflow_config": [93, 94], "recoverd": 93, "redlin": 93, "visual": [93, 95, 97], "injections_config": 93, "gw170814": 93, "o2": [93, 94, 95, 98], "uniform_comoving_volum": [93, 94], "appreci": 93, "nrun": [93, 94], "create_inject": 93, "pycbc_inference_pp_table_summari": 93, "pycbc_inference_plot_pp": 93, "pycbc_inference_plot_inj_recoveri": 93, "pp_test": 93, "wildcard": 93, "make_inference_inj_workflow": 93, "bbh_inject": 93, "html_dir": [93, 94, 97], "983124": 93, "ninj": 93, "results_pag": [93, 94, 95, 96], "everytim": [93, 94], "aei": [93, 94, 95], "hannov": [93, 94], "talk": [93, 94], "admin": [93, 94], "proxi": [93, 94, 95], "create_inj_workflow": 93, "gw150914_gw170814": 94, "planck": 94, "10mpc": 94, "5gpc": 94, "mariginalized_phas": 94, "uncom": 94, "mind": 94, "20hz": 94, "ok": [94, 95], "o3": [94, 98], "1gpc": 94, "5e3": 94, "9e9": 94, "adequ": 94, "newer": [94, 100], "disfavor": 94, "pt": 94, "anali": 94, "combact": 94, "ve": [94, 98], "logv": 94, "h1frame": 94, "l1frame": 94, "h1_gwosc_o2_16khz_r1": 94, "l1_gwosc_o2_16khz_r1": 94, "v1_gwosc_o2_16khz_r1": 94, "v1frame": 94, "09": 94, "45utc": 94, "srcmasses_comoving_volum": 94, "413": 94, "43utc": 94, "1186741861": 94, "533": 94, "1126259200": 94, "1126259600": 94, "mass1_mass2": 94, "inc_dist": 94, "chip_chieff": 94, "run_pycbc_infer": 94, "pycbc_inference_plot_prior": 94, "pycbc_inference_table_summari": 94, "pycbc_inference_create_fit": 94, "pycbc_inference_plot_skymap": 94, "plot_spectrum": [94, 96], "pycbc_make_html_pag": [94, 95, 96], "pycbc_inference_plot_acceptance_r": 94, "pycbc_inference_plot_sampl": 94, "maxruntimehour": 94, "40g": 94, "request_cpu": [94, 96], "4g": 94, "maxpt": 94, "dyn": 94, "argur": 94, "978241": 94, "create_workflow": 94, "launch": [94, 96, 97], "hang": 95, "condor_submit": [95, 97], "bns_spin": 95, "fake_strain": 95, "tend": 95, "h1_er_c00_agg": 95, "l1_er_c01_l1": 95, "emploi": 95, "er6": 95, "er6_gds_calib_strain": 95, "lho": 95, "speci": 95, "elimin": 95, "pregenerated_bank": [95, 100], "jveitch": 95, "mdc": 95, "bns_nonspin_30hz_earlyaligo": 95, "regener": [95, 100], "pregner": 95, "noop": [95, 99], "segment_queri": [95, 96, 97], "segments_from_cat": [95, 96, 97], "ligolw_segments_from_cats_dqsegdb": [95, 96, 97], "ligolw_combine_seg": [95, 96, 97], "statmap_inj": 95, "pycbc_coinc_statmap_inj": 95, "page_inject": 95, "pycbc_page_injt": 95, "plot_coinc_snrchi": 95, "pycbc_page_coinc_snrchi": 95, "plot_seg": [95, 96], "pycbc_page_seg": [95, 96], "complain": 95, "bnslininj": 95, "rememb": 95, "screw": 95, "random_numb": 95, "taylor": 95, "timesmlid": 95, "1000th": 95, "2000th": 95, "3000th": 95, "injful": 95, "fullinj": 95, "unimpact": 95, "injinj": 95, "050": 95, "bkg": 95, "30000": 95, "mchirp_binless": 95, "mtotal_binless": 95, "spin_binless": 95, "chirpdistmchirp": 95, "mchirp_stat": 95, "chirpdistmchirp_stat": 95, "time_stat": 95, "10gb": 95, "subtitl": [95, 96], "s6d": 95, "s6d_chunk3": 95, "s6_run_pycbc_er8_pre_releas": 95, "data_s6": 95, "gps_times_s6d_big_dog_two_week": 95, "big": 95, "dog": 95, "db": 95, "tmpdir": 95, "temporari": 95, "pegasus_file_directori": 95, "mandat": 95, "run0011": 95, "isi": [95, 97], "albert": 95, "succeed": 95, "daemon": 95, "crash": 95, "nonsens": 95, "monitord": 95, "replai": 95, "pegasus_analyz": 95, "suceed": 95, "unsubmit": 95, "cbiwer": 95, "s6d_test": 95, "970012743": 95, "258000": 95, "9apn7x": 95, "79": 95, "83": 95, "ligolw_cbc_hardware_inj_page_id000020": 95, "post_script_fail": 95, "hostnam": 95, "avhe2010": 95, "test_workflow": 95, "970270743": 95, "ligolw_cbc_hardware_inj_pag": 95, "hardware_injection_summari": 95, "s6_cbc_hw_inject": 95, "930493015": 95, "42111800": 95, "hwinj_summary_cat_2": 95, "70012743": 95, "combined_cat_2_veto_seg": 95, "inspiral_hipe_fu": 95, "ll_data_cat_2_veto": 95, "sire_first": 95, "hwinjpagejob": 95, "id000020": 95, "kickstart": 95, "reciev": 95, "mistaken": [95, 97], "plain": 95, "logical_file_nam": 95, "physical_file_url": 95, "resid": 95, "uri": 95, "hint": 95, "beacus": 95, "syracus": 95, "vetotime_cat3": 95, "1169107218": 95, "1066800": 95, "dbrown": 95, "_analysis_tim": 95, "01_segment_data": 95, "116912": 95, "inspiral_full_data_job0": 95, "1169120586": 95, "1662": 95, "inspiral_full_data_job1": 95, "prior_data": [95, 97], "egrep": 95, "menu": 95, "06": 95, "editor": 95, "favorit": 95, "grep": [95, 97], "sed": 95, "awk": 95, "perl": 95, "tmp": [95, 97], "sugwg": 95, "configr": 95, "vetotim": 95, "cumulative_cat_12h_veto_seg": 95, "injfind": [95, 97], "foreground_censor": 95, "acomplish": 95, "reuse_cach": 95, "occasion": 95, "main_id0000001": 95, "pwd": 95, "partial_workflow": 95, "inspiral_full_data": 95, "merge_full_data": 95, "consult": 95, "expert": 95, "gridftp": 95, "blog": 95, "dokuwiki": 95, "doku": 95, "php": 95, "researchgroup": 95, "sl7_cluster_setup": 95, "htcondor": 95, "sysadmin": 95, "publicli": 95, "told": 95, "has_singular": 95, "is_glidein": 95, "lvk": 95, "authent": 95, "has_ligo_fram": 95, "schedul": 95, "enhanc": 95, "follw": 95, "periodic_hold": 95, "jobstatu": 95, "currenttim": 95, "enteredcurrentstatu": 95, "periodic_releas": 95, "holdreasoncod": 95, "numjobstart": 95, "periodic_remov": 95, "bypass": 95, "e02dab8c": 95, "singularityimag": 95, "opensciencegrid": 95, "interfer": 95, "onward": 95, "varnam": 95, "initializemodulesenv": 95, "singularitycleanenv": 95, "getenv": 95, "xsede": 95, "desired_xsede_sit": 95, "comet": 95, "wherev": [95, 96], "desired_sit": 95, "devot": 96, "pycbc_calculate_psd": 96, "pycbc_average_psd": 96, "er8": [96, 97], "1123858817": 96, "1125217722": 96, "no_intermedi": 96, "l1_hoft_c00": [96, 97, 98], "d06231daa8edf28c4760106599f86c8d8659cc3": 96, "hoft_c00_er8b_cbc": [96, 97], "12h": 96, "all_single_ifo_tim": 96, "calculate_psd": 96, "pycbc_merge_psd": 96, "plot_rang": 96, "pycbc_plot_rang": 96, "page_segt": 96, "pycbc_page_segt": 96, "page_segplot": 96, "pycbc_page_segplot": 96, "run_nam": 96, "suppos": 96, "accounting_tag": 96, "webag": 97, "pycbc_make_grb_summary_pag": 97, "gradual": 97, "pycbc_pygrb_pp_workflow": 97, "serparatli": 97, "compris": [97, 98], "8th": 97, "exttrig_seg": 97, "5264": 97, "quanta": 97, "jitter_skyloc": 97, "ligolw_cbc_jitter_skyloc": 97, "ligolw_cbc_align_total_spin": 97, "split_inspinj": 97, "em_bright_filt": 97, "pycbc_dark_vs_bright_inject": 97, "trig_combin": 97, "pylal_cbc_cohptf_trig_combin": 97, "trig_clust": 97, "pylal_cbc_cohptf_trig_clust": 97, "pylal_cbc_cohptf_injfind": 97, "injcombin": 97, "pylal_cbc_cohptf_injcombin": 97, "sbv_plotter": 97, "pylal_cbc_cohptf_sbv_plott": 97, "pylal_cbc_cohptf_effici": 97, "inj_effici": 97, "horizon_dist": 97, "pylal_cbc_cohptf_inspiral_horizon": 97, "secion": 97, "hunt": 97, "coherent_inject": 97, "2000m": 97, "generalis": 97, "protect": 97, "analysis_er8": 97, "injections_er8": 97, "postprocessing_er8": 97, "data_er8b": 97, "offline_er8": 97, "config_file_1": 97, "config_file_2": 97, "readi": [97, 98], "perhap": 97, "grb_time": 97, "1125614344": 97, "grb_name": 97, "150906b": 97, "159": 97, "239": 97, "603": 97, "lal_src": 97, "data_er8a": 97, "pygrb_offlin": 97, "arcca": 97, "pegeasu": 97, "seprat": 97, "chart": 97, "pplotsdir": 97, "htmldir": 97, "pegasus_plot": 97, "snapshot": 97, "pie": 97, "radio": 97, "gantt": 97, "wouldn": 97, "comprehens": 98, "db20ca71e65b54c0b073fd3d84d5f43fd822779": 98, "cbc_veto_definer_cleaned_c02_o2_1164556817": 98, "23176801": 98, "cat_2": 98, "cat_h": 98, "cat_1": 98, "ifonam": 98, "said": 98, "flag_1": 98, "flag_2": 98, "envisag": 98, "won": 98, "meant": 98, "altogeth": 98, "cat_3": 98, "tradition": 98, "segment_start": 98, "segment_end": 98, "shrink": 98, "disappear": 98, "segment_defin": 98, "untru": 99, "unpredicat": 99, "sort_frequency_cutoff": 99, "executables_mast": 99, "961671944": 99, "961585551": [99, 100], "tmpltbank_splittable_bank0": 99, "tmpltbank_splittable_bank1": 99, "tmpltbank_splittable_bank2": 99, "tmpltbank_splittable_bank3": 99, "tmpltbank_splittable_bank4": 99, "workflow_independent_ifos_nodata": 100, "workflow_no_ifo_variation_nodata": 100, "templtbank": 100, "length_in_second": 100, "tmpltbank_8c": 100, "961587599": 100}, "objects": {"": [[53, 0, 0, "-", "pycbc"]], "pycbc": [[53, 1, 1, "", "LogFormatter"], [53, 3, 1, "", "add_common_pycbc_options"], [53, 0, 0, "-", "bin_utils"], [53, 0, 0, "-", "boundaries"], [54, 0, 0, "-", "catalog"], [53, 0, 0, "-", "conversions"], [55, 0, 0, "-", "coordinates"], [53, 0, 0, "-", "cosmology"], [53, 0, 0, "-", "detector"], [56, 0, 0, "-", "distributions"], [53, 0, 0, "-", "dq"], [57, 0, 0, "-", "events"], [58, 0, 0, "-", "fft"], [59, 0, 0, "-", "filter"], [60, 0, 0, "-", "frame"], [53, 3, 1, "", "gps_now"], [61, 0, 0, "-", "inference"], [53, 3, 1, "", "init_logging"], [66, 0, 0, "-", "inject"], [67, 0, 0, "-", "io"], [53, 0, 0, "-", "libutils"], [68, 0, 0, "-", "live"], [53, 3, 1, "", "makedir"], [53, 0, 0, "-", "mchirp_area"], [69, 0, 0, "-", "neutron_stars"], [70, 0, 0, "-", "noise"], [53, 0, 0, "-", "opt"], [53, 0, 0, "-", "pnutils"], [53, 0, 0, "-", "pool"], [71, 0, 0, "-", "population"], [72, 0, 0, "-", "psd"], [53, 3, 1, "", "random_string"], [53, 0, 0, "-", "rate"], [73, 0, 0, "-", "results"], [53, 0, 0, "-", "scheme"], [53, 0, 0, "-", "sensitivity"], [74, 0, 0, "-", "strain"], [75, 0, 0, "-", "tmpltbank"], [53, 0, 0, "-", "transforms"], [76, 0, 0, "-", "types"], [53, 0, 0, "-", "version"], [77, 0, 0, "-", "vetoes"], [78, 0, 0, "-", "waveform"], [79, 0, 0, "-", "workflow"]], "pycbc.LogFormatter": [[53, 2, 1, "", "converter"], [53, 2, 1, "", "formatTime"]], "pycbc.bin_utils": [[53, 1, 1, "", "BinnedArray"], [53, 1, 1, "", "BinnedRatios"], [53, 1, 1, "", "Bins"], [53, 1, 1, "", "IrregularBins"], [53, 1, 1, "", "LinearBins"], [53, 1, 1, "", "LinearPlusOverflowBins"], [53, 1, 1, "", "LogarithmicBins"], [53, 1, 1, "", "LogarithmicPlusOverflowBins"], [53, 1, 1, "", "NDBins"]], "pycbc.bin_utils.BinnedArray": [[53, 2, 1, "", "argmax"], [53, 2, 1, "", "argmin"], [53, 2, 1, "", "centres"], [53, 2, 1, "", "copy"], [53, 2, 1, "", "logregularize"]], "pycbc.bin_utils.BinnedRatios": [[53, 2, 1, "", "bins"], [53, 2, 1, "", "centres"], [53, 2, 1, "", "incdenominator"], [53, 2, 1, "", "incnumerator"], [53, 2, 1, "", "logregularize"], [53, 2, 1, "", "ratio"], [53, 2, 1, "", "regularize"]], "pycbc.bin_utils.Bins": [[53, 2, 1, "", "centres"], [53, 2, 1, "", "lower"], [53, 2, 1, "", "upper"]], "pycbc.bin_utils.IrregularBins": [[53, 2, 1, "", "centres"], [53, 2, 1, "", "lower"], [53, 2, 1, "", "upper"]], "pycbc.bin_utils.LinearBins": [[53, 2, 1, "", "centres"], [53, 2, 1, "", "lower"], [53, 2, 1, "", "upper"]], "pycbc.bin_utils.LinearPlusOverflowBins": [[53, 2, 1, "", "centres"], [53, 2, 1, "", "lower"], [53, 2, 1, "", "upper"]], "pycbc.bin_utils.LogarithmicBins": [[53, 2, 1, "", "centres"], [53, 2, 1, "", "lower"], [53, 2, 1, "", "upper"]], "pycbc.bin_utils.LogarithmicPlusOverflowBins": [[53, 2, 1, "", "centres"], [53, 2, 1, "", "lower"], [53, 2, 1, "", "upper"]], "pycbc.bin_utils.NDBins": [[53, 2, 1, "", "centres"], [53, 2, 1, "", "lower"], [53, 2, 1, "", "upper"]], "pycbc.boundaries": [[53, 1, 1, "", "Bounds"], [53, 1, 1, "", "ClosedBound"], [53, 1, 1, "", "OpenBound"], [53, 1, 1, "", "ReflectedBound"], [53, 3, 1, "", "apply_cyclic"], [53, 3, 1, "", "reflect_well"]], "pycbc.boundaries.Bounds": [[53, 2, 1, "", "apply_conditions"], [53, 2, 1, "", "contains_conditioned"], [53, 4, 1, "", "cyclic"], [53, 4, 1, "", "max"], [53, 4, 1, "", "min"]], "pycbc.boundaries.ClosedBound": [[53, 2, 1, "", "larger"], [53, 5, 1, "", "name"], [53, 2, 1, "", "smaller"]], "pycbc.boundaries.OpenBound": [[53, 2, 1, "", "larger"], [53, 5, 1, "", "name"], [53, 2, 1, "", "smaller"]], "pycbc.boundaries.ReflectedBound": [[53, 5, 1, "", "name"], [53, 2, 1, "", "reflect"], [53, 2, 1, "", "reflect_left"], [53, 2, 1, "", "reflect_right"]], "pycbc.catalog": [[54, 1, 1, "", "Catalog"], [54, 1, 1, "", "Merger"], [54, 0, 0, "-", "catalog"], [54, 3, 1, "", "find_event_in_catalog"]], "pycbc.catalog.Catalog": [[54, 2, 1, "", "median1d"]], "pycbc.catalog.Merger": [[54, 2, 1, "", "median1d"], [54, 2, 1, "", "strain"]], "pycbc.catalog.catalog": [[54, 3, 1, "", "get_source"], [54, 3, 1, "", "list_catalogs"], [54, 3, 1, "", "lvk_catalogs"], [54, 3, 1, "", "populate_catalogs"]], "pycbc.conversions": [[53, 3, 1, "", "chi_a"], [53, 3, 1, "", "chi_eff"], [53, 3, 1, "", "chi_eff_from_spherical"], [53, 3, 1, "", "chi_p"], [53, 3, 1, "", "chi_p_from_spherical"], [53, 3, 1, "", "chi_p_from_xi1_xi2"], [53, 3, 1, "", "chi_perp_from_mass1_mass2_xi2"], [53, 3, 1, "", "chi_perp_from_spinx_spiny"], [53, 3, 1, "", "chirp_distance"], [53, 3, 1, "", "det_tc"], [53, 3, 1, "", "dquadmon_from_lambda"], [53, 3, 1, "", "eta_from_mass1_mass2"], [53, 3, 1, "", "eta_from_q"], [53, 3, 1, "", "eta_from_tau0_tau3"], [53, 3, 1, "", "final_mass_from_f0_tau"], [53, 3, 1, "", "final_mass_from_initial"], [53, 3, 1, "", "final_spin_from_f0_tau"], [53, 3, 1, "", "final_spin_from_initial"], [53, 3, 1, "", "freq_from_final_mass_spin"], [53, 3, 1, "", "freqlmn_from_other_lmn"], [53, 3, 1, "", "invq_from_mass1_mass2"], [53, 3, 1, "", "lambda_from_mass_tov_file"], [53, 3, 1, "", "lambda_tilde"], [53, 3, 1, "", "mass1_from_mass2_eta"], [53, 3, 1, "", "mass1_from_mchirp_eta"], [53, 3, 1, "", "mass1_from_mchirp_q"], [53, 3, 1, "", "mass1_from_mtotal_eta"], [53, 3, 1, "", "mass1_from_mtotal_q"], [53, 3, 1, "", "mass1_from_tau0_tau3"], [53, 3, 1, "", "mass2_from_mass1_eta"], [53, 3, 1, "", "mass2_from_mchirp_eta"], [53, 3, 1, "", "mass2_from_mchirp_q"], [53, 3, 1, "", "mass2_from_mtotal_eta"], [53, 3, 1, "", "mass2_from_mtotal_q"], [53, 3, 1, "", "mass2_from_tau0_tau3"], [53, 3, 1, "", "mchirp_from_mass1_mass2"], [53, 3, 1, "", "mchirp_from_tau0"], [53, 3, 1, "", "mtotal_from_mass1_mass2"], [53, 3, 1, "", "mtotal_from_mchirp_eta"], [53, 3, 1, "", "mtotal_from_tau0_tau3"], [53, 3, 1, "", "nltides_gw_phase_diff_isco"], [53, 3, 1, "", "optimal_dec_from_detector"], [53, 3, 1, "", "optimal_ra_from_detector"], [53, 3, 1, "", "phi1_from_phi_a_phi_s"], [53, 3, 1, "", "phi2_from_phi_a_phi_s"], [53, 3, 1, "", "phi_a"], [53, 3, 1, "", "phi_from_spinx_spiny"], [53, 3, 1, "", "phi_s"], [53, 3, 1, "", "primary_mass"], [53, 3, 1, "", "primary_spin"], [53, 3, 1, "", "primary_xi"], [53, 3, 1, "", "q_from_mass1_mass2"], [53, 3, 1, "", "remnant_mass_from_mass1_mass2_cartesian_spin_eos"], [53, 3, 1, "", "remnant_mass_from_mass1_mass2_spherical_spin_eos"], [53, 3, 1, "", "secondary_mass"], [53, 3, 1, "", "secondary_spin"], [53, 3, 1, "", "secondary_xi"], [53, 3, 1, "", "snr_from_loglr"], [53, 3, 1, "", "spin1x_from_xi1_phi_a_phi_s"], [53, 3, 1, "", "spin1y_from_xi1_phi_a_phi_s"], [53, 3, 1, "", "spin1z_from_mass1_mass2_chi_eff_chi_a"], [53, 3, 1, "", "spin2x_from_mass1_mass2_xi2_phi_a_phi_s"], [53, 3, 1, "", "spin2y_from_mass1_mass2_xi2_phi_a_phi_s"], [53, 3, 1, "", "spin2z_from_mass1_mass2_chi_eff_chi_a"], [53, 3, 1, "", "spin_from_pulsar_freq"], [53, 3, 1, "", "tau0_from_mass1_mass2"], [53, 3, 1, "", "tau0_from_mchirp"], [53, 3, 1, "", "tau0_from_mtotal_eta"], [53, 3, 1, "", "tau3_from_mass1_mass2"], [53, 3, 1, "", "tau3_from_mtotal_eta"], [53, 3, 1, "", "tau_from_final_mass_spin"], [53, 3, 1, "", "taulmn_from_other_lmn"], [53, 3, 1, "", "xi1_from_spin1x_spin1y"], [53, 3, 1, "", "xi2_from_mass1_mass2_spin2x_spin2y"]], "pycbc.coordinates": [[55, 0, 0, "-", "base"], [55, 3, 1, "", "cartesian_to_spherical"], [55, 3, 1, "", "cartesian_to_spherical_azimuthal"], [55, 3, 1, "", "cartesian_to_spherical_polar"], [55, 3, 1, "", "cartesian_to_spherical_rho"], [55, 3, 1, "", "earth_position_ssb"], [55, 3, 1, "", "geo_to_lisa"], [55, 3, 1, "", "geo_to_ssb"], [55, 3, 1, "", "lisa_position_ssb"], [55, 3, 1, "", "lisa_to_geo"], [55, 3, 1, "", "lisa_to_ssb"], [55, 3, 1, "", "localization_to_propagation_vector"], [55, 3, 1, "", "polarization_newframe"], [55, 3, 1, "", "propagation_vector_to_localization"], [55, 3, 1, "", "rotation_matrix_ssb_to_geo"], [55, 3, 1, "", "rotation_matrix_ssb_to_lisa"], [55, 0, 0, "-", "space"], [55, 3, 1, "", "spherical_to_cartesian"], [55, 3, 1, "", "ssb_to_geo"], [55, 3, 1, "", "ssb_to_lisa"], [55, 3, 1, "", "t_geo_from_ssb"], [55, 3, 1, "", "t_lisa_from_ssb"], [55, 3, 1, "", "t_ssb_from_t_geo"], [55, 3, 1, "", "t_ssb_from_t_lisa"]], "pycbc.coordinates.base": [[55, 3, 1, "", "cartesian_to_spherical"], [55, 3, 1, "", "cartesian_to_spherical_azimuthal"], [55, 3, 1, "", "cartesian_to_spherical_polar"], [55, 3, 1, "", "cartesian_to_spherical_rho"], [55, 3, 1, "", "spherical_to_cartesian"]], "pycbc.coordinates.space": [[55, 3, 1, "", "earth_position_ssb"], [55, 3, 1, "", "geo_to_lisa"], [55, 3, 1, "", "geo_to_ssb"], [55, 3, 1, "", "lisa_position_ssb"], [55, 3, 1, "", "lisa_to_geo"], [55, 3, 1, "", "lisa_to_ssb"], [55, 3, 1, "", "localization_to_propagation_vector"], [55, 3, 1, "", "polarization_newframe"], [55, 3, 1, "", "propagation_vector_to_localization"], [55, 3, 1, "", "rotation_matrix_ssb_to_geo"], [55, 3, 1, "", "rotation_matrix_ssb_to_lisa"], [55, 3, 1, "", "ssb_to_geo"], [55, 3, 1, "", "ssb_to_lisa"], [55, 3, 1, "", "t_geo_from_ssb"], [55, 3, 1, "", "t_lisa_from_ssb"], [55, 3, 1, "", "t_ssb_from_t_geo"], [55, 3, 1, "", "t_ssb_from_t_lisa"]], "pycbc.cosmology": [[53, 3, 1, "", "cosmological_quantity_from_redshift"], [53, 3, 1, "", "distance_from_comoving_volume"], [53, 3, 1, "", "redshift"], [53, 3, 1, "", "redshift_from_comoving_volume"]], "pycbc.detector": [[53, 1, 1, "", "Detector"], [53, 1, 1, "", "LISA"], [53, 3, 1, "", "add_detector_on_earth"], [53, 3, 1, "", "get_available_detectors"], [53, 3, 1, "", "get_available_lal_detectors"], [53, 3, 1, "", "gmst_accurate"], [53, 3, 1, "", "load_detector_config"], [53, 3, 1, "", "overhead_antenna_pattern"], [53, 3, 1, "", "ppdets"], [53, 3, 1, "", "single_arm_frequency_response"]], "pycbc.detector.Detector": [[53, 2, 1, "", "antenna_pattern"], [53, 2, 1, "", "effective_distance"], [53, 2, 1, "", "get_icrs_pos"], [53, 2, 1, "", "gmst_estimate"], [53, 2, 1, "", "lal"], [53, 2, 1, "", "light_travel_time_to_detector"], [53, 2, 1, "", "optimal_orientation"], [53, 2, 1, "", "project_wave"], [53, 2, 1, "", "set_gmst_reference"], [53, 2, 1, "", "time_delay_from_detector"], [53, 2, 1, "", "time_delay_from_earth_center"], [53, 2, 1, "", "time_delay_from_location"]], "pycbc.detector.LISA": [[53, 2, 1, "", "get_gcrs_pos"], [53, 2, 1, "", "get_pos"], [53, 2, 1, "", "time_delay_from_detector"], [53, 2, 1, "", "time_delay_from_earth_center"], [53, 2, 1, "", "time_delay_from_location"]], "pycbc.distributions": [[56, 0, 0, "-", "angular"], [56, 0, 0, "-", "arbitrary"], [56, 0, 0, "-", "bounded"], [56, 0, 0, "-", "constraints"], [56, 0, 0, "-", "external"], [56, 0, 0, "-", "fixedsamples"], [56, 0, 0, "-", "gaussian"], [56, 0, 0, "-", "joint"], [56, 0, 0, "-", "mass"], [56, 0, 0, "-", "power_law"], [56, 0, 0, "-", "qnm"], [56, 3, 1, "", "read_constraints_from_config"], [56, 3, 1, "", "read_distributions_from_config"], [56, 3, 1, "", "read_params_from_config"], [56, 0, 0, "-", "sky_location"], [56, 0, 0, "-", "spins"], [56, 0, 0, "-", "uniform"], [56, 0, 0, "-", "uniform_log"], [56, 0, 0, "-", "utils"]], "pycbc.distributions.angular": [[56, 1, 1, "", "CosAngle"], [56, 1, 1, "", "SinAngle"], [56, 1, 1, "", "UniformAngle"], [56, 1, 1, "", "UniformSolidAngle"]], "pycbc.distributions.angular.CosAngle": [[56, 5, 1, "", "name"]], "pycbc.distributions.angular.SinAngle": [[56, 5, 1, "", "name"]], "pycbc.distributions.angular.UniformAngle": [[56, 2, 1, "", "apply_boundary_conditions"], [56, 4, 1, "", "domain"], [56, 2, 1, "", "from_config"], [56, 5, 1, "", "name"]], "pycbc.distributions.angular.UniformSolidAngle": [[56, 2, 1, "", "apply_boundary_conditions"], [56, 4, 1, "", "azimuthal_angle"], [56, 4, 1, "", "bounds"], [56, 2, 1, "", "from_config"], [56, 5, 1, "", "name"], [56, 4, 1, "", "polar_angle"]], "pycbc.distributions.arbitrary": [[56, 1, 1, "", "Arbitrary"], [56, 1, 1, "", "FromFile"]], "pycbc.distributions.arbitrary.Arbitrary": [[56, 2, 1, "", "from_config"], [56, 2, 1, "", "get_kde_from_arrays"], [56, 4, 1, "", "kde"], [56, 5, 1, "", "name"], [56, 4, 1, "", "params"], [56, 2, 1, "", "rvs"], [56, 2, 1, "", "set_bandwidth"]], "pycbc.distributions.arbitrary.FromFile": [[56, 4, 1, "", "filename"], [56, 2, 1, "", "from_config"], [56, 2, 1, "", "get_arrays_from_file"], [56, 5, 1, "", "kde"], [56, 5, 1, "", "lognorm"], [56, 5, 1, "", "name"], [56, 5, 1, "", "norm"]], "pycbc.distributions.bounded": [[56, 1, 1, "", "BoundedDist"], [56, 3, 1, "", "bounded_from_config"], [56, 3, 1, "", "get_param_bounds_from_config"]], "pycbc.distributions.bounded.BoundedDist": [[56, 2, 1, "", "apply_boundary_conditions"], [56, 4, 1, "", "bounds"], [56, 2, 1, "", "cdfinv"], [56, 2, 1, "", "from_config"], [56, 2, 1, "", "logpdf"], [56, 4, 1, "", "params"], [56, 2, 1, "", "pdf"], [56, 2, 1, "", "rvs"]], "pycbc.distributions.constraints": [[56, 1, 1, "", "Constraint"], [56, 1, 1, "", "SupernovaeConvexHull"]], "pycbc.distributions.constraints.Constraint": [[56, 5, 1, "", "name"]], "pycbc.distributions.constraints.SupernovaeConvexHull": [[56, 5, 1, "", "name"], [56, 5, 1, "", "required_parameters"]], "pycbc.distributions.external": [[56, 1, 1, "", "DistributionFunctionFromFile"], [56, 1, 1, "", "External"]], "pycbc.distributions.external.DistributionFunctionFromFile": [[56, 5, 1, "", "name"]], "pycbc.distributions.external.External": [[56, 2, 1, "", "apply_boundary_conditions"], [56, 2, 1, "", "from_config"], [56, 5, 1, "", "name"], [56, 2, 1, "", "rvs"]], "pycbc.distributions.fixedsamples": [[56, 1, 1, "", "FixedSamples"]], "pycbc.distributions.fixedsamples.FixedSamples": [[56, 2, 1, "", "apply_boundary_conditions"], [56, 2, 1, "", "cdfinv"], [56, 2, 1, "", "from_config"], [56, 5, 1, "", "name"], [56, 2, 1, "", "rvs"]], "pycbc.distributions.gaussian": [[56, 1, 1, "", "Gaussian"]], "pycbc.distributions.gaussian.Gaussian": [[56, 2, 1, "", "cdf"], [56, 2, 1, "", "from_config"], [56, 4, 1, "", "mean"], [56, 5, 1, "", "name"], [56, 4, 1, "", "var"]], "pycbc.distributions.joint": [[56, 1, 1, "", "JointDistribution"]], "pycbc.distributions.joint.JointDistribution": [[56, 2, 1, "", "apply_boundary_conditions"], [56, 4, 1, "", "bounds"], [56, 2, 1, "", "cdfinv"], [56, 5, 1, "", "constraints"], [56, 2, 1, "", "contains"], [56, 4, 1, "", "cyclic"], [56, 5, 1, "", "distributions"], [56, 5, 1, "", "name"], [56, 2, 1, "", "rvs"], [56, 5, 1, "", "variable_args"], [56, 4, 1, "", "well_reflected"], [56, 2, 1, "", "within_constraints"]], "pycbc.distributions.mass": [[56, 1, 1, "", "MchirpfromUniformMass1Mass2"], [56, 1, 1, "", "QfromUniformMass1Mass2"]], "pycbc.distributions.mass.MchirpfromUniformMass1Mass2": [[56, 5, 1, "", "name"]], "pycbc.distributions.mass.QfromUniformMass1Mass2": [[56, 2, 1, "", "from_config"], [56, 4, 1, "", "lognorm"], [56, 5, 1, "", "name"], [56, 4, 1, "", "norm"], [56, 2, 1, "", "rvs"]], "pycbc.distributions.power_law": [[56, 1, 1, "", "UniformPowerLaw"], [56, 1, 1, "", "UniformRadius"]], "pycbc.distributions.power_law.UniformPowerLaw": [[56, 5, 1, "", "dim"], [56, 2, 1, "", "from_config"], [56, 4, 1, "", "lognorm"], [56, 5, 1, "", "name"], [56, 4, 1, "", "norm"]], "pycbc.distributions.power_law.UniformRadius": [[56, 5, 1, "", "name"]], "pycbc.distributions.qnm": [[56, 1, 1, "", "UniformF0Tau"]], "pycbc.distributions.qnm.UniformF0Tau": [[56, 2, 1, "", "from_config"], [56, 5, 1, "", "name"], [56, 2, 1, "", "rvs"]], "pycbc.distributions.sky_location": [[56, 1, 1, "", "FisherSky"], [56, 1, 1, "", "UniformSky"]], "pycbc.distributions.sky_location.FisherSky": [[56, 2, 1, "", "from_config"], [56, 5, 1, "", "name"], [56, 4, 1, "", "params"], [56, 2, 1, "", "rvs"]], "pycbc.distributions.sky_location.UniformSky": [[56, 5, 1, "", "name"]], "pycbc.distributions.spins": [[56, 1, 1, "", "IndependentChiPChiEff"]], "pycbc.distributions.spins.IndependentChiPChiEff": [[56, 2, 1, "", "apply_boundary_conditions"], [56, 2, 1, "", "from_config"], [56, 5, 1, "", "name"], [56, 2, 1, "", "rvs"]], "pycbc.distributions.uniform": [[56, 1, 1, "", "Uniform"]], "pycbc.distributions.uniform.Uniform": [[56, 2, 1, "", "from_config"], [56, 4, 1, "", "lognorm"], [56, 5, 1, "", "name"], [56, 4, 1, "", "norm"]], "pycbc.distributions.uniform_log": [[56, 1, 1, "", "UniformLog10"]], "pycbc.distributions.uniform_log.UniformLog10": [[56, 5, 1, "", "name"]], "pycbc.distributions.utils": [[56, 3, 1, "", "draw_samples_from_config"], [56, 3, 1, "", "prior_from_config"]], "pycbc.dq": [[53, 3, 1, "", "parse_flag_str"], [53, 3, 1, "", "parse_veto_definer"], [53, 3, 1, "", "query_cumulative_flags"], [53, 3, 1, "", "query_dqsegdb2"], [53, 3, 1, "", "query_flag"], [53, 3, 1, "", "query_str"]], "pycbc.events": [[57, 0, 0, "-", "coherent"], [57, 0, 0, "-", "coinc"], [57, 0, 0, "-", "coinc_rate"], [57, 0, 0, "-", "cuts"], [57, 0, 0, "-", "eventmgr"], [57, 0, 0, "-", "eventmgr_cython"], [57, 0, 0, "-", "ranking"], [57, 0, 0, "-", "significance"], [57, 0, 0, "-", "simd_threshold_cython"], [57, 0, 0, "-", "single"], [57, 0, 0, "-", "stat"], [57, 0, 0, "-", "threshold_cpu"], [57, 0, 0, "-", "trigger_fits"], [57, 0, 0, "-", "triggers"], [57, 0, 0, "-", "veto"]], "pycbc.events.coherent": [[57, 3, 1, "", "coherent_snr"], [57, 3, 1, "", "coincident_snr"], [57, 3, 1, "", "get_coinc_indexes"], [57, 3, 1, "", "get_coinc_triggers"], [57, 3, 1, "", "get_projection_matrix"], [57, 3, 1, "", "network_chisq"], [57, 3, 1, "", "null_snr"], [57, 3, 1, "", "reweight_snr_by_null"], [57, 3, 1, "", "reweightedsnr_cut"]], "pycbc.events.coinc": [[57, 1, 1, "", "CoincExpireBuffer"], [57, 1, 1, "", "LiveCoincTimeslideBackgroundEstimator"], [57, 1, 1, "", "MultiRingBuffer"], [57, 3, 1, "", "background_bin_from_string"], [57, 3, 1, "", "cluster_coincs"], [57, 3, 1, "", "cluster_coincs_multiifo"], [57, 3, 1, "", "cluster_over_time"], [57, 3, 1, "", "mean_if_greater_than_zero"], [57, 3, 1, "", "time_coincidence"], [57, 3, 1, "", "time_multi_coincidence"], [57, 3, 1, "", "timeslide_durations"]], "pycbc.events.coinc.CoincExpireBuffer": [[57, 2, 1, "", "add"], [57, 4, 1, "", "data"], [57, 2, 1, "", "increment"], [57, 4, 1, "", "nbytes"], [57, 2, 1, "", "num_greater"], [57, 2, 1, "", "remove"]], "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator": [[57, 2, 1, "", "add_singles"], [57, 4, 1, "", "background_time"], [57, 2, 1, "", "backout_last"], [57, 2, 1, "", "from_cli"], [57, 2, 1, "", "ifar"], [57, 2, 1, "", "insert_args"], [57, 2, 1, "", "pick_best_coinc"], [57, 2, 1, "", "restore_state"], [57, 2, 1, "", "save_state"], [57, 2, 1, "", "set_singles_buffer"], [57, 2, 1, "", "verify_args"]], "pycbc.events.coinc.MultiRingBuffer": [[57, 2, 1, "", "add"], [57, 2, 1, "", "advance_time"], [57, 2, 1, "", "check_expired_triggers"], [57, 2, 1, "", "data"], [57, 2, 1, "", "discard_last"], [57, 2, 1, "", "expire_vector"], [57, 4, 1, "", "filled_time"], [57, 4, 1, "", "nbytes"], [57, 2, 1, "", "num_elements"], [57, 2, 1, "", "update_valid_start"], [57, 2, 1, "", "valid_slice"]], "pycbc.events.coinc_rate": [[57, 3, 1, "", "combination_noise_lograte"], [57, 3, 1, "", "combination_noise_rate"], [57, 3, 1, "", "multiifo_noise_coincident_area"], [57, 3, 1, "", "multiifo_noise_lograte"], [57, 3, 1, "", "multiifo_signal_coincident_area"]], "pycbc.events.cuts": [[57, 3, 1, "", "apply_template_cuts"], [57, 3, 1, "", "apply_template_fit_cut"], [57, 3, 1, "", "apply_trigger_cuts"], [57, 3, 1, "", "check_update_cuts"], [57, 3, 1, "", "convert_inputstr"], [57, 3, 1, "", "ingest_cuts_option_group"], [57, 3, 1, "", "insert_cuts_option_group"], [57, 3, 1, "", "sigma_multiple_cut_thresh"]], "pycbc.events.eventmgr": [[57, 1, 1, "", "EventManager"], [57, 1, 1, "", "EventManagerCoherent"], [57, 1, 1, "", "EventManagerMultiDet"], [57, 1, 1, "", "ThresholdCluster"], [57, 3, 1, "", "cluster_reduce"], [57, 3, 1, "", "findchirp_cluster_over_window"], [57, 3, 1, "", "threshold"], [57, 3, 1, "", "threshold_and_cluster"], [57, 3, 1, "", "threshold_only"], [57, 3, 1, "", "threshold_real_numpy"]], "pycbc.events.eventmgr.EventManager": [[57, 2, 1, "", "add_template_events"], [57, 2, 1, "", "add_template_params"], [57, 2, 1, "", "chisq_threshold"], [57, 2, 1, "", "cluster_template_events"], [57, 2, 1, "", "consolidate_events"], [57, 2, 1, "", "finalize_events"], [57, 2, 1, "", "finalize_template_events"], [57, 2, 1, "", "from_multi_ifo_interface"], [57, 2, 1, "", "keep_loudest_in_interval"], [57, 2, 1, "", "keep_near_injection"], [57, 2, 1, "", "make_output_dir"], [57, 2, 1, "", "new_template"], [57, 2, 1, "", "newsnr_threshold"], [57, 2, 1, "", "restore_state"], [57, 2, 1, "", "save_performance"], [57, 2, 1, "", "save_state"], [57, 2, 1, "", "write_events"], [57, 2, 1, "", "write_to_hdf"]], "pycbc.events.eventmgr.EventManagerCoherent": [[57, 2, 1, "", "add_template_events_to_network"], [57, 2, 1, "", "add_template_network_events"], [57, 2, 1, "", "cluster_template_network_events"], [57, 2, 1, "", "finalize_template_events"], [57, 2, 1, "", "write_to_hdf"]], "pycbc.events.eventmgr.EventManagerMultiDet": [[57, 2, 1, "", "cluster_template_events_single_ifo"], [57, 2, 1, "", "finalize_template_events"], [57, 2, 1, "", "write_to_hdf"]], "pycbc.events.eventmgr_cython": [[57, 3, 1, "", "coincbuffer_expireelements"], [57, 3, 1, "", "coincbuffer_numgreater"], [57, 3, 1, "", "findchirp_cluster_over_window_cython"], [57, 3, 1, "", "logsignalrateinternals_compute2detrate"], [57, 3, 1, "", "logsignalrateinternals_computepsignalbins"], [57, 3, 1, "", "timecluster_cython"], [57, 3, 1, "", "timecoincidence_constructfold"], [57, 3, 1, "", "timecoincidence_constructidxs"], [57, 3, 1, "", "timecoincidence_findidxlen"], [57, 3, 1, "", "timecoincidence_getslideint"]], "pycbc.events.ranking": [[57, 3, 1, "", "effsnr"], [57, 3, 1, "", "get_newsnr"], [57, 3, 1, "", "get_newsnr_sgveto"], [57, 3, 1, "", "get_newsnr_sgveto_psdvar"], [57, 3, 1, "", "get_newsnr_sgveto_psdvar_scaled"], [57, 3, 1, "", "get_newsnr_sgveto_psdvar_scaled_threshold"], [57, 3, 1, "", "get_newsnr_sgveto_psdvar_threshold"], [57, 3, 1, "", "get_sngls_ranking_from_trigs"], [57, 3, 1, "", "get_snr"], [57, 3, 1, "", "newsnr"], [57, 3, 1, "", "newsnr_sgveto"], [57, 3, 1, "", "newsnr_sgveto_psdvar"], [57, 3, 1, "", "newsnr_sgveto_psdvar_scaled"], [57, 3, 1, "", "newsnr_sgveto_psdvar_scaled_threshold"], [57, 3, 1, "", "newsnr_sgveto_psdvar_threshold"]], "pycbc.events.significance": [[57, 3, 1, "", "apply_far_limit"], [57, 3, 1, "", "check_significance_options"], [57, 3, 1, "", "count_n_louder"], [57, 3, 1, "", "digest_significance_options"], [57, 3, 1, "", "get_far"], [57, 3, 1, "", "get_n_louder"], [57, 3, 1, "", "ifar_opt_to_far_limit"], [57, 3, 1, "", "insert_significance_option_group"], [57, 3, 1, "", "n_louder_from_fit"], [57, 3, 1, "", "positive_float"]], "pycbc.events.simd_threshold_cython": [[57, 3, 1, "", "parallel_thresh_cluster"], [57, 3, 1, "", "parallel_threshold"]], "pycbc.events.single": [[57, 1, 1, "", "LiveSingle"]], "pycbc.events.single.LiveSingle": [[57, 2, 1, "", "calculate_ifar"], [57, 2, 1, "", "check"], [57, 2, 1, "", "from_cli"], [57, 2, 1, "", "insert_args"], [57, 2, 1, "", "verify_args"]], "pycbc.events.stat": [[57, 1, 1, "", "DQExpFitFgBgKDEStatistic"], [57, 1, 1, "", "DQExpFitFgBgNormStatistic"], [57, 1, 1, "", "ExpFitBgRateStatistic"], [57, 1, 1, "", "ExpFitCombinedSNR"], [57, 1, 1, "", "ExpFitFgBgKDEStatistic"], [57, 1, 1, "", "ExpFitFgBgNormBBHStatistic"], [57, 1, 1, "", "ExpFitFgBgNormStatistic"], [57, 1, 1, "", "ExpFitStatistic"], [57, 1, 1, "", "PhaseTDExpFitStatistic"], [57, 1, 1, "", "PhaseTDStatistic"], [57, 1, 1, "", "QuadratureSumStatistic"], [57, 1, 1, "", "Stat"], [57, 3, 1, "", "get_statistic"], [57, 3, 1, "", "get_statistic_from_opts"], [57, 3, 1, "", "insert_statistic_option_group"], [57, 3, 1, "", "parse_statistic_keywords_opt"]], "pycbc.events.stat.DQExpFitFgBgKDEStatistic": [[57, 2, 1, "", "coinc_lim_for_thresh"], [57, 2, 1, "", "kde_ratio"], [57, 2, 1, "", "logsignalrate"], [57, 2, 1, "", "rank_stat_single"]], "pycbc.events.stat.DQExpFitFgBgNormStatistic": [[57, 2, 1, "", "assign_dq_rates"], [57, 2, 1, "", "assign_template_bins"], [57, 2, 1, "", "find_dq_noise_rate"], [57, 2, 1, "", "find_dq_state_by_time"], [57, 2, 1, "", "lognoiserate"], [57, 2, 1, "", "setup_segments"]], "pycbc.events.stat.ExpFitBgRateStatistic": [[57, 2, 1, "", "coinc_lim_for_thresh"], [57, 2, 1, "", "rank_stat_coinc"], [57, 2, 1, "", "reassign_rate"]], "pycbc.events.stat.ExpFitCombinedSNR": [[57, 2, 1, "", "coinc_lim_for_thresh"], [57, 2, 1, "", "rank_stat_coinc"], [57, 2, 1, "", "rank_stat_single"], [57, 2, 1, "", "single"], [57, 2, 1, "", "use_alphamax"]], "pycbc.events.stat.ExpFitFgBgKDEStatistic": [[57, 2, 1, "", "assign_kdes"], [57, 2, 1, "", "coinc_lim_for_thresh"], [57, 2, 1, "", "find_kdes"], [57, 2, 1, "", "kde_ratio"], [57, 2, 1, "", "logsignalrate"], [57, 2, 1, "", "rank_stat_single"]], "pycbc.events.stat.ExpFitFgBgNormBBHStatistic": [[57, 2, 1, "", "coinc_lim_for_thresh"], [57, 2, 1, "", "logsignalrate"], [57, 2, 1, "", "rank_stat_coinc"], [57, 2, 1, "", "rank_stat_single"], [57, 2, 1, "", "single"]], "pycbc.events.stat.ExpFitFgBgNormStatistic": [[57, 2, 1, "", "assign_median_sigma"], [57, 2, 1, "", "coinc_lim_for_thresh"], [57, 2, 1, "", "lognoiserate"], [57, 2, 1, "", "rank_stat_coinc"], [57, 2, 1, "", "rank_stat_single"], [57, 2, 1, "", "single"]], "pycbc.events.stat.ExpFitStatistic": [[57, 2, 1, "", "assign_fits"], [57, 2, 1, "", "coinc_OLD"], [57, 2, 1, "", "coinc_lim_for_thresh"], [57, 2, 1, "", "coinc_lim_for_thresh_OLD"], [57, 2, 1, "", "find_fits"], [57, 2, 1, "", "get_ref_vals"], [57, 2, 1, "", "lognoiserate"], [57, 2, 1, "", "rank_stat_coinc"], [57, 2, 1, "", "rank_stat_single"], [57, 2, 1, "", "single"]], "pycbc.events.stat.PhaseTDExpFitStatistic": [[57, 2, 1, "", "coinc_OLD"], [57, 2, 1, "", "coinc_lim_for_thresh"], [57, 2, 1, "", "coinc_lim_for_thresh_OLD"], [57, 2, 1, "", "rank_stat_coinc"], [57, 2, 1, "", "rank_stat_single"], [57, 2, 1, "", "single"]], "pycbc.events.stat.PhaseTDStatistic": [[57, 2, 1, "", "coinc_lim_for_thresh"], [57, 2, 1, "", "get_hist"], [57, 2, 1, "", "logsignalrate"], [57, 2, 1, "", "rank_stat_coinc"], [57, 2, 1, "", "rank_stat_single"], [57, 2, 1, "", "single"]], "pycbc.events.stat.QuadratureSumStatistic": [[57, 2, 1, "", "coinc_lim_for_thresh"], [57, 2, 1, "", "rank_stat_coinc"], [57, 2, 1, "", "rank_stat_single"], [57, 2, 1, "", "single"]], "pycbc.events.stat.Stat": [[57, 2, 1, "", "coinc_lim_for_thresh"], [57, 2, 1, "", "get_sngl_ranking"], [57, 2, 1, "", "rank_stat_coinc"], [57, 2, 1, "", "rank_stat_single"], [57, 2, 1, "", "single"]], "pycbc.events.threshold_cpu": [[57, 1, 1, "", "CPUThresholdCluster"], [57, 3, 1, "", "threshold"], [57, 3, 1, "", "threshold_inline"], [57, 3, 1, "", "threshold_numpy"], [57, 3, 1, "", "threshold_only"]], "pycbc.events.threshold_cpu.CPUThresholdCluster": [[57, 2, 1, "", "threshold_and_cluster"]], "pycbc.events.trigger_fits": [[57, 3, 1, "", "KS_test"], [57, 3, 1, "", "cum_fit"], [57, 3, 1, "", "exponential_fitalpha"], [57, 3, 1, "", "fit_above_thresh"], [57, 3, 1, "", "fit_fn"], [57, 3, 1, "", "power_fitalpha"], [57, 3, 1, "", "rayleigh_fitalpha"], [57, 3, 1, "", "tail_threshold"], [57, 3, 1, "", "which_bin"]], "pycbc.events.triggers": [[57, 3, 1, "", "bank_bins_from_cli"], [57, 3, 1, "", "get_found_param"], [57, 3, 1, "", "get_inj_param"], [57, 3, 1, "", "get_mass_spin"], [57, 3, 1, "", "get_param"], [57, 3, 1, "", "insert_bank_bins_option_group"]], "pycbc.events.veto": [[57, 3, 1, "", "get_segment_definer_comments"], [57, 3, 1, "", "indices_outside_segments"], [57, 3, 1, "", "indices_outside_times"], [57, 3, 1, "", "indices_within_segments"], [57, 3, 1, "", "indices_within_times"], [57, 3, 1, "", "segments_to_start_end"], [57, 3, 1, "", "select_segments_by_definer"], [57, 3, 1, "", "start_end_from_segments"], [57, 3, 1, "", "start_end_to_segments"]], "pycbc.fft": [[58, 0, 0, "-", "backend_cpu"], [58, 0, 0, "-", "backend_mkl"], [58, 0, 0, "-", "backend_support"], [58, 0, 0, "-", "class_api"], [58, 0, 0, "-", "core"], [58, 0, 0, "-", "fft_callback"], [58, 0, 0, "-", "fftw"], [58, 0, 0, "-", "fftw_pruned"], [58, 0, 0, "-", "fftw_pruned_cython"], [58, 0, 0, "-", "func_api"], [58, 0, 0, "-", "mkl"], [58, 0, 0, "-", "npfft"], [58, 0, 0, "-", "parser_support"]], "pycbc.fft.backend_cpu": [[58, 3, 1, "", "get_backend"], [58, 3, 1, "", "set_backend"]], "pycbc.fft.backend_mkl": [[58, 3, 1, "", "get_backend"], [58, 3, 1, "", "set_backend"]], "pycbc.fft.backend_support": [[58, 3, 1, "", "get_backend"], [58, 3, 1, "", "get_backend_modules"], [58, 3, 1, "", "get_backend_names"], [58, 3, 1, "", "set_backend"]], "pycbc.fft.class_api": [[58, 1, 1, "", "FFT"], [58, 1, 1, "", "IFFT"]], "pycbc.fft.fft_callback": [[58, 3, 1, "", "c2c_correlate_ifft"], [58, 3, 1, "", "c2c_half_correlate_ifft"], [58, 3, 1, "", "compile"], [58, 3, 1, "", "get_fn_plan"], [58, 1, 1, "", "param"], [58, 1, 1, "", "param2"]], "pycbc.fft.fft_callback.param": [[58, 5, 1, "", "htilde"]], "pycbc.fft.fft_callback.param2": [[58, 5, 1, "", "htilde"], [58, 5, 1, "", "in_kmax"], [58, 5, 1, "", "out_kmax"], [58, 5, 1, "", "out_kmin"]], "pycbc.fft.fftw": [[58, 1, 1, "", "FFT"], [58, 1, 1, "", "IFFT"], [58, 3, 1, "", "execute"], [58, 3, 1, "", "export_double_wisdom_to_filename"], [58, 3, 1, "", "export_single_wisdom_to_filename"], [58, 3, 1, "", "fft"], [58, 3, 1, "", "from_cli"], [58, 3, 1, "", "get_flag"], [58, 3, 1, "", "get_measure_level"], [58, 3, 1, "", "ifft"], [58, 3, 1, "", "import_double_wisdom_from_filename"], [58, 3, 1, "", "import_single_wisdom_from_filename"], [58, 3, 1, "", "import_sys_wisdom"], [58, 3, 1, "", "insert_fft_options"], [58, 3, 1, "", "plan"], [58, 3, 1, "", "set_measure_level"], [58, 3, 1, "", "set_planning_limit"], [58, 3, 1, "", "set_threads_backend"], [58, 3, 1, "", "verify_fft_options"], [58, 3, 1, "", "wisdom_io"]], "pycbc.fft.fftw.FFT": [[58, 2, 1, "", "execute"]], "pycbc.fft.fftw.IFFT": [[58, 2, 1, "", "execute"]], "pycbc.fft.fftw_pruned": [[58, 3, 1, "", "fft_transpose"], [58, 3, 1, "", "fft_transpose_fftw"], [58, 3, 1, "", "first_phase"], [58, 3, 1, "", "plan_first_phase"], [58, 3, 1, "", "plan_transpose"], [58, 3, 1, "", "pruned_c2cifft"], [58, 3, 1, "", "second_phase"], [58, 3, 1, "", "splay"]], "pycbc.fft.fftw_pruned_cython": [[58, 3, 1, "", "second_phase_cython"]], "pycbc.fft.func_api": [[58, 3, 1, "", "fft"], [58, 3, 1, "", "ifft"]], "pycbc.fft.mkl": [[58, 1, 1, "", "FFT"], [58, 1, 1, "", "IFFT"], [58, 3, 1, "", "check_status"], [58, 3, 1, "", "create_descriptor"], [58, 3, 1, "", "fft"], [58, 3, 1, "", "ifft"]], "pycbc.fft.mkl.FFT": [[58, 2, 1, "", "execute"]], "pycbc.fft.mkl.IFFT": [[58, 2, 1, "", "execute"]], "pycbc.fft.npfft": [[58, 1, 1, "", "FFT"], [58, 1, 1, "", "IFFT"], [58, 3, 1, "", "fft"], [58, 3, 1, "", "ifft"]], "pycbc.fft.npfft.FFT": [[58, 2, 1, "", "execute"]], "pycbc.fft.npfft.IFFT": [[58, 2, 1, "", "execute"]], "pycbc.fft.parser_support": [[58, 3, 1, "", "from_cli"], [58, 3, 1, "", "insert_fft_option_group"], [58, 3, 1, "", "verify_fft_options"]], "pycbc.filter": [[59, 0, 0, "-", "autocorrelation"], [59, 0, 0, "-", "matchedfilter"], [59, 0, 0, "-", "matchedfilter_cpu"], [59, 0, 0, "-", "matchedfilter_numpy"], [59, 0, 0, "-", "qtransform"], [59, 0, 0, "-", "resample"], [59, 0, 0, "-", "simd_correlate"], [59, 0, 0, "-", "simd_correlate_cython"], [59, 0, 0, "-", "zpk"]], "pycbc.filter.autocorrelation": [[59, 3, 1, "", "calculate_acf"], [59, 3, 1, "", "calculate_acl"]], "pycbc.filter.matchedfilter": [[59, 1, 1, "", "LiveBatchMatchedFilter"], [59, 1, 1, "", "MatchedFilterControl"], [59, 1, 1, "", "MatchedFilterSkyMaxControl"], [59, 1, 1, "", "MatchedFilterSkyMaxControlNoPhase"], [59, 3, 1, "", "compute_followup_snr_series"], [59, 3, 1, "", "compute_max_snr_over_sky_loc_stat"], [59, 3, 1, "", "compute_max_snr_over_sky_loc_stat_no_phase"], [59, 3, 1, "", "compute_u_val_for_sky_loc_stat"], [59, 3, 1, "", "compute_u_val_for_sky_loc_stat_no_phase"], [59, 3, 1, "", "correlate"], [59, 3, 1, "", "followup_event_significance"], [59, 3, 1, "", "get_cutoff_indices"], [59, 3, 1, "", "make_frequency_series"], [59, 3, 1, "", "match"], [59, 3, 1, "", "matched_filter"], [59, 3, 1, "", "matched_filter_core"], [59, 3, 1, "", "optimized_match"], [59, 3, 1, "", "overlap"], [59, 3, 1, "", "overlap_cplx"], [59, 3, 1, "", "sigma"], [59, 3, 1, "", "sigmasq"], [59, 3, 1, "", "sigmasq_series"]], "pycbc.filter.matchedfilter.LiveBatchMatchedFilter": [[59, 2, 1, "", "combine_results"], [59, 2, 1, "", "process_all"], [59, 2, 1, "", "process_data"], [59, 2, 1, "", "set_data"]], "pycbc.filter.matchedfilter.MatchedFilterControl": [[59, 2, 1, "", "full_matched_filter_and_cluster_fc"], [59, 2, 1, "", "full_matched_filter_and_cluster_symm"], [59, 2, 1, "", "full_matched_filter_thresh_only"], [59, 2, 1, "", "hierarchical_matched_filter_and_cluster"]], "pycbc.filter.matchedfilter.MatchedFilterSkyMaxControl": [[59, 2, 1, "", "full_matched_filter_and_cluster"]], "pycbc.filter.matchedfilter_cpu": [[59, 1, 1, "", "CPUCorrelator"], [59, 3, 1, "", "batch_correlate_execute"], [59, 3, 1, "", "correlate"], [59, 3, 1, "", "correlate_numpy"]], "pycbc.filter.matchedfilter_cpu.CPUCorrelator": [[59, 2, 1, "", "correlate"]], "pycbc.filter.matchedfilter_numpy": [[59, 3, 1, "", "correlate"]], "pycbc.filter.qtransform": [[59, 3, 1, "", "deltam_f"], [59, 3, 1, "", "qplane"], [59, 3, 1, "", "qseries"], [59, 3, 1, "", "qtiling"]], "pycbc.filter.resample": [[59, 3, 1, "", "fir_zero_filter"], [59, 3, 1, "", "highpass"], [59, 3, 1, "", "highpass_fir"], [59, 3, 1, "", "interpolate_complex_frequency"], [59, 3, 1, "", "lowpass"], [59, 3, 1, "", "lowpass_fir"], [59, 3, 1, "", "notch_fir"], [59, 3, 1, "", "resample_to_delta_t"]], "pycbc.filter.simd_correlate": [[59, 3, 1, "", "correlate_parallel"], [59, 3, 1, "", "correlate_simd"]], "pycbc.filter.simd_correlate_cython": [[59, 3, 1, "", "ccorrf_parallel"], [59, 3, 1, "", "ccorrf_simd"]], "pycbc.filter.zpk": [[59, 3, 1, "", "filter_zpk"]], "pycbc.frame": [[60, 3, 1, "", "flag_names_to_bitmask"], [60, 0, 0, "-", "frame"], [60, 0, 0, "-", "gwosc"], [60, 0, 0, "-", "store"]], "pycbc.frame.frame": [[60, 1, 1, "", "DataBuffer"], [60, 1, 1, "", "StatusBuffer"], [60, 3, 1, "", "frame_paths"], [60, 1, 1, "", "iDQBuffer"], [60, 3, 1, "", "locations_to_cache"], [60, 3, 1, "", "query_and_read_frame"], [60, 3, 1, "", "read_frame"], [60, 3, 1, "", "write_frame"]], "pycbc.frame.frame.DataBuffer": [[60, 2, 1, "", "advance"], [60, 2, 1, "", "attempt_advance"], [60, 2, 1, "", "null_advance"], [60, 2, 1, "", "update_cache"], [60, 2, 1, "", "update_cache_by_increment"]], "pycbc.frame.frame.StatusBuffer": [[60, 2, 1, "", "advance"], [60, 2, 1, "", "check_valid"], [60, 2, 1, "", "indices_of_flag"], [60, 2, 1, "", "is_extent_valid"]], "pycbc.frame.frame.iDQBuffer": [[60, 2, 1, "", "advance"], [60, 2, 1, "", "indices_of_flag"], [60, 2, 1, "", "null_advance"]], "pycbc.frame.gwosc": [[60, 3, 1, "", "get_run"], [60, 3, 1, "", "gwosc_frame_json"], [60, 3, 1, "", "gwosc_frame_urls"], [60, 3, 1, "", "read_frame_gwosc"], [60, 3, 1, "", "read_strain_gwosc"]], "pycbc.frame.store": [[60, 3, 1, "", "read_store"]], "pycbc.inference": [[61, 0, 0, "-", "burn_in"], [61, 0, 0, "-", "entropy"], [61, 0, 0, "-", "evidence"], [61, 0, 0, "-", "gelman_rubin"], [61, 0, 0, "-", "geweke"], [62, 0, 0, "-", "io"], [63, 0, 0, "-", "jump"], [64, 0, 0, "-", "models"], [61, 0, 0, "-", "option_utils"], [65, 0, 0, "-", "sampler"]], "pycbc.inference.burn_in": [[61, 1, 1, "", "BaseBurnInTests"], [61, 1, 1, "", "EnsembleMCMCBurnInTests"], [61, 1, 1, "", "EnsembleMultiTemperedMCMCBurnInTests"], [61, 1, 1, "", "MCMCBurnInTests"], [61, 1, 1, "", "MultiTemperedMCMCBurnInTests"], [61, 3, 1, "", "evaluate_tests"], [61, 3, 1, "", "ks_test"], [61, 3, 1, "", "max_posterior"], [61, 3, 1, "", "nacl"], [61, 3, 1, "", "posterior_step"]], "pycbc.inference.burn_in.BaseBurnInTests": [[61, 5, 1, "", "available_tests"], [61, 2, 1, "", "burn_in_index"], [61, 2, 1, "", "evaluate"], [61, 2, 1, "", "from_config"], [61, 2, 1, "", "halfchain"], [61, 2, 1, "", "max_posterior"], [61, 2, 1, "", "min_iterations"], [61, 2, 1, "", "nacl"], [61, 2, 1, "", "posterior_step"], [61, 2, 1, "", "write"]], "pycbc.inference.burn_in.EnsembleMCMCBurnInTests": [[61, 5, 1, "", "available_tests"], [61, 2, 1, "", "burn_in_index"], [61, 2, 1, "", "evaluate"], [61, 2, 1, "", "ks_test"], [61, 2, 1, "", "max_posterior"], [61, 2, 1, "", "nacl"], [61, 2, 1, "", "posterior_step"]], "pycbc.inference.burn_in.MCMCBurnInTests": [[61, 2, 1, "", "burn_in_index"], [61, 2, 1, "", "evaluate"], [61, 2, 1, "", "max_posterior"], [61, 2, 1, "", "nacl"], [61, 2, 1, "", "posterior_step"], [61, 2, 1, "", "write"]], "pycbc.inference.entropy": [[61, 3, 1, "", "check_hist_params"], [61, 3, 1, "", "compute_pdf"], [61, 3, 1, "", "entropy"], [61, 3, 1, "", "js"], [61, 3, 1, "", "kl"]], "pycbc.inference.evidence": [[61, 3, 1, "", "arithmetic_mean_estimator"], [61, 3, 1, "", "harmonic_mean_estimator"], [61, 3, 1, "", "stepping_stone_algorithm"], [61, 3, 1, "", "thermodynamic_integration"]], "pycbc.inference.gelman_rubin": [[61, 3, 1, "", "gelman_rubin"], [61, 3, 1, "", "walk"]], "pycbc.inference.geweke": [[61, 3, 1, "", "geweke"]], "pycbc.inference.io": [[62, 6, 1, "", "NoInputFileError"], [62, 1, 1, "", "PrintFileParams"], [62, 1, 1, "", "ResultsArgumentParser"], [62, 0, 0, "-", "base_hdf"], [62, 0, 0, "-", "base_mcmc"], [62, 0, 0, "-", "base_multitemper"], [62, 0, 0, "-", "base_nested_sampler"], [62, 0, 0, "-", "base_sampler"], [62, 3, 1, "", "check_integrity"], [62, 0, 0, "-", "dynesty"], [62, 0, 0, "-", "emcee"], [62, 0, 0, "-", "emcee_pt"], [62, 0, 0, "-", "epsie"], [62, 3, 1, "", "get_common_parameters"], [62, 3, 1, "", "get_file_type"], [62, 3, 1, "", "injections_from_cli"], [62, 3, 1, "", "loadfile"], [62, 0, 0, "-", "multinest"], [62, 0, 0, "-", "nessai"], [62, 0, 0, "-", "posterior"], [62, 0, 0, "-", "ptemcee"], [62, 3, 1, "", "results_from_cli"], [62, 0, 0, "-", "snowline"], [62, 0, 0, "-", "txt"], [62, 0, 0, "-", "ultranest"], [62, 3, 1, "", "validate_checkpoint_files"]], "pycbc.inference.io.ResultsArgumentParser": [[62, 4, 1, "", "actions"], [62, 2, 1, "", "add_results_option_group"], [62, 2, 1, "", "parse_known_args"]], "pycbc.inference.io.base_hdf": [[62, 1, 1, "", "BaseInferenceFile"], [62, 3, 1, "", "format_attr"]], "pycbc.inference.io.base_hdf.BaseInferenceFile": [[62, 4, 1, "", "cmd"], [62, 5, 1, "", "config_group"], [62, 2, 1, "", "copy"], [62, 2, 1, "", "copy_info"], [62, 2, 1, "", "copy_metadata"], [62, 2, 1, "", "copy_samples"], [62, 5, 1, "", "data_group"], [62, 4, 1, "", "effective_nsamples"], [62, 2, 1, "", "extra_args_parser"], [62, 2, 1, "", "get_slice"], [62, 2, 1, "", "getattrs"], [62, 5, 1, "", "injections_group"], [62, 4, 1, "", "log_evidence"], [62, 5, 1, "", "name"], [62, 2, 1, "", "parse_parameters"], [62, 2, 1, "", "read_config_file"], [62, 2, 1, "", "read_data"], [62, 2, 1, "", "read_injections"], [62, 2, 1, "", "read_psds"], [62, 2, 1, "", "read_random_state"], [62, 2, 1, "", "read_raw_samples"], [62, 2, 1, "", "read_samples"], [62, 5, 1, "", "sampler_group"], [62, 2, 1, "", "samples_from_cli"], [62, 5, 1, "", "samples_group"], [62, 4, 1, "", "static_params"], [62, 4, 1, "", "thin_end"], [62, 4, 1, "", "thin_interval"], [62, 4, 1, "", "thin_start"], [62, 2, 1, "", "write_command_line"], [62, 2, 1, "", "write_config_file"], [62, 2, 1, "", "write_data"], [62, 2, 1, "", "write_effective_nsamples"], [62, 2, 1, "", "write_injections"], [62, 2, 1, "", "write_kwargs_to_attrs"], [62, 2, 1, "", "write_logevidence"], [62, 2, 1, "", "write_psd"], [62, 2, 1, "", "write_random_state"], [62, 2, 1, "", "write_samples"], [62, 2, 1, "", "write_stilde"], [62, 2, 1, "", "write_strain"]], "pycbc.inference.io.base_mcmc": [[62, 1, 1, "", "CommonMCMCMetadataIO"], [62, 1, 1, "", "EnsembleMCMCMetadataIO"], [62, 1, 1, "", "MCMCMetadataIO"], [62, 3, 1, "", "ensemble_read_raw_samples"], [62, 3, 1, "", "nsamples_in_chain"], [62, 3, 1, "", "thin_samples_for_writing"], [62, 3, 1, "", "write_samples"]], "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO": [[62, 4, 1, "", "acl"], [62, 4, 1, "", "act"], [62, 4, 1, "", "burn_in_index"], [62, 4, 1, "", "burn_in_iteration"], [62, 2, 1, "", "extra_args_parser"], [62, 4, 1, "", "is_burned_in"], [62, 2, 1, "", "iterations"], [62, 2, 1, "", "last_iteration"], [62, 4, 1, "", "nchains"], [62, 4, 1, "", "niterations"], [62, 4, 1, "", "nwalkers"], [62, 4, 1, "", "raw_acls"], [62, 4, 1, "", "raw_acts"], [62, 2, 1, "", "thin"], [62, 4, 1, "", "thinned_by"], [62, 2, 1, "", "write_niterations"], [62, 2, 1, "", "write_resume_point"], [62, 2, 1, "", "write_sampler_metadata"]], "pycbc.inference.io.base_mcmc.EnsembleMCMCMetadataIO": [[62, 4, 1, "", "thin_interval"], [62, 4, 1, "", "thin_start"]], "pycbc.inference.io.base_mcmc.MCMCMetadataIO": [[62, 4, 1, "", "thin_interval"], [62, 4, 1, "", "thin_start"]], "pycbc.inference.io.base_multitemper": [[62, 1, 1, "", "CommonMultiTemperedMetadataIO"], [62, 1, 1, "", "ParseTempsArg"], [62, 3, 1, "", "ensemble_read_raw_samples"], [62, 3, 1, "", "read_raw_samples"], [62, 3, 1, "", "write_samples"]], "pycbc.inference.io.base_multitemper.CommonMultiTemperedMetadataIO": [[62, 2, 1, "", "extra_args_parser"], [62, 4, 1, "", "ntemps"], [62, 2, 1, "", "write_sampler_metadata"]], "pycbc.inference.io.base_nested_sampler": [[62, 1, 1, "", "BaseNestedSamplerFile"]], "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile": [[62, 5, 1, "", "name"], [62, 2, 1, "", "read_raw_samples"], [62, 2, 1, "", "write_niterations"], [62, 2, 1, "", "write_resume_point"], [62, 2, 1, "", "write_sampler_metadata"], [62, 2, 1, "", "write_samples"]], "pycbc.inference.io.base_sampler": [[62, 1, 1, "", "BaseSamplerFile"]], "pycbc.inference.io.base_sampler.BaseSamplerFile": [[62, 4, 1, "", "run_end_time"], [62, 4, 1, "", "run_start_time"], [62, 2, 1, "", "update_checkpoint_history"], [62, 2, 1, "", "validate"], [62, 2, 1, "", "write_resume_point"], [62, 2, 1, "", "write_run_end_time"], [62, 2, 1, "", "write_run_start_time"], [62, 2, 1, "", "write_sampler_metadata"]], "pycbc.inference.io.dynesty": [[62, 1, 1, "", "CommonNestedMetadataIO"], [62, 1, 1, "", "DynestyFile"]], "pycbc.inference.io.dynesty.CommonNestedMetadataIO": [[62, 2, 1, "", "extra_args_parser"], [62, 2, 1, "", "read_pickled_data_from_checkpoint_file"], [62, 2, 1, "", "validate"], [62, 2, 1, "", "write_pickled_data_into_checkpoint_file"], [62, 2, 1, "", "write_raw_samples"]], "pycbc.inference.io.dynesty.DynestyFile": [[62, 5, 1, "", "name"], [62, 2, 1, "", "read_raw_samples"]], "pycbc.inference.io.emcee": [[62, 1, 1, "", "EmceeFile"]], "pycbc.inference.io.emcee.EmceeFile": [[62, 5, 1, "", "name"], [62, 2, 1, "", "read_acceptance_fraction"], [62, 2, 1, "", "read_raw_samples"], [62, 2, 1, "", "write_acceptance_fraction"], [62, 2, 1, "", "write_samples"]], "pycbc.inference.io.emcee_pt": [[62, 1, 1, "", "EmceePTFile"]], "pycbc.inference.io.emcee_pt.EmceePTFile": [[62, 4, 1, "", "betas"], [62, 5, 1, "", "name"], [62, 2, 1, "", "read_acceptance_fraction"], [62, 2, 1, "", "read_raw_samples"], [62, 2, 1, "", "write_acceptance_fraction"], [62, 2, 1, "", "write_sampler_metadata"], [62, 2, 1, "", "write_samples"]], "pycbc.inference.io.epsie": [[62, 1, 1, "", "EpsieFile"]], "pycbc.inference.io.epsie.EpsieFile": [[62, 4, 1, "", "betas"], [62, 5, 1, "", "name"], [62, 4, 1, "", "nchains"], [62, 2, 1, "", "read_acceptance_fraction"], [62, 2, 1, "", "read_acceptance_rate"], [62, 2, 1, "", "read_acceptance_ratio"], [62, 2, 1, "", "read_raw_samples"], [62, 4, 1, "", "seed"], [62, 4, 1, "", "swap_interval"], [62, 2, 1, "", "thin"], [62, 2, 1, "", "validate"], [62, 2, 1, "", "write_acceptance_ratio"], [62, 2, 1, "", "write_sampler_metadata"], [62, 2, 1, "", "write_samples"], [62, 2, 1, "", "write_temperature_data"]], "pycbc.inference.io.multinest": [[62, 1, 1, "", "MultinestFile"]], "pycbc.inference.io.multinest.MultinestFile": [[62, 5, 1, "", "name"], [62, 4, 1, "", "niterations"], [62, 2, 1, "", "read_raw_samples"], [62, 2, 1, "", "write_logevidence"], [62, 2, 1, "", "write_niterations"], [62, 2, 1, "", "write_resume_point"], [62, 2, 1, "", "write_sampler_metadata"], [62, 2, 1, "", "write_samples"]], "pycbc.inference.io.nessai": [[62, 1, 1, "", "NessaiFile"]], "pycbc.inference.io.nessai.NessaiFile": [[62, 5, 1, "", "name"], [62, 2, 1, "", "read_raw_samples"]], "pycbc.inference.io.posterior": [[62, 1, 1, "", "PosteriorFile"], [62, 3, 1, "", "read_raw_samples_from_file"], [62, 3, 1, "", "write_samples_to_file"]], "pycbc.inference.io.posterior.PosteriorFile": [[62, 5, 1, "", "name"], [62, 2, 1, "", "read_raw_samples"], [62, 2, 1, "", "write_resume_point"], [62, 2, 1, "", "write_run_end_time"], [62, 2, 1, "", "write_run_start_time"], [62, 2, 1, "", "write_sampler_metadata"], [62, 2, 1, "", "write_samples"]], "pycbc.inference.io.ptemcee": [[62, 1, 1, "", "PTEmceeFile"]], "pycbc.inference.io.ptemcee.PTEmceeFile": [[62, 5, 1, "", "name"], [62, 2, 1, "", "read_betas"], [62, 2, 1, "", "read_ensemble_attrs"], [62, 2, 1, "", "read_raw_samples"], [62, 4, 1, "", "starting_betas"], [62, 2, 1, "", "write_betas"], [62, 2, 1, "", "write_ensemble_attrs"], [62, 2, 1, "", "write_sampler_metadata"], [62, 2, 1, "", "write_samples"]], "pycbc.inference.io.snowline": [[62, 1, 1, "", "SnowlineFile"]], "pycbc.inference.io.snowline.SnowlineFile": [[62, 5, 1, "", "name"]], "pycbc.inference.io.txt": [[62, 1, 1, "", "InferenceTXTFile"]], "pycbc.inference.io.txt.InferenceTXTFile": [[62, 5, 1, "", "comments"], [62, 5, 1, "", "delimiter"], [62, 5, 1, "", "name"], [62, 2, 1, "", "write"]], "pycbc.inference.io.ultranest": [[62, 1, 1, "", "UltranestFile"]], "pycbc.inference.io.ultranest.UltranestFile": [[62, 5, 1, "", "name"]], "pycbc.inference.jump": [[63, 0, 0, "-", "angular"], [63, 0, 0, "-", "bounded_normal"], [63, 0, 0, "-", "discrete"], [63, 3, 1, "", "epsie_proposals_from_config"], [63, 0, 0, "-", "normal"]], "pycbc.inference.jump.angular": [[63, 1, 1, "", "EpsieATAdaptiveAngular"], [63, 1, 1, "", "EpsieAdaptiveAngular"], [63, 1, 1, "", "EpsieAngular"]], "pycbc.inference.jump.angular.EpsieATAdaptiveAngular": [[63, 2, 1, "", "from_config"]], "pycbc.inference.jump.angular.EpsieAdaptiveAngular": [[63, 2, 1, "", "from_config"]], "pycbc.inference.jump.angular.EpsieAngular": [[63, 2, 1, "", "from_config"]], "pycbc.inference.jump.bounded_normal": [[63, 1, 1, "", "EpsieATAdaptiveBoundedNormal"], [63, 1, 1, "", "EpsieAdaptiveBoundedNormal"], [63, 1, 1, "", "EpsieBoundedNormal"]], "pycbc.inference.jump.bounded_normal.EpsieATAdaptiveBoundedNormal": [[63, 2, 1, "", "from_config"]], "pycbc.inference.jump.bounded_normal.EpsieAdaptiveBoundedNormal": [[63, 2, 1, "", "from_config"]], "pycbc.inference.jump.bounded_normal.EpsieBoundedNormal": [[63, 2, 1, "", "from_config"]], "pycbc.inference.jump.discrete": [[63, 1, 1, "", "EpsieAdaptiveBoundedDiscrete"], [63, 1, 1, "", "EpsieAdaptiveNormalDiscrete"], [63, 1, 1, "", "EpsieBoundedDiscrete"], [63, 1, 1, "", "EpsieNormalDiscrete"]], "pycbc.inference.jump.discrete.EpsieAdaptiveBoundedDiscrete": [[63, 2, 1, "", "from_config"]], "pycbc.inference.jump.discrete.EpsieAdaptiveNormalDiscrete": [[63, 2, 1, "", "from_config"]], "pycbc.inference.jump.discrete.EpsieBoundedDiscrete": [[63, 2, 1, "", "from_config"]], "pycbc.inference.jump.discrete.EpsieNormalDiscrete": [[63, 2, 1, "", "from_config"]], "pycbc.inference.jump.normal": [[63, 1, 1, "", "EpsieATAdaptiveNormal"], [63, 1, 1, "", "EpsieAdaptiveNormal"], [63, 1, 1, "", "EpsieNormal"], [63, 3, 1, "", "epsie_adaptive_from_config"], [63, 3, 1, "", "epsie_at_adaptive_from_config"], [63, 3, 1, "", "epsie_from_config"], [63, 3, 1, "", "get_epsie_adaptation_settings"], [63, 3, 1, "", "get_epsie_discrete_successive_settings"], [63, 3, 1, "", "get_param_boundaries"], [63, 3, 1, "", "get_variance"], [63, 3, 1, "", "load_opts"]], "pycbc.inference.jump.normal.EpsieATAdaptiveNormal": [[63, 2, 1, "", "from_config"]], "pycbc.inference.jump.normal.EpsieAdaptiveNormal": [[63, 2, 1, "", "from_config"]], "pycbc.inference.jump.normal.EpsieNormal": [[63, 2, 1, "", "from_config"]], "pycbc.inference.models": [[64, 1, 1, "", "CallModel"], [64, 0, 0, "-", "analytic"], [64, 3, 1, "", "available_models"], [64, 0, 0, "-", "base"], [64, 0, 0, "-", "base_data"], [64, 0, 0, "-", "brute_marg"], [64, 0, 0, "-", "data_utils"], [64, 0, 0, "-", "gated_gaussian_noise"], [64, 0, 0, "-", "gaussian_noise"], [64, 3, 1, "", "get_model"], [64, 3, 1, "", "get_models"], [64, 0, 0, "-", "hierarchical"], [64, 0, 0, "-", "marginalized_gaussian_noise"], [64, 3, 1, "", "read_from_config"], [64, 3, 1, "", "register_model"], [64, 0, 0, "-", "relbin"], [64, 0, 0, "-", "relbin_cpu"], [64, 0, 0, "-", "single_template"], [64, 0, 0, "-", "tools"]], "pycbc.inference.models.analytic": [[64, 1, 1, "", "TestEggbox"], [64, 1, 1, "", "TestNormal"], [64, 1, 1, "", "TestPosterior"], [64, 1, 1, "", "TestPrior"], [64, 1, 1, "", "TestRosenbrock"], [64, 1, 1, "", "TestVolcano"]], "pycbc.inference.models.analytic.TestEggbox": [[64, 5, 1, "", "name"]], "pycbc.inference.models.analytic.TestNormal": [[64, 5, 1, "", "name"]], "pycbc.inference.models.analytic.TestPosterior": [[64, 5, 1, "", "name"]], "pycbc.inference.models.analytic.TestPrior": [[64, 5, 1, "", "name"]], "pycbc.inference.models.analytic.TestRosenbrock": [[64, 5, 1, "", "name"]], "pycbc.inference.models.analytic.TestVolcano": [[64, 5, 1, "", "name"]], "pycbc.inference.models.base": [[64, 1, 1, "", "BaseModel"], [64, 1, 1, "", "ModelStats"], [64, 1, 1, "", "SamplingTransforms"], [64, 3, 1, "", "check_for_cartesian_spins"], [64, 3, 1, "", "read_sampling_params_from_config"]], "pycbc.inference.models.base.BaseModel": [[64, 4, 1, "", "current_params"], [64, 4, 1, "", "current_stats"], [64, 4, 1, "", "default_stats"], [64, 2, 1, "", "extra_args_from_config"], [64, 2, 1, "", "from_config"], [64, 2, 1, "", "get_current_stats"], [64, 4, 1, "", "logjacobian"], [64, 4, 1, "", "loglikelihood"], [64, 4, 1, "", "logposterior"], [64, 4, 1, "", "logprior"], [64, 5, 1, "", "name"], [64, 2, 1, "", "prior_from_config"], [64, 2, 1, "", "prior_rvs"], [64, 4, 1, "", "sampling_params"], [64, 4, 1, "", "static_params"], [64, 2, 1, "", "update"], [64, 4, 1, "", "variable_params"], [64, 2, 1, "", "write_metadata"]], "pycbc.inference.models.base.ModelStats": [[64, 2, 1, "", "getstats"], [64, 2, 1, "", "getstatsdict"], [64, 4, 1, "", "statnames"]], "pycbc.inference.models.base.SamplingTransforms": [[64, 2, 1, "", "apply"], [64, 2, 1, "", "from_config"], [64, 2, 1, "", "logjacobian"]], "pycbc.inference.models.base_data": [[64, 1, 1, "", "BaseDataModel"]], "pycbc.inference.models.base_data.BaseDataModel": [[64, 4, 1, "", "data"], [64, 4, 1, "", "detectors"], [64, 4, 1, "", "loglr"], [64, 4, 1, "", "lognl"], [64, 4, 1, "", "logplr"], [64, 2, 1, "", "write_metadata"]], "pycbc.inference.models.brute_marg": [[64, 1, 1, "", "BruteLISASkyModesMarginalize"], [64, 1, 1, "", "BruteParallelGaussianMarginalize"], [64, 1, 1, "", "likelihood_wrapper"]], "pycbc.inference.models.brute_marg.BruteLISASkyModesMarginalize": [[64, 2, 1, "", "from_config"], [64, 5, 1, "", "name"], [64, 2, 1, "", "reconstruct"]], "pycbc.inference.models.brute_marg.BruteParallelGaussianMarginalize": [[64, 5, 1, "", "name"]], "pycbc.inference.models.data_utils": [[64, 6, 1, "", "NoValidDataError"], [64, 3, 1, "", "check_for_nans"], [64, 3, 1, "", "check_validtimes"], [64, 3, 1, "", "create_data_parser"], [64, 3, 1, "", "data_from_cli"], [64, 3, 1, "", "data_opts_from_config"], [64, 3, 1, "", "detectors_with_valid_data"], [64, 3, 1, "", "fd_data_from_strain_dict"], [64, 3, 1, "", "gate_overwhitened_data"], [64, 3, 1, "", "strain_from_cli_multi_ifos"]], "pycbc.inference.models.gated_gaussian_noise": [[64, 1, 1, "", "BaseGatedGaussian"], [64, 1, 1, "", "GatedGaussianMargPol"], [64, 1, 1, "", "GatedGaussianNoise"]], "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian": [[64, 4, 1, "", "data"], [64, 2, 1, "", "det_lognl"], [64, 2, 1, "", "det_lognorm"], [64, 2, 1, "", "from_config"], [64, 2, 1, "", "get_data"], [64, 2, 1, "", "get_gate_times"], [64, 2, 1, "", "get_gate_times_hmeco"], [64, 2, 1, "", "get_gated_data"], [64, 2, 1, "", "get_gated_waveforms"], [64, 2, 1, "", "get_residuals"], [64, 2, 1, "", "get_waveforms"], [64, 4, 1, "", "normalize"], [64, 4, 1, "", "psds"], [64, 4, 1, "", "td_data"], [64, 2, 1, "", "whiten"], [64, 2, 1, "", "write_metadata"]], "pycbc.inference.models.gated_gaussian_noise.GatedGaussianMargPol": [[64, 2, 1, "", "get_gated_waveforms"], [64, 2, 1, "", "get_waveforms"], [64, 5, 1, "", "name"]], "pycbc.inference.models.gated_gaussian_noise.GatedGaussianNoise": [[64, 2, 1, "", "get_gated_residuals"], [64, 2, 1, "", "get_gated_waveforms"], [64, 5, 1, "", "name"]], "pycbc.inference.models.gaussian_noise": [[64, 1, 1, "", "BaseGaussianNoise"], [64, 1, 1, "", "GaussianNoise"], [64, 3, 1, "", "create_waveform_generator"], [64, 3, 1, "", "get_values_from_injection"]], "pycbc.inference.models.gaussian_noise.BaseGaussianNoise": [[64, 2, 1, "", "det_lognl"], [64, 2, 1, "", "det_lognorm"], [64, 2, 1, "", "from_config"], [64, 4, 1, "", "high_frequency_cutoff"], [64, 5, 1, "", "ignore_failed_waveforms"], [64, 4, 1, "", "kmax"], [64, 4, 1, "", "kmin"], [64, 4, 1, "", "lognorm"], [64, 4, 1, "", "low_frequency_cutoff"], [64, 4, 1, "", "normalize"], [64, 4, 1, "", "psd_segments"], [64, 4, 1, "", "psds"], [64, 2, 1, "", "set_psd_segments"], [64, 2, 1, "", "update"], [64, 4, 1, "", "weight"], [64, 4, 1, "", "whitened_data"], [64, 2, 1, "", "write_metadata"]], "pycbc.inference.models.gaussian_noise.GaussianNoise": [[64, 2, 1, "", "det_cplx_loglr"], [64, 2, 1, "", "det_optimal_snrsq"], [64, 2, 1, "", "get_waveforms"], [64, 2, 1, "", "multi_loglikelihood"], [64, 4, 1, "", "multi_signal_support"], [64, 5, 1, "", "name"]], "pycbc.inference.models.hierarchical": [[64, 1, 1, "", "HierarchicalModel"], [64, 1, 1, "", "HierarchicalParam"], [64, 1, 1, "", "JointPrimaryMarginalizedModel"], [64, 1, 1, "", "MultiSignalModel"], [64, 3, 1, "", "hpiter"], [64, 3, 1, "", "map_params"]], "pycbc.inference.models.hierarchical.HierarchicalModel": [[64, 2, 1, "", "from_config"], [64, 4, 1, "", "hstatic_params"], [64, 4, 1, "", "hvariable_params"], [64, 5, 1, "", "name"], [64, 4, 1, "", "static_params"], [64, 4, 1, "", "variable_params"], [64, 2, 1, "", "write_metadata"]], "pycbc.inference.models.hierarchical.HierarchicalParam": [[64, 5, 1, "", "delim"], [64, 2, 1, "", "from_subname"], [64, 5, 1, "", "fullname"], [64, 5, 1, "", "model_delim"], [64, 5, 1, "", "models"], [64, 2, 1, "", "parse"], [64, 5, 1, "", "subname"]], "pycbc.inference.models.hierarchical.JointPrimaryMarginalizedModel": [[64, 2, 1, "", "from_config"], [64, 5, 1, "", "name"], [64, 2, 1, "", "others_lognl"], [64, 2, 1, "", "reconstruct"], [64, 2, 1, "", "total_loglr"], [64, 2, 1, "", "update_all_models"], [64, 2, 1, "", "write_metadata"]], "pycbc.inference.models.hierarchical.MultiSignalModel": [[64, 5, 1, "", "name"], [64, 2, 1, "", "write_metadata"]], "pycbc.inference.models.marginalized_gaussian_noise": [[64, 1, 1, "", "MarginalizedHMPolPhase"], [64, 1, 1, "", "MarginalizedPhaseGaussianNoise"], [64, 1, 1, "", "MarginalizedPolarization"], [64, 1, 1, "", "MarginalizedTime"]], "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedHMPolPhase": [[64, 5, 1, "", "name"], [64, 2, 1, "", "phase_fac"]], "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedPhaseGaussianNoise": [[64, 5, 1, "", "name"]], "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedPolarization": [[64, 5, 1, "", "name"]], "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedTime": [[64, 5, 1, "", "name"]], "pycbc.inference.models.relbin": [[64, 1, 1, "", "Relative"], [64, 1, 1, "", "RelativeTime"], [64, 1, 1, "", "RelativeTimeDom"], [64, 3, 1, "", "setup_bins"]], "pycbc.inference.models.relbin.Relative": [[64, 2, 1, "", "calculate_hihjs"], [64, 2, 1, "", "combine_layout"], [64, 2, 1, "", "extra_args_from_config"], [64, 2, 1, "", "get_waveforms"], [64, 2, 1, "", "init_from_frequencies"], [64, 4, 1, "", "likelihood_function"], [64, 2, 1, "", "max_curvature_from_reference"], [64, 2, 1, "", "multi_loglikelihood"], [64, 4, 1, "", "multi_signal_support"], [64, 5, 1, "", "name"], [64, 2, 1, "", "setup_antenna"], [64, 2, 1, "", "summary_product"], [64, 2, 1, "", "write_metadata"]], "pycbc.inference.models.relbin.RelativeTime": [[64, 2, 1, "", "get_snr"], [64, 5, 1, "", "name"], [64, 4, 1, "", "ref_snr"]], "pycbc.inference.models.relbin.RelativeTimeDom": [[64, 2, 1, "", "get_snr"], [64, 5, 1, "", "name"]], "pycbc.inference.models.relbin_cpu": [[64, 3, 1, "", "likelihood_parts"], [64, 3, 1, "", "likelihood_parts_det"], [64, 3, 1, "", "likelihood_parts_det_multi"], [64, 3, 1, "", "likelihood_parts_multi"], [64, 3, 1, "", "likelihood_parts_multi_v"], [64, 3, 1, "", "likelihood_parts_v"], [64, 3, 1, "", "likelihood_parts_v_pol"], [64, 3, 1, "", "likelihood_parts_v_pol_time"], [64, 3, 1, "", "likelihood_parts_v_time"], [64, 3, 1, "", "likelihood_parts_vector"], [64, 3, 1, "", "likelihood_parts_vectorp"], [64, 3, 1, "", "likelihood_parts_vectort"], [64, 3, 1, "", "snr_predictor"], [64, 3, 1, "", "snr_predictor_dom"]], "pycbc.inference.models.single_template": [[64, 1, 1, "", "SingleTemplate"]], "pycbc.inference.models.single_template.SingleTemplate": [[64, 2, 1, "", "calculate_hihjs"], [64, 2, 1, "", "multi_loglikelihood"], [64, 4, 1, "", "multi_signal_support"], [64, 5, 1, "", "name"]], "pycbc.inference.models.tools": [[64, 1, 1, "", "DistMarg"], [64, 3, 1, "", "draw_sample"], [64, 3, 1, "", "marginalize_likelihood"], [64, 3, 1, "", "setup_distance_marg_interpolant"], [64, 3, 1, "", "str_to_bool"], [64, 3, 1, "", "str_to_tuple"]], "pycbc.inference.models.tools.DistMarg": [[64, 4, 1, "", "current_params"], [64, 5, 1, "", "distance_interpolator"], [64, 5, 1, "", "distance_marginalization"], [64, 2, 1, "", "draw_ifos"], [64, 2, 1, "", "draw_sky_times"], [64, 2, 1, "", "draw_times"], [64, 2, 1, "", "get_precalc_antenna_factors"], [64, 2, 1, "", "marginalize_loglr"], [64, 5, 1, "", "marginalize_phase"], [64, 2, 1, "", "premarg_draw"], [64, 2, 1, "", "reconstruct"], [64, 2, 1, "", "reset_vector_params"], [64, 2, 1, "", "setup_marginalization"], [64, 2, 1, "", "setup_peak_lock"], [64, 2, 1, "", "snr_draw"]], "pycbc.inference.option_utils": [[61, 1, 1, "", "ParseLabelArg"], [61, 1, 1, "", "ParseParametersArg"], [61, 3, 1, "", "add_density_option_group"], [61, 3, 1, "", "add_injsamples_map_opt"], [61, 3, 1, "", "add_plot_posterior_option_group"], [61, 3, 1, "", "add_scatter_option_group"], [61, 3, 1, "", "expected_parameters_from_cli"], [61, 3, 1, "", "plot_ranges_from_cli"]], "pycbc.inference.sampler": [[65, 0, 0, "-", "base"], [65, 0, 0, "-", "base_cube"], [65, 0, 0, "-", "base_mcmc"], [65, 0, 0, "-", "base_multitemper"], [65, 0, 0, "-", "dummy"], [65, 0, 0, "-", "dynesty"], [65, 0, 0, "-", "emcee"], [65, 0, 0, "-", "emcee_pt"], [65, 0, 0, "-", "epsie"], [65, 3, 1, "", "load_from_config"], [65, 0, 0, "-", "multinest"], [65, 0, 0, "-", "nessai"], [65, 0, 0, "-", "ptemcee"], [65, 0, 0, "-", "refine"], [65, 0, 0, "-", "snowline"], [65, 0, 0, "-", "ultranest"]], "pycbc.inference.sampler.base": [[65, 1, 1, "", "BaseSampler"], [65, 3, 1, "", "create_new_output_file"], [65, 3, 1, "", "initial_dist_from_config"], [65, 3, 1, "", "setup_output"]], "pycbc.inference.sampler.base.BaseSampler": [[65, 2, 1, "", "checkpoint"], [65, 2, 1, "", "finalize"], [65, 2, 1, "", "from_config"], [65, 4, 1, "", "io"], [65, 4, 1, "", "model_stats"], [65, 5, 1, "", "name"], [65, 2, 1, "", "resume_from_checkpoint"], [65, 2, 1, "", "run"], [65, 4, 1, "", "samples"], [65, 4, 1, "", "sampling_params"], [65, 4, 1, "", "static_params"], [65, 4, 1, "", "variable_params"]], "pycbc.inference.sampler.base_cube": [[65, 1, 1, "", "CubeModel"], [65, 3, 1, "", "call_global_loglikelihood"], [65, 3, 1, "", "call_global_logprior"], [65, 3, 1, "", "setup_calls"]], "pycbc.inference.sampler.base_cube.CubeModel": [[65, 2, 1, "", "log_likelihood"], [65, 2, 1, "", "prior_transform"]], "pycbc.inference.sampler.base_mcmc": [[65, 1, 1, "", "BaseMCMC"], [65, 1, 1, "", "EnsembleSupport"], [65, 3, 1, "", "blob_data_to_dict"], [65, 3, 1, "", "ensemble_compute_acf"], [65, 3, 1, "", "ensemble_compute_acl"], [65, 3, 1, "", "get_optional_arg_from_config"], [65, 3, 1, "", "raw_samples_to_dict"]], "pycbc.inference.sampler.base_mcmc.BaseMCMC": [[65, 2, 1, "", "acl"], [65, 4, 1, "", "act"], [65, 4, 1, "", "base_shape"], [65, 4, 1, "", "burn_in"], [65, 2, 1, "", "checkpoint"], [65, 2, 1, "", "checkpoint_from_config"], [65, 4, 1, "", "checkpoint_interval"], [65, 4, 1, "", "checkpoint_signal"], [65, 2, 1, "", "ckpt_signal_from_config"], [65, 2, 1, "", "clear_samples"], [65, 2, 1, "", "compute_acf"], [65, 2, 1, "", "compute_acl"], [65, 2, 1, "", "effective_nsamples"], [65, 2, 1, "", "get_thin_interval"], [65, 4, 1, "", "max_samples_per_chain"], [65, 4, 1, "", "nchains"], [65, 4, 1, "", "niterations"], [65, 4, 1, "", "p0"], [65, 4, 1, "", "pos"], [65, 4, 1, "", "raw_acls"], [65, 4, 1, "", "raw_acts"], [65, 2, 1, "", "resume_from_checkpoint"], [65, 2, 1, "", "run"], [65, 2, 1, "", "run_mcmc"], [65, 2, 1, "", "set_burn_in"], [65, 2, 1, "", "set_burn_in_from_config"], [65, 2, 1, "", "set_p0"], [65, 2, 1, "", "set_start_from_config"], [65, 2, 1, "", "set_state_from_file"], [65, 2, 1, "", "set_target"], [65, 2, 1, "", "set_target_from_config"], [65, 2, 1, "", "set_thin_interval_from_config"], [65, 4, 1, "", "target_eff_nsamples"], [65, 4, 1, "", "target_niterations"], [65, 4, 1, "", "thin_interval"], [65, 4, 1, "", "thin_safety_factor"], [65, 2, 1, "", "write_results"]], "pycbc.inference.sampler.base_mcmc.EnsembleSupport": [[65, 4, 1, "", "acl"], [65, 4, 1, "", "effective_nsamples"], [65, 4, 1, "", "nwalkers"]], "pycbc.inference.sampler.base_multitemper": [[65, 1, 1, "", "MultiTemperedSupport"], [65, 3, 1, "", "acl_from_raw_acls"], [65, 3, 1, "", "compute_acf"], [65, 3, 1, "", "compute_acl"], [65, 3, 1, "", "ensemble_compute_acf"], [65, 3, 1, "", "ensemble_compute_acl"], [65, 3, 1, "", "read_betas_from_hdf"]], "pycbc.inference.sampler.base_multitemper.MultiTemperedSupport": [[65, 2, 1, "", "betas_from_config"], [65, 4, 1, "", "ntemps"]], "pycbc.inference.sampler.dummy": [[65, 1, 1, "", "DummySampler"], [65, 3, 1, "", "call_reconstruct"]], "pycbc.inference.sampler.dummy.DummySampler": [[65, 2, 1, "", "checkpoint"], [65, 2, 1, "", "finalize"], [65, 2, 1, "", "from_config"], [65, 4, 1, "", "io"], [65, 4, 1, "", "model_stats"], [65, 5, 1, "", "name"], [65, 2, 1, "", "resume_from_checkpoint"], [65, 2, 1, "", "run"], [65, 4, 1, "", "samples"]], "pycbc.inference.sampler.dynesty": [[65, 1, 1, "", "DynestySampler"], [65, 3, 1, "", "estimate_nmcmc"], [65, 3, 1, "", "sample_rwalk_mod"]], "pycbc.inference.sampler.dynesty.DynestySampler": [[65, 2, 1, "", "checkpoint"], [65, 2, 1, "", "finalize"], [65, 2, 1, "", "from_config"], [65, 4, 1, "", "io"], [65, 4, 1, "", "logz"], [65, 4, 1, "", "logz_err"], [65, 4, 1, "", "model_stats"], [65, 5, 1, "", "name"], [65, 4, 1, "", "niterations"], [65, 2, 1, "", "resume_from_checkpoint"], [65, 2, 1, "", "run"], [65, 4, 1, "", "samples"], [65, 2, 1, "", "set_initial_conditions"], [65, 2, 1, "", "set_state_from_file"], [65, 2, 1, "", "write_results"]], "pycbc.inference.sampler.emcee": [[65, 1, 1, "", "EmceeEnsembleSampler"]], "pycbc.inference.sampler.emcee.EmceeEnsembleSampler": [[65, 4, 1, "", "base_shape"], [65, 5, 1, "", "burn_in_class"], [65, 2, 1, "", "clear_samples"], [65, 2, 1, "", "compute_acf"], [65, 2, 1, "", "compute_acl"], [65, 2, 1, "", "finalize"], [65, 2, 1, "", "from_config"], [65, 4, 1, "", "io"], [65, 4, 1, "", "model_stats"], [65, 5, 1, "", "name"], [65, 2, 1, "", "run_mcmc"], [65, 4, 1, "", "samples"], [65, 2, 1, "", "set_state_from_file"], [65, 2, 1, "", "write_results"]], "pycbc.inference.sampler.emcee_pt": [[65, 1, 1, "", "EmceePTSampler"]], "pycbc.inference.sampler.emcee_pt.EmceePTSampler": [[65, 4, 1, "", "base_shape"], [65, 4, 1, "", "betas"], [65, 5, 1, "", "burn_in_class"], [65, 2, 1, "", "calculate_logevidence"], [65, 2, 1, "", "clear_samples"], [65, 2, 1, "", "compute_acf"], [65, 2, 1, "", "compute_acl"], [65, 2, 1, "", "finalize"], [65, 2, 1, "", "from_config"], [65, 4, 1, "", "io"], [65, 4, 1, "", "model_stats"], [65, 5, 1, "", "name"], [65, 2, 1, "", "run_mcmc"], [65, 4, 1, "", "samples"], [65, 2, 1, "", "set_state_from_file"], [65, 2, 1, "", "write_results"]], "pycbc.inference.sampler.epsie": [[65, 1, 1, "", "EpsieSampler"]], "pycbc.inference.sampler.epsie.EpsieSampler": [[65, 4, 1, "", "acl"], [65, 4, 1, "", "base_shape"], [65, 4, 1, "", "betas"], [65, 5, 1, "", "burn_in_class"], [65, 2, 1, "", "clear_samples"], [65, 2, 1, "", "compute_acf"], [65, 2, 1, "", "compute_acl"], [65, 4, 1, "", "effective_nsamples"], [65, 2, 1, "", "finalize"], [65, 2, 1, "", "from_config"], [65, 4, 1, "", "io"], [65, 4, 1, "", "model_stats"], [65, 5, 1, "", "name"], [65, 4, 1, "", "pos"], [65, 2, 1, "", "run_mcmc"], [65, 4, 1, "", "samples"], [65, 4, 1, "", "seed"], [65, 2, 1, "", "set_p0"], [65, 2, 1, "", "set_state_from_file"], [65, 4, 1, "", "swap_interval"], [65, 2, 1, "", "write_results"]], "pycbc.inference.sampler.multinest": [[65, 1, 1, "", "MultinestSampler"]], "pycbc.inference.sampler.multinest.MultinestSampler": [[65, 2, 1, "", "check_if_finished"], [65, 2, 1, "", "checkpoint"], [65, 4, 1, "", "checkpoint_interval"], [65, 4, 1, "", "dlogz"], [65, 2, 1, "", "finalize"], [65, 2, 1, "", "from_config"], [65, 2, 1, "", "get_posterior_samples"], [65, 4, 1, "", "importance_dlogz"], [65, 4, 1, "", "importance_logz"], [65, 4, 1, "", "io"], [65, 2, 1, "", "loglikelihood"], [65, 4, 1, "", "logz"], [65, 4, 1, "", "model_stats"], [65, 5, 1, "", "name"], [65, 4, 1, "", "niterations"], [65, 4, 1, "", "nlivepoints"], [65, 2, 1, "", "resume_from_checkpoint"], [65, 2, 1, "", "run"], [65, 4, 1, "", "samples"], [65, 2, 1, "", "set_initial_conditions"], [65, 2, 1, "", "set_state_from_file"], [65, 2, 1, "", "setup_output"], [65, 2, 1, "", "transform_prior"], [65, 2, 1, "", "write_results"]], "pycbc.inference.sampler.nessai": [[65, 1, 1, "", "NessaiModel"], [65, 1, 1, "", "NessaiSampler"]], "pycbc.inference.sampler.nessai.NessaiModel": [[65, 2, 1, "", "from_unit_hypercube"], [65, 2, 1, "", "log_likelihood"], [65, 2, 1, "", "log_prior"], [65, 2, 1, "", "new_point"], [65, 2, 1, "", "new_point_log_prob"], [65, 2, 1, "", "to_dict"], [65, 2, 1, "", "to_live_points"], [65, 2, 1, "", "to_unit_hypercube"]], "pycbc.inference.sampler.nessai.NessaiSampler": [[65, 2, 1, "", "checkpoint"], [65, 2, 1, "", "checkpoint_callback"], [65, 2, 1, "", "finalize"], [65, 2, 1, "", "from_config"], [65, 2, 1, "", "get_default_kwds"], [65, 4, 1, "", "io"], [65, 4, 1, "", "model_stats"], [65, 5, 1, "", "name"], [65, 2, 1, "", "resume_from_checkpoint"], [65, 2, 1, "", "run"], [65, 4, 1, "", "samples"], [65, 2, 1, "", "set_initial_conditions"], [65, 2, 1, "", "write_results"]], "pycbc.inference.sampler.ptemcee": [[65, 1, 1, "", "PTEmceeSampler"]], "pycbc.inference.sampler.ptemcee.PTEmceeSampler": [[65, 4, 1, "", "adaptation_lag"], [65, 4, 1, "", "adaptation_time"], [65, 4, 1, "", "adaptive"], [65, 4, 1, "", "base_shape"], [65, 4, 1, "", "betas"], [65, 5, 1, "", "burn_in_class"], [65, 2, 1, "", "calculate_logevidence"], [65, 4, 1, "", "chain"], [65, 2, 1, "", "clear_samples"], [65, 2, 1, "", "compute_acf"], [65, 2, 1, "", "compute_acl"], [65, 4, 1, "", "ensemble"], [65, 2, 1, "", "finalize"], [65, 2, 1, "", "from_config"], [65, 4, 1, "", "io"], [65, 4, 1, "", "model_stats"], [65, 5, 1, "", "name"], [65, 4, 1, "", "ntemps"], [65, 2, 1, "", "run_mcmc"], [65, 4, 1, "", "samples"], [65, 4, 1, "", "scale_factor"], [65, 2, 1, "", "set_state_from_file"], [65, 4, 1, "", "starting_betas"], [65, 2, 1, "", "write_results"]], "pycbc.inference.sampler.refine": [[65, 1, 1, "", "RefineSampler"], [65, 3, 1, "", "call_model"], [65, 3, 1, "", "resample_equal"]], "pycbc.inference.sampler.refine.RefineSampler": [[65, 2, 1, "", "compare_kde"], [65, 2, 1, "", "converged"], [65, 2, 1, "", "draw_samples"], [65, 2, 1, "", "from_config"], [65, 5, 1, "", "name"], [65, 2, 1, "", "run"], [65, 2, 1, "", "run_samples"], [65, 2, 1, "", "set_start_from_config"]], "pycbc.inference.sampler.snowline": [[65, 1, 1, "", "SnowlineSampler"]], "pycbc.inference.sampler.snowline.SnowlineSampler": [[65, 2, 1, "", "checkpoint"], [65, 2, 1, "", "finalize"], [65, 2, 1, "", "from_config"], [65, 4, 1, "", "io"], [65, 4, 1, "", "logz"], [65, 4, 1, "", "logz_err"], [65, 4, 1, "", "model_stats"], [65, 5, 1, "", "name"], [65, 4, 1, "", "niterations"], [65, 2, 1, "", "resume_from_checkpoint"], [65, 2, 1, "", "run"], [65, 4, 1, "", "samples"], [65, 2, 1, "", "write_results"]], "pycbc.inference.sampler.ultranest": [[65, 1, 1, "", "UltranestSampler"]], "pycbc.inference.sampler.ultranest.UltranestSampler": [[65, 2, 1, "", "checkpoint"], [65, 2, 1, "", "finalize"], [65, 2, 1, "", "from_config"], [65, 4, 1, "", "io"], [65, 4, 1, "", "logz"], [65, 4, 1, "", "logz_err"], [65, 4, 1, "", "model_stats"], [65, 5, 1, "", "name"], [65, 4, 1, "", "niterations"], [65, 2, 1, "", "resume_from_checkpoint"], [65, 2, 1, "", "run"], [65, 4, 1, "", "samples"], [65, 2, 1, "", "write_results"]], "pycbc.inject": [[66, 0, 0, "-", "inject"], [66, 0, 0, "-", "injfilterrejector"]], "pycbc.inject.inject": [[66, 1, 1, "", "CBCHDFInjectionSet"], [66, 1, 1, "", "IncoherentFromFileHDFInjectionSet"], [66, 1, 1, "", "InjectionSet"], [66, 1, 1, "", "RingdownHDFInjectionSet"], [66, 1, 1, "", "SGBurstInjectionSet"], [66, 3, 1, "", "get_hdf_injtype"], [66, 3, 1, "", "hdf_injtype_from_approximant"], [66, 3, 1, "", "legacy_approximant_name"], [66, 3, 1, "", "projector"], [66, 3, 1, "", "set_sim_data"]], "pycbc.inject.inject.CBCHDFInjectionSet": [[66, 2, 1, "", "apply"], [66, 2, 1, "", "end_times"], [66, 5, 1, "", "injtype"], [66, 2, 1, "", "make_strain_from_inj_object"], [66, 5, 1, "", "required_params"], [66, 2, 1, "", "supported_approximants"]], "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet": [[66, 2, 1, "", "apply"], [66, 2, 1, "", "end_times"], [66, 5, 1, "", "injtype"], [66, 2, 1, "", "loadts"], [66, 2, 1, "", "make_strain_from_inj_object"], [66, 5, 1, "", "required_params"], [66, 2, 1, "", "set_ref_time"], [66, 2, 1, "", "slice_and_taper"], [66, 2, 1, "", "supported_approximants"]], "pycbc.inject.inject.InjectionSet": [[66, 2, 1, "", "from_cli"], [66, 5, 1, "", "table"], [66, 2, 1, "", "write"]], "pycbc.inject.inject.RingdownHDFInjectionSet": [[66, 2, 1, "", "apply"], [66, 2, 1, "", "end_times"], [66, 5, 1, "", "injtype"], [66, 2, 1, "", "make_strain_from_inj_object"], [66, 5, 1, "", "required_params"], [66, 2, 1, "", "supported_approximants"]], "pycbc.inject.inject.SGBurstInjectionSet": [[66, 2, 1, "", "apply"], [66, 5, 1, "", "indoc"], [66, 5, 1, "", "table"]], "pycbc.inject.injfilterrejector": [[66, 1, 1, "", "InjFilterRejector"], [66, 3, 1, "", "insert_injfilterrejector_option_group"], [66, 3, 1, "", "insert_injfilterrejector_option_group_multi_ifo"]], "pycbc.inject.injfilterrejector.InjFilterRejector": [[66, 2, 1, "", "from_cli"], [66, 2, 1, "", "from_cli_multi_ifos"], [66, 2, 1, "", "from_cli_single_ifo"], [66, 2, 1, "", "generate_short_inj_from_inj"], [66, 2, 1, "", "template_segment_checker"]], "pycbc.io": [[67, 3, 1, "", "get_file"], [67, 0, 0, "-", "hdf"], [67, 0, 0, "-", "ligolw"], [67, 0, 0, "-", "live"], [67, 0, 0, "-", "record"]], "pycbc.io.hdf": [[67, 1, 1, "", "DataFromFiles"], [67, 1, 1, "", "DictArray"], [67, 1, 1, "", "FileData"], [67, 1, 1, "", "ForegroundTriggers"], [67, 1, 1, "", "HFile"], [67, 1, 1, "", "MultiifoStatmapData"], [67, 1, 1, "", "ReadByTemplate"], [67, 1, 1, "", "SingleDetTriggers"], [67, 1, 1, "", "StatmapData"], [67, 3, 1, "", "combine_and_copy"], [67, 3, 1, "", "dump_pickle_to_hdf"], [67, 3, 1, "", "dump_state"], [67, 3, 1, "", "get_all_subkeys"], [67, 3, 1, "", "get_chisq_from_file_choice"], [67, 3, 1, "", "load_hdf5_to_dict"], [67, 3, 1, "", "load_state"], [67, 3, 1, "", "name_all_datasets"], [67, 3, 1, "", "recursively_save_dict_contents_to_group"], [67, 3, 1, "", "save_dict_to_hdf5"]], "pycbc.io.hdf.DataFromFiles": [[67, 2, 1, "", "get_column"]], "pycbc.io.hdf.DictArray": [[67, 2, 1, "", "remove"], [67, 2, 1, "", "save"], [67, 2, 1, "", "select"]], "pycbc.io.hdf.FileData": [[67, 2, 1, "", "close"], [67, 2, 1, "", "get_column"], [67, 4, 1, "", "mask"]], "pycbc.io.hdf.ForegroundTriggers": [[67, 2, 1, "", "get_active_segments"], [67, 2, 1, "", "get_bankfile_array"], [67, 2, 1, "", "get_coincfile_array"], [67, 2, 1, "", "get_end_time"], [67, 2, 1, "", "get_ifos"], [67, 2, 1, "", "get_snglfile_array_dict"], [67, 4, 1, "", "sort_arr"], [67, 4, 1, "", "template_id"], [67, 2, 1, "", "to_coinc_hdf_object"], [67, 2, 1, "", "to_coinc_xml_object"], [67, 4, 1, "", "trig_id"]], "pycbc.io.hdf.HFile": [[67, 2, 1, "", "select"]], "pycbc.io.hdf.MultiifoStatmapData": [[67, 2, 1, "", "cluster"]], "pycbc.io.hdf.ReadByTemplate": [[67, 2, 1, "", "get_data"], [67, 2, 1, "", "set_template"]], "pycbc.io.hdf.SingleDetTriggers": [[67, 2, 1, "", "and_masks"], [67, 2, 1, "", "apply_mask"], [67, 4, 1, "", "approximant"], [67, 2, 1, "", "checkbank"], [67, 4, 1, "", "effective_spin"], [67, 4, 1, "", "end_time"], [67, 4, 1, "", "eta"], [67, 4, 1, "", "f_lower"], [67, 4, 1, "", "f_seobnrv2_peak"], [67, 4, 1, "", "f_seobnrv4_peak"], [67, 2, 1, "", "get_column"], [67, 2, 1, "", "get_param_names"], [67, 2, 1, "", "get_ranking"], [67, 4, 1, "", "inclination"], [67, 4, 1, "", "mask_size"], [67, 2, 1, "", "mask_to_n_loudest_clustered_events"], [67, 4, 1, "", "mass1"], [67, 4, 1, "", "mass2"], [67, 4, 1, "", "mchirp"], [67, 4, 1, "", "mtotal"], [67, 4, 1, "", "newsnr"], [67, 4, 1, "", "newsnr_sgveto"], [67, 4, 1, "", "newsnr_sgveto_psdvar"], [67, 4, 1, "", "newsnr_sgveto_psdvar_threshold"], [67, 4, 1, "", "psd_var_val"], [67, 4, 1, "", "rchisq"], [67, 4, 1, "", "sgchisq"], [67, 4, 1, "", "snr"], [67, 4, 1, "", "spin1x"], [67, 4, 1, "", "spin1y"], [67, 4, 1, "", "spin1z"], [67, 4, 1, "", "spin2x"], [67, 4, 1, "", "spin2y"], [67, 4, 1, "", "spin2z"], [67, 4, 1, "", "template_duration"], [67, 4, 1, "", "template_id"], [67, 2, 1, "", "trig_dict"], [67, 4, 1, "", "u_vals"]], "pycbc.io.hdf.StatmapData": [[67, 2, 1, "", "cluster"], [67, 2, 1, "", "save"]], "pycbc.io.ligolw": [[67, 1, 1, "", "LIGOLWContentHandler"], [67, 3, 1, "", "create_process_table"], [67, 3, 1, "", "default_null_value"], [67, 3, 1, "", "get_table_columns"], [67, 3, 1, "", "legacy_row_id_converter"], [67, 3, 1, "", "return_empty_sngl"], [67, 3, 1, "", "return_search_summary"]], "pycbc.io.ligolw.LIGOLWContentHandler": [[67, 2, 1, "", "endElementNS"], [67, 2, 1, "", "startColumn"], [67, 2, 1, "", "startStream"], [67, 2, 1, "", "startTable"]], "pycbc.io.live": [[67, 1, 1, "", "CandidateForGraceDB"], [67, 3, 1, "", "gracedb_tag_with_version"]], "pycbc.io.live.CandidateForGraceDB": [[67, 2, 1, "", "save"], [67, 2, 1, "", "upload"]], "pycbc.io.record": [[67, 1, 1, "", "FieldArray"], [67, 1, 1, "", "WaveformArray"]], "pycbc.io.record.FieldArray": [[67, 2, 1, "", "add_fields"], [67, 2, 1, "", "add_functions"], [67, 2, 1, "", "add_methods"], [67, 2, 1, "", "add_properties"], [67, 2, 1, "", "add_virtualfields"], [67, 2, 1, "", "addattr"], [67, 4, 1, "", "aliases"], [67, 2, 1, "", "append"], [67, 2, 1, "", "del_functions"], [67, 4, 1, "", "fieldnames"], [67, 4, 1, "", "fields"], [67, 2, 1, "", "from_arrays"], [67, 2, 1, "", "from_kwargs"], [67, 2, 1, "", "from_ligolw_table"], [67, 2, 1, "", "from_records"], [67, 4, 1, "", "functionlib"], [67, 5, 1, "", "name"], [67, 2, 1, "", "parse_boolargs"], [67, 2, 1, "", "parse_parameters"], [67, 2, 1, "", "sort"], [67, 2, 1, "", "to_array"], [67, 4, 1, "", "virtualfields"]], "pycbc.io.record.WaveformArray": [[67, 4, 1, "", "chi_eff"], [67, 4, 1, "", "eta"], [67, 4, 1, "", "mchirp"], [67, 4, 1, "", "mtotal"], [67, 4, 1, "", "primary_mass"], [67, 4, 1, "", "q"], [67, 4, 1, "", "remnant_mass"], [67, 4, 1, "", "secondary_mass"], [67, 4, 1, "", "spin1_a"], [67, 4, 1, "", "spin1_azimuthal"], [67, 4, 1, "", "spin1_polar"], [67, 4, 1, "", "spin2_a"], [67, 4, 1, "", "spin2_azimuthal"], [67, 4, 1, "", "spin2_polar"], [67, 4, 1, "", "spin_px"], [67, 4, 1, "", "spin_py"], [67, 4, 1, "", "spin_pz"], [67, 4, 1, "", "spin_sx"], [67, 4, 1, "", "spin_sy"], [67, 4, 1, "", "spin_sz"]], "pycbc.libutils": [[53, 3, 1, "", "get_ctypes_library"], [53, 3, 1, "", "get_libpath_from_dirlist"], [53, 3, 1, "", "import_optional"], [53, 3, 1, "", "pkg_config"], [53, 3, 1, "", "pkg_config_check_exists"], [53, 3, 1, "", "pkg_config_header_strings"], [53, 3, 1, "", "pkg_config_libdirs"]], "pycbc.live": [[68, 0, 0, "-", "snr_optimizer"]], "pycbc.live.snr_optimizer": [[68, 3, 1, "", "callback_func"], [68, 3, 1, "", "check_snr_optimizer_options"], [68, 3, 1, "", "compute_minus_network_snr"], [68, 3, 1, "", "compute_minus_network_snr_pso"], [68, 3, 1, "", "compute_network_snr_core"], [68, 3, 1, "", "insert_snr_optimizer_options"], [68, 3, 1, "", "optimize_di"], [68, 3, 1, "", "optimize_pso"], [68, 3, 1, "", "optimize_shgo"]], "pycbc.mchirp_area": [[53, 3, 1, "", "calc_areas"], [53, 3, 1, "", "calc_probabilities"], [53, 3, 1, "", "from_cli"], [53, 3, 1, "", "get_area"], [53, 3, 1, "", "insert_args"], [53, 3, 1, "", "intmc"], [53, 3, 1, "", "redshift_estimation"], [53, 3, 1, "", "src_mass_from_z_det_mass"]], "pycbc.neutron_stars": [[69, 0, 0, "-", "eos_utils"], [69, 0, 0, "-", "pg_isso_solver"]], "pycbc.neutron_stars.eos_utils": [[69, 3, 1, "", "foucart18"], [69, 3, 1, "", "initialize_eos"], [69, 3, 1, "", "interp_grav_mass_to_baryon_mass"], [69, 3, 1, "", "interp_grav_mass_to_compactness"], [69, 3, 1, "", "load_ns_sequence"]], "pycbc.neutron_stars.pg_isso_solver": [[69, 3, 1, "", "ISCO_solution"], [69, 3, 1, "", "ISSO_eq_at_pole"], [69, 3, 1, "", "ISSO_eq_at_pole_dr"], [69, 3, 1, "", "ISSO_eq_at_pole_dr2"], [69, 3, 1, "", "PG_ISSO_eq"], [69, 3, 1, "", "PG_ISSO_eq_dr"], [69, 3, 1, "", "PG_ISSO_eq_dr2"], [69, 3, 1, "", "PG_ISSO_solver"]], "pycbc.noise": [[70, 0, 0, "-", "gaussian"], [70, 0, 0, "-", "reproduceable"]], "pycbc.noise.gaussian": [[70, 3, 1, "", "frequency_noise_from_psd"], [70, 3, 1, "", "noise_from_psd"], [70, 3, 1, "", "noise_from_string"]], "pycbc.noise.reproduceable": [[70, 3, 1, "", "block"], [70, 3, 1, "", "colored_noise"], [70, 3, 1, "", "noise_from_string"], [70, 3, 1, "", "normal"]], "pycbc.opt": [[53, 1, 1, "", "LimitedSizeDict"], [53, 3, 1, "", "getconf"], [53, 3, 1, "", "insert_optimization_option_group"], [53, 3, 1, "", "verify_optimization_options"]], "pycbc.pnutils": [[53, 3, 1, "", "A0"], [53, 3, 1, "", "A3"], [53, 3, 1, "", "chirp_distance"], [53, 3, 1, "", "energy"], [53, 3, 1, "", "energy_coefficients"], [53, 3, 1, "", "eta_mass1_to_mass2"], [53, 3, 1, "", "f_BKLISCO"], [53, 3, 1, "", "f_ERD"], [53, 3, 1, "", "f_FRD"], [53, 3, 1, "", "f_LRD"], [53, 3, 1, "", "f_LightRing"], [53, 3, 1, "", "f_SchwarzISCO"], [53, 3, 1, "", "frequency_cutoff_from_name"], [53, 3, 1, "", "frequency_to_velocity"], [53, 3, 1, "", "get_beta_sigma_from_aligned_spins"], [53, 3, 1, "", "get_final_freq"], [53, 3, 1, "", "get_freq"], [53, 3, 1, "", "get_inspiral_tf"], [53, 3, 1, "", "hybridEnergy"], [53, 3, 1, "", "hybrid_meco_frequency"], [53, 3, 1, "", "hybrid_meco_velocity"], [53, 3, 1, "", "jframe_to_l0frame"], [53, 3, 1, "", "kerr_lightring"], [53, 3, 1, "", "kerr_lightring_velocity"], [53, 3, 1, "", "l0frame_to_jframe"], [53, 3, 1, "", "mass1_mass2_spin1z_spin2z_to_beta_sigma_gamma"], [53, 3, 1, "", "mass1_mass2_to_mchirp_eta"], [53, 3, 1, "", "mass1_mass2_to_mtotal_eta"], [53, 3, 1, "", "mass1_mass2_to_tau0_tau3"], [53, 3, 1, "", "mchirp_eta_to_mass1_mass2"], [53, 3, 1, "", "mchirp_mass1_to_mass2"], [53, 3, 1, "", "mchirp_q_to_mass1_mass2"], [53, 3, 1, "", "meco2"], [53, 3, 1, "", "meco_velocity"], [53, 3, 1, "", "megaparsecs_to_meters"], [53, 3, 1, "", "mtotal_eta_to_mass1_mass2"], [53, 3, 1, "", "nearest_larger_binary_number"], [53, 3, 1, "", "parsecs_to_meters"], [53, 3, 1, "", "solar_mass_to_kg"], [53, 3, 1, "", "t2_cutoff_frequency"], [53, 3, 1, "", "t2_cutoff_velocity"], [53, 3, 1, "", "t4_cutoff_velocity"], [53, 3, 1, "", "tau0_tau3_to_mass1_mass2"], [53, 3, 1, "", "tau0_tau3_to_mtotal_eta"], [53, 3, 1, "", "velocity_to_frequency"]], "pycbc.pool": [[53, 1, 1, "", "BroadcastPool"], [53, 1, 1, "", "SinglePool"], [53, 3, 1, "", "choose_pool"], [53, 3, 1, "", "is_main_process"], [53, 3, 1, "", "use_mpi"]], "pycbc.pool.BroadcastPool": [[53, 2, 1, "", "allmap"], [53, 2, 1, "", "broadcast"], [53, 2, 1, "", "map"]], "pycbc.pool.SinglePool": [[53, 2, 1, "", "broadcast"], [53, 2, 1, "", "imap"], [53, 2, 1, "", "map"]], "pycbc.population": [[71, 0, 0, "-", "fgmc_functions"], [71, 0, 0, "-", "fgmc_laguerre"], [71, 0, 0, "-", "fgmc_plots"], [71, 0, 0, "-", "live_pastro"], [71, 0, 0, "-", "live_pastro_utils"], [71, 0, 0, "-", "population_models"], [71, 0, 0, "-", "rates_functions"], [71, 0, 0, "-", "scale_injections"]], "pycbc.population.fgmc_functions": [[71, 1, 1, "", "BackgroundEventRate"], [71, 1, 1, "", "EventRate"], [71, 1, 1, "", "ForegroundEvents"], [71, 1, 1, "", "SignalEventRate"], [71, 3, 1, "", "alltimes"], [71, 3, 1, "", "filter_bin_lo_hi"], [71, 3, 1, "", "filter_tmplt_mchirp"], [71, 3, 1, "", "get_start_dur"], [71, 3, 1, "", "ifos_from_combo"], [71, 3, 1, "", "in_coinc_time_incl"], [71, 3, 1, "", "log_rho_bg"], [71, 3, 1, "", "log_rho_fg"], [71, 3, 1, "", "log_rho_fg_analytic"], [71, 3, 1, "", "read_full_data"], [71, 3, 1, "", "read_full_data_mchirp"], [71, 3, 1, "", "type_in_time"]], "pycbc.population.fgmc_functions.BackgroundEventRate": [[71, 2, 1, "", "add_background"], [71, 2, 1, "", "eval_pdf"], [71, 2, 1, "", "get_norms"], [71, 2, 1, "", "plot_bg"]], "pycbc.population.fgmc_functions.EventRate": [[71, 2, 1, "", "add_bank"], [71, 2, 1, "", "filter_templates"], [71, 2, 1, "", "get_ctypes"], [71, 2, 1, "", "get_livetimes"], [71, 2, 1, "", "in_coinc_time_excl"], [71, 2, 1, "", "make_bins"], [71, 2, 1, "", "moreifotimes"]], "pycbc.population.fgmc_functions.ForegroundEvents": [[71, 2, 1, "", "add_zerolag"], [71, 2, 1, "", "get_bg_pdf"], [71, 2, 1, "", "get_sg_pdf"]], "pycbc.population.fgmc_functions.SignalEventRate": [[71, 2, 1, "", "add_injections"], [71, 2, 1, "", "eval_pdf"], [71, 2, 1, "", "get_norms"], [71, 2, 1, "", "make_all_bins"], [71, 2, 1, "", "plot_inj"]], "pycbc.population.fgmc_laguerre": [[71, 1, 1, "", "augmented_rv_continuous"], [71, 1, 1, "", "count_posterior"]], "pycbc.population.fgmc_laguerre.augmented_rv_continuous": [[71, 2, 1, "", "hpd_interval"]], "pycbc.population.fgmc_laguerre.count_posterior": [[71, 2, 1, "", "expect"], [71, 2, 1, "", "p_bg"]], "pycbc.population.fgmc_plots": [[71, 3, 1, "", "dist_summary"], [71, 3, 1, "", "odds_summary"], [71, 3, 1, "", "plotdist"]], "pycbc.population.live_pastro": [[71, 3, 1, "", "check_template_param_bin_data"], [71, 3, 1, "", "noise_density_from_far"], [71, 3, 1, "", "read_template_bank_param"], [71, 3, 1, "", "signal_pdf_from_snr"], [71, 3, 1, "", "signal_rate_rescale"], [71, 3, 1, "", "signal_rate_trig_type"], [71, 3, 1, "", "template_param_bin_pa"], [71, 3, 1, "", "template_param_bin_types_farlim_pa"], [71, 3, 1, "", "template_param_bin_types_pa"]], "pycbc.population.live_pastro_utils": [[71, 1, 1, "", "PAstroData"], [71, 3, 1, "", "insert_live_pastro_option_group"]], "pycbc.population.live_pastro_utils.PAstroData": [[71, 2, 1, "", "apply_significance_limits"], [71, 2, 1, "", "do_pastro_calc"]], "pycbc.population.population_models": [[71, 3, 1, "", "average_time_between_signals"], [71, 3, 1, "", "coalescence_rate"], [71, 3, 1, "", "diff_lookback_time"], [71, 3, 1, "", "distance_from_rate"], [71, 3, 1, "", "merger_rate_density"], [71, 3, 1, "", "norm_redshift_distribution"], [71, 3, 1, "", "p_tau"], [71, 3, 1, "", "sfr_grb_2008"], [71, 3, 1, "", "sfr_madau_dickinson_2014"], [71, 3, 1, "", "sfr_madau_fragos_2017"], [71, 3, 1, "", "total_rate_upto_redshift"]], "pycbc.population.rates_functions": [[71, 3, 1, "", "draw_flat_samples"], [71, 3, 1, "", "draw_imf_samples"], [71, 3, 1, "", "draw_lnm_samples"], [71, 3, 1, "", "fgmc"], [71, 3, 1, "", "fit"], [71, 3, 1, "", "log_rho_fgmc"], [71, 3, 1, "", "mchirp_sampler_flat"], [71, 3, 1, "", "mchirp_sampler_imf"], [71, 3, 1, "", "mchirp_sampler_lnm"], [71, 3, 1, "", "prob_flat"], [71, 3, 1, "", "prob_imf"], [71, 3, 1, "", "prob_lnm"], [71, 3, 1, "", "process_full_data"], [71, 3, 1, "", "save_bkg_falloff"], [71, 3, 1, "", "skew_lognormal_samples"]], "pycbc.population.scale_injections": [[71, 3, 1, "", "astro_redshifts"], [71, 3, 1, "", "contracted_dVdc"], [71, 3, 1, "", "dlum_to_z"], [71, 3, 1, "", "estimate_vt"], [71, 3, 1, "", "inj_distance_pdf"], [71, 3, 1, "", "inj_mass_pdf"], [71, 3, 1, "", "inj_spin_pdf"], [71, 3, 1, "", "pdf_z_astro"], [71, 3, 1, "", "process_injections"], [71, 3, 1, "", "read_injections"]], "pycbc.psd": [[72, 0, 0, "-", "analytical"], [72, 0, 0, "-", "analytical_space"], [72, 3, 1, "", "associate_psds_to_multi_ifo_segments"], [72, 3, 1, "", "associate_psds_to_segments"], [72, 3, 1, "", "associate_psds_to_single_ifo_segments"], [72, 0, 0, "-", "estimate"], [72, 3, 1, "", "from_cli"], [72, 3, 1, "", "from_cli_multi_ifos"], [72, 3, 1, "", "from_cli_single_ifo"], [72, 3, 1, "", "generate_overlapping_psds"], [72, 3, 1, "", "insert_psd_option_group"], [72, 3, 1, "", "insert_psd_option_group_multi_ifo"], [72, 0, 0, "-", "read"], [72, 0, 0, "-", "variation"], [72, 3, 1, "", "verify_psd_options"], [72, 3, 1, "", "verify_psd_options_multi_ifo"]], "pycbc.psd.analytical": [[72, 3, 1, "", "AdVBNSOptimizedSensitivityP1200087"], [72, 3, 1, "", "AdVDesignSensitivityP1200087"], [72, 3, 1, "", "AdVEarlyHighSensitivityP1200087"], [72, 3, 1, "", "AdVEarlyLowSensitivityP1200087"], [72, 3, 1, "", "AdVLateHighSensitivityP1200087"], [72, 3, 1, "", "AdVLateLowSensitivityP1200087"], [72, 3, 1, "", "AdVMidHighSensitivityP1200087"], [72, 3, 1, "", "AdVMidLowSensitivityP1200087"], [72, 3, 1, "", "AdVO3LowT1800545"], [72, 3, 1, "", "AdVO4IntermediateT1800545"], [72, 3, 1, "", "AdVO4T1800545"], [72, 3, 1, "", "AdvVirgo"], [72, 3, 1, "", "CosmicExplorerP1600143"], [72, 3, 1, "", "CosmicExplorerPessimisticP1600143"], [72, 3, 1, "", "CosmicExplorerWidebandP1600143"], [72, 3, 1, "", "EinsteinTelescopeP1600143"], [72, 3, 1, "", "GEO"], [72, 3, 1, "", "GEOHF"], [72, 3, 1, "", "KAGRA"], [72, 3, 1, "", "KAGRA128MpcT1800545"], [72, 3, 1, "", "KAGRA25MpcT1800545"], [72, 3, 1, "", "KAGRA80MpcT1800545"], [72, 3, 1, "", "KAGRADesignSensitivityT1600593"], [72, 3, 1, "", "KAGRAEarlySensitivityT1600593"], [72, 3, 1, "", "KAGRALateSensitivityT1600593"], [72, 3, 1, "", "KAGRAMidSensitivityT1600593"], [72, 3, 1, "", "KAGRAOpeningSensitivityT1600593"], [72, 3, 1, "", "TAMA"], [72, 3, 1, "", "Virgo"], [72, 3, 1, "", "aLIGO140MpcT1800545"], [72, 3, 1, "", "aLIGO175MpcT1800545"], [72, 3, 1, "", "aLIGOAPlusDesignSensitivityT1800042"], [72, 3, 1, "", "aLIGOAdVO3LowT1800545"], [72, 3, 1, "", "aLIGOAdVO4IntermediateT1800545"], [72, 3, 1, "", "aLIGOAdVO4T1800545"], [72, 3, 1, "", "aLIGOBHBH20Deg"], [72, 3, 1, "", "aLIGOBHBH20DegGWINC"], [72, 3, 1, "", "aLIGOBNSOptimizedSensitivityP1200087"], [72, 3, 1, "", "aLIGODesignSensitivityP1200087"], [72, 3, 1, "", "aLIGODesignSensitivityT1800044"], [72, 3, 1, "", "aLIGOEarlyHighSensitivityP1200087"], [72, 3, 1, "", "aLIGOEarlyLowSensitivityP1200087"], [72, 3, 1, "", "aLIGOHighFrequency"], [72, 3, 1, "", "aLIGOHighFrequencyGWINC"], [72, 3, 1, "", "aLIGOKAGRA128MpcT1800545"], [72, 3, 1, "", "aLIGOKAGRA25MpcT1800545"], [72, 3, 1, "", "aLIGOKAGRA80MpcT1800545"], [72, 3, 1, "", "aLIGOLateHighSensitivityP1200087"], [72, 3, 1, "", "aLIGOLateLowSensitivityP1200087"], [72, 3, 1, "", "aLIGOMidHighSensitivityP1200087"], [72, 3, 1, "", "aLIGOMidLowSensitivityP1200087"], [72, 3, 1, "", "aLIGONSNSOpt"], [72, 3, 1, "", "aLIGONSNSOptGWINC"], [72, 3, 1, "", "aLIGONoSRMHighPower"], [72, 3, 1, "", "aLIGONoSRMLowPower"], [72, 3, 1, "", "aLIGONoSRMLowPowerGWINC"], [72, 3, 1, "", "aLIGOO3LowT1800545"], [72, 3, 1, "", "aLIGOQuantumBHBH20Deg"], [72, 3, 1, "", "aLIGOQuantumHighFrequency"], [72, 3, 1, "", "aLIGOQuantumNSNSOpt"], [72, 3, 1, "", "aLIGOQuantumNoSRMHighPower"], [72, 3, 1, "", "aLIGOQuantumNoSRMLowPower"], [72, 3, 1, "", "aLIGOQuantumZeroDetHighPower"], [72, 3, 1, "", "aLIGOQuantumZeroDetLowPower"], [72, 3, 1, "", "aLIGOThermal"], [72, 3, 1, "", "aLIGOZeroDetHighPower"], [72, 3, 1, "", "aLIGOZeroDetHighPowerGWINC"], [72, 3, 1, "", "aLIGOZeroDetLowPower"], [72, 3, 1, "", "aLIGOZeroDetLowPowerGWINC"], [72, 3, 1, "", "aLIGOaLIGO140MpcT1800545"], [72, 3, 1, "", "aLIGOaLIGO175MpcT1800545"], [72, 3, 1, "", "aLIGOaLIGODesignSensitivityT1800044"], [72, 3, 1, "", "aLIGOaLIGOO3LowT1800545"], [72, 3, 1, "", "eLIGOModel"], [72, 3, 1, "", "eLIGOShot"], [72, 3, 1, "", "flat_unity"], [72, 3, 1, "", "from_string"], [72, 3, 1, "", "get_lalsim_psd_list"], [72, 3, 1, "", "get_psd_model_list"], [72, 3, 1, "", "get_pycbc_psd_list"], [72, 3, 1, "", "iLIGOModel"], [72, 3, 1, "", "iLIGOSRD"], [72, 3, 1, "", "iLIGOSeismic"], [72, 3, 1, "", "iLIGOShot"], [72, 3, 1, "", "iLIGOThermal"]], "pycbc.psd.analytical_space": [[72, 3, 1, "", "analytical_csd_lisa_tdi_XY"], [72, 3, 1, "", "analytical_psd_lisa_tdi_AE"], [72, 3, 1, "", "analytical_psd_lisa_tdi_AE_confusion"], [72, 3, 1, "", "analytical_psd_lisa_tdi_T"], [72, 3, 1, "", "analytical_psd_lisa_tdi_XYZ"], [72, 3, 1, "", "analytical_psd_taiji_confusion_noise"], [72, 3, 1, "", "analytical_psd_taiji_tdi_AE"], [72, 3, 1, "", "analytical_psd_taiji_tdi_AE_confusion"], [72, 3, 1, "", "analytical_psd_taiji_tdi_T"], [72, 3, 1, "", "analytical_psd_taiji_tdi_XYZ"], [72, 3, 1, "", "analytical_psd_tianqin_confusion_noise"], [72, 3, 1, "", "analytical_psd_tianqin_tdi_AE"], [72, 3, 1, "", "analytical_psd_tianqin_tdi_AE_confusion"], [72, 3, 1, "", "analytical_psd_tianqin_tdi_T"], [72, 3, 1, "", "analytical_psd_tianqin_tdi_XYZ"], [72, 3, 1, "", "averaged_fplus_sq_approximated"], [72, 3, 1, "", "averaged_lisa_fplus_sq_numerical"], [72, 3, 1, "", "averaged_response_lisa_tdi"], [72, 3, 1, "", "averaged_response_taiji_tdi"], [72, 3, 1, "", "averaged_response_tianqin_tdi"], [72, 3, 1, "", "averaged_tianqin_fplus_sq_numerical"], [72, 3, 1, "", "confusion_fit_lisa"], [72, 3, 1, "", "confusion_fit_taiji"], [72, 3, 1, "", "confusion_fit_tianqin"], [72, 3, 1, "", "lisa_psd_components"], [72, 3, 1, "", "omega_length"], [72, 3, 1, "", "psd_lisa_acc_noise"], [72, 3, 1, "", "psd_lisa_oms_noise"], [72, 3, 1, "", "psd_taiji_acc_noise"], [72, 3, 1, "", "psd_taiji_oms_noise"], [72, 3, 1, "", "psd_tianqin_acc_noise"], [72, 3, 1, "", "psd_tianqin_oms_noise"], [72, 3, 1, "", "semi_analytical_psd_lisa_confusion_noise"], [72, 3, 1, "", "sensitivity_curve_lisa_SciRD"], [72, 3, 1, "", "sensitivity_curve_lisa_confusion"], [72, 3, 1, "", "sensitivity_curve_lisa_semi_analytical"], [72, 3, 1, "", "sensitivity_curve_taiji_analytical"], [72, 3, 1, "", "sensitivity_curve_taiji_confusion"], [72, 3, 1, "", "sensitivity_curve_tianqin_analytical"], [72, 3, 1, "", "sensitivity_curve_tianqin_confusion"], [72, 3, 1, "", "sh_transformed_psd_lisa_tdi_XYZ"], [72, 3, 1, "", "taiji_psd_components"], [72, 3, 1, "", "tianqin_psd_components"]], "pycbc.psd.estimate": [[72, 3, 1, "", "bandlimited_interpolate"], [72, 3, 1, "", "interpolate"], [72, 3, 1, "", "inverse_spectrum_truncation"], [72, 3, 1, "", "median_bias"], [72, 3, 1, "", "welch"]], "pycbc.psd.read": [[72, 3, 1, "", "from_numpy_arrays"], [72, 3, 1, "", "from_txt"], [72, 3, 1, "", "from_xml"]], "pycbc.psd.variation": [[72, 3, 1, "", "calc_filt_psd_variation"], [72, 3, 1, "", "create_full_filt"], [72, 3, 1, "", "find_trigger_value"], [72, 3, 1, "", "live_calc_psd_variation"], [72, 3, 1, "", "live_create_filter"], [72, 3, 1, "", "live_find_var_value"], [72, 3, 1, "", "mean_square"]], "pycbc.rate": [[53, 3, 1, "", "compute_efficiency"], [53, 3, 1, "", "compute_lower_limit"], [53, 3, 1, "", "compute_upper_limit"], [53, 3, 1, "", "compute_volume_vs_mass"], [53, 3, 1, "", "confidence_interval_min_width"], [53, 3, 1, "", "filter_injections_by_mass"], [53, 3, 1, "", "hpd_coverage"], [53, 3, 1, "", "hpd_credible_interval"], [53, 3, 1, "", "hpd_threshold"], [53, 3, 1, "", "integral_element"], [53, 3, 1, "", "integrate_efficiency"], [53, 3, 1, "", "mean_efficiency_volume"], [53, 3, 1, "", "normalize_pdf"]], "pycbc.results": [[73, 0, 0, "-", "color"], [73, 0, 0, "-", "dq"], [73, 0, 0, "-", "followup"], [73, 0, 0, "-", "layout"], [73, 0, 0, "-", "metadata"], [73, 0, 0, "-", "mpld3_utils"], [73, 0, 0, "-", "plot"], [73, 0, 0, "-", "psd"], [73, 0, 0, "-", "pygrb_plotting_utils"], [73, 0, 0, "-", "pygrb_postprocessing_utils"], [73, 0, 0, "-", "render"], [73, 0, 0, "-", "scatter_histograms"], [73, 0, 0, "-", "snr"], [73, 0, 0, "-", "str_utils"], [73, 0, 0, "-", "table_utils"], [73, 0, 0, "-", "versioning"]], "pycbc.results.color": [[73, 3, 1, "", "ifo_color"], [73, 3, 1, "", "source_color"]], "pycbc.results.dq": [[73, 3, 1, "", "get_summary_page_link"]], "pycbc.results.followup": [[73, 3, 1, "", "coinc_timeseries_plot"], [73, 3, 1, "", "columns_from_file_list"], [73, 3, 1, "", "get_gracedb_search_link"], [73, 3, 1, "", "times_to_links"], [73, 3, 1, "", "times_to_urls"], [73, 3, 1, "", "trigger_timeseries_plot"]], "pycbc.results.layout": [[73, 1, 1, "", "SectionNumber"], [73, 3, 1, "", "group_layout"], [73, 3, 1, "", "grouper"], [73, 3, 1, "", "single_layout"], [73, 3, 1, "", "two_column_layout"]], "pycbc.results.metadata": [[73, 1, 1, "", "MetaParser"], [73, 3, 1, "", "html_escape"], [73, 3, 1, "", "load_html_metadata"], [73, 3, 1, "", "load_metadata_from_file"], [73, 3, 1, "", "load_png_metadata"], [73, 3, 1, "", "save_fig_with_metadata"], [73, 3, 1, "", "save_html_with_metadata"], [73, 3, 1, "", "save_pdf_with_metadata"], [73, 3, 1, "", "save_png_with_metadata"]], "pycbc.results.metadata.MetaParser": [[73, 2, 1, "", "handle_data"], [73, 2, 1, "", "handle_starttag"]], "pycbc.results.mpld3_utils": [[73, 1, 1, "", "ClickLink"], [73, 1, 1, "", "LineTooltip"], [73, 1, 1, "", "MPLSlide"], [73, 1, 1, "", "Tooltip"]], "pycbc.results.mpld3_utils.ClickLink": [[73, 5, 1, "", "JAVASCRIPT"]], "pycbc.results.mpld3_utils.LineTooltip": [[73, 5, 1, "", "JAVASCRIPT"]], "pycbc.results.mpld3_utils.MPLSlide": [[73, 5, 1, "", "JAVASCRIPT"]], "pycbc.results.mpld3_utils.Tooltip": [[73, 5, 1, "", "JAVASCRIPT"]], "pycbc.results.plot": [[73, 3, 1, "", "add_style_opt_to_parser"], [73, 3, 1, "", "hist_overflow"], [73, 3, 1, "", "set_style_from_cli"]], "pycbc.results.psd": [[73, 3, 1, "", "generate_asd_plot"]], "pycbc.results.pygrb_plotting_utils": [[73, 3, 1, "", "axis_max_value"], [73, 3, 1, "", "contour_plotter"], [73, 3, 1, "", "make_grb_segments_plot"], [73, 3, 1, "", "pygrb_plotter"]], "pycbc.results.pygrb_postprocessing_utils": [[73, 3, 1, "", "construct_trials"], [73, 3, 1, "", "dataset_iterator"], [73, 3, 1, "", "extract_basic_trig_properties"], [73, 3, 1, "", "extract_ifos"], [73, 3, 1, "", "extract_ifos_and_vetoes"], [73, 3, 1, "", "get_antenna_dist_factor"], [73, 3, 1, "", "get_coinc_snr"], [73, 3, 1, "", "load_segment_dict"], [73, 3, 1, "", "load_time_slides"], [73, 3, 1, "", "load_triggers"], [73, 3, 1, "", "load_xml_table"], [73, 3, 1, "", "max_median_stat"], [73, 3, 1, "", "mc_cal_wf_errs"], [73, 3, 1, "", "pygrb_add_bestnr_cut_opt"], [73, 3, 1, "", "pygrb_add_bestnr_opts"], [73, 3, 1, "", "pygrb_add_injmc_opts"], [73, 3, 1, "", "pygrb_add_null_snr_opts"], [73, 3, 1, "", "pygrb_add_single_snr_cut_opt"], [73, 3, 1, "", "pygrb_initialize_plot_parser"], [73, 3, 1, "", "sort_stat"], [73, 3, 1, "", "sort_trigs"], [73, 3, 1, "", "template_hash_to_id"]], "pycbc.results.render": [[73, 3, 1, "", "get_embedded_config"], [73, 3, 1, "", "render_default"], [73, 3, 1, "", "render_glitchgram"], [73, 3, 1, "", "render_ignore"], [73, 3, 1, "", "render_text"], [73, 3, 1, "", "render_tmplt"], [73, 3, 1, "", "render_workflow_html_template"], [73, 3, 1, "", "setup_template_render"]], "pycbc.results.scatter_histograms": [[73, 3, 1, "", "construct_kde"], [73, 3, 1, "", "create_axes_grid"], [73, 3, 1, "", "create_density_plot"], [73, 3, 1, "", "create_marginalized_hist"], [73, 3, 1, "", "create_multidim_plot"], [73, 3, 1, "", "get_scale_fac"], [73, 3, 1, "", "reduce_ticks"], [73, 3, 1, "", "remove_common_offset"], [73, 3, 1, "", "set_marginal_histogram_title"]], "pycbc.results.snr": [[73, 3, 1, "", "generate_snr_plot"]], "pycbc.results.str_utils": [[73, 3, 1, "", "drop_trailing_zeros"], [73, 3, 1, "", "format_value"], [73, 3, 1, "", "get_signum"], [73, 3, 1, "", "mathjax_html_header"]], "pycbc.results.table_utils": [[73, 3, 1, "", "html_table"], [73, 3, 1, "", "static_table"]], "pycbc.results.versioning": [[73, 3, 1, "", "get_code_version_numbers"], [73, 3, 1, "", "get_library_version_info"]], "pycbc.scheme": [[53, 1, 1, "", "CPUScheme"], [53, 1, 1, "", "CUDAScheme"], [53, 1, 1, "", "ChooseBySchemeDict"], [53, 1, 1, "", "DefaultScheme"], [53, 1, 1, "", "MKLScheme"], [53, 1, 1, "", "NumpyScheme"], [53, 1, 1, "", "Scheme"], [53, 3, 1, "", "clean_cuda"], [53, 3, 1, "", "cpuonly"], [53, 3, 1, "", "current_prefix"], [53, 3, 1, "", "from_cli"], [53, 3, 1, "", "insert_processing_option_group"], [53, 3, 1, "", "register_clean_cuda"], [53, 3, 1, "", "schemed"], [53, 3, 1, "", "verify_processing_options"]], "pycbc.sensitivity": [[53, 3, 1, "", "chirp_volume_montecarlo"], [53, 3, 1, "", "compute_search_efficiency_in_bins"], [53, 3, 1, "", "compute_search_volume_in_bins"], [53, 3, 1, "", "volume_binned_pylal"], [53, 3, 1, "", "volume_montecarlo"], [53, 3, 1, "", "volume_shell"], [53, 3, 1, "", "volume_to_distance_with_errors"]], "pycbc.strain": [[74, 0, 0, "-", "calibration"], [74, 0, 0, "-", "gate"], [74, 0, 0, "-", "lines"], [74, 3, 1, "", "read_model_from_config"], [74, 0, 0, "-", "recalibrate"], [74, 0, 0, "-", "strain"]], "pycbc.strain.calibration": [[74, 1, 1, "", "CubicSpline"], [74, 1, 1, "", "Recalibrate"]], "pycbc.strain.calibration.CubicSpline": [[74, 2, 1, "", "apply_calibration"], [74, 5, 1, "", "name"]], "pycbc.strain.calibration.Recalibrate": [[74, 2, 1, "", "apply_calibration"], [74, 2, 1, "", "from_config"], [74, 2, 1, "", "map_to_adjust"], [74, 5, 1, "", "name"]], "pycbc.strain.gate": [[74, 3, 1, "", "add_gate_option_group"], [74, 3, 1, "", "apply_gates_to_fd"], [74, 3, 1, "", "apply_gates_to_td"], [74, 3, 1, "", "gate_and_paint"], [74, 3, 1, "", "gates_from_cli"], [74, 3, 1, "", "psd_gates_from_cli"]], "pycbc.strain.lines": [[74, 3, 1, "", "avg_inner_product"], [74, 3, 1, "", "calibration_lines"], [74, 3, 1, "", "clean_data"], [74, 3, 1, "", "complex_median"], [74, 3, 1, "", "line_model"], [74, 3, 1, "", "matching_line"]], "pycbc.strain.recalibrate": [[74, 1, 1, "", "CubicSpline"], [74, 1, 1, "", "PhysicalModel"], [74, 1, 1, "", "Recalibrate"]], "pycbc.strain.recalibrate.CubicSpline": [[74, 2, 1, "", "apply_calibration"], [74, 5, 1, "", "name"]], "pycbc.strain.recalibrate.PhysicalModel": [[74, 2, 1, "", "adjust_strain"], [74, 2, 1, "", "from_config"], [74, 2, 1, "", "map_to_adjust"], [74, 5, 1, "", "name"], [74, 2, 1, "", "tf_from_file"], [74, 2, 1, "", "update_c"], [74, 2, 1, "", "update_g"], [74, 2, 1, "", "update_r"]], "pycbc.strain.recalibrate.Recalibrate": [[74, 2, 1, "", "apply_calibration"], [74, 2, 1, "", "from_config"], [74, 2, 1, "", "map_to_adjust"], [74, 5, 1, "", "name"]], "pycbc.strain.strain": [[74, 1, 1, "", "StrainBuffer"], [74, 1, 1, "", "StrainSegments"], [74, 3, 1, "", "create_memory_and_engine_for_class_based_fft"], [74, 3, 1, "", "detect_loud_glitches"], [74, 3, 1, "", "execute_cached_fft"], [74, 3, 1, "", "execute_cached_ifft"], [74, 3, 1, "", "from_cli"], [74, 3, 1, "", "from_cli_multi_ifos"], [74, 3, 1, "", "from_cli_single_ifo"], [74, 3, 1, "", "gate_data"], [74, 3, 1, "", "insert_strain_option_group"], [74, 3, 1, "", "insert_strain_option_group_multi_ifo"], [74, 3, 1, "", "next_power_of_2"], [74, 3, 1, "", "verify_strain_options"], [74, 3, 1, "", "verify_strain_options_multi_ifo"]], "pycbc.strain.strain.StrainBuffer": [[74, 2, 1, "", "add_hard_count"], [74, 2, 1, "", "advance"], [74, 2, 1, "", "check_psd_dist"], [74, 4, 1, "", "end_time"], [74, 2, 1, "", "from_cli"], [74, 2, 1, "", "invalidate_psd"], [74, 2, 1, "", "near_hwinj"], [74, 2, 1, "", "null_advance_strain"], [74, 2, 1, "", "overwhitened_data"], [74, 2, 1, "", "recalculate_psd"], [74, 4, 1, "", "start_time"]], "pycbc.strain.strain.StrainSegments": [[74, 2, 1, "", "fourier_segments"], [74, 2, 1, "", "from_cli"], [74, 2, 1, "", "from_cli_multi_ifos"], [74, 2, 1, "", "from_cli_single_ifo"], [74, 2, 1, "", "insert_segment_option_group"], [74, 2, 1, "", "insert_segment_option_group_multi_ifo"], [74, 5, 1, "", "required_opts_list"], [74, 2, 1, "", "verify_segment_options"], [74, 2, 1, "", "verify_segment_options_multi_ifo"]], "pycbc.tmpltbank": [[75, 0, 0, "-", "bank_conversions"], [75, 0, 0, "-", "bank_output_utils"], [75, 0, 0, "-", "brute_force_methods"], [75, 0, 0, "-", "calc_moments"], [75, 0, 0, "-", "coord_utils"], [75, 0, 0, "-", "lambda_mapping"], [75, 0, 0, "-", "lattice_utils"], [75, 0, 0, "-", "option_utils"], [75, 0, 0, "-", "partitioned_bank"]], "pycbc.tmpltbank.bank_conversions": [[75, 3, 1, "", "get_bank_property"]], "pycbc.tmpltbank.bank_output_utils": [[75, 3, 1, "", "calculate_ethinca_metric_comps"], [75, 3, 1, "", "convert_to_sngl_inspiral_table"], [75, 3, 1, "", "output_bank_to_file"], [75, 3, 1, "", "output_bank_to_hdf"], [75, 3, 1, "", "output_sngl_inspiral_table"]], "pycbc.tmpltbank.brute_force_methods": [[75, 3, 1, "", "find_xi_extrema_brute"], [75, 3, 1, "", "get_mass_distribution"], [75, 3, 1, "", "get_physical_covaried_masses"], [75, 3, 1, "", "stack_xi_direction_brute"]], "pycbc.tmpltbank.calc_moments": [[75, 3, 1, "", "calculate_metric"], [75, 3, 1, "", "calculate_metric_comp"], [75, 3, 1, "", "calculate_moment"], [75, 3, 1, "", "determine_eigen_directions"], [75, 3, 1, "", "get_moments"], [75, 3, 1, "", "interpolate_psd"]], "pycbc.tmpltbank.coord_utils": [[75, 3, 1, "", "calc_point_dist"], [75, 3, 1, "", "calc_point_dist_vary"], [75, 3, 1, "", "estimate_mass_range"], [75, 3, 1, "", "find_closest_calculated_frequencies"], [75, 3, 1, "", "find_max_and_min_frequencies"], [75, 3, 1, "", "get_conv_params"], [75, 3, 1, "", "get_cov_params"], [75, 3, 1, "", "get_covaried_params"], [75, 3, 1, "", "get_mu_params"], [75, 3, 1, "", "get_point_distance"], [75, 3, 1, "", "get_random_mass"], [75, 3, 1, "", "get_random_mass_point_particles"], [75, 3, 1, "", "outspiral_loop"], [75, 3, 1, "", "return_nearest_cutoff"], [75, 3, 1, "", "rotate_vector"], [75, 3, 1, "", "test_point_dist"]], "pycbc.tmpltbank.lambda_mapping": [[75, 3, 1, "", "ethinca_order_from_string"], [75, 3, 1, "", "generate_inverse_mapping"], [75, 3, 1, "", "generate_mapping"], [75, 3, 1, "", "get_chirp_params"], [75, 3, 1, "", "get_ethinca_orders"]], "pycbc.tmpltbank.lattice_utils": [[75, 3, 1, "", "generate_anstar_3d_lattice"], [75, 3, 1, "", "generate_hexagonal_lattice"]], "pycbc.tmpltbank.option_utils": [[75, 1, 1, "", "IndentedHelpFormatterWithNL"], [75, 3, 1, "", "check_ethinca_against_bank_params"], [75, 1, 1, "", "ethincaParameters"], [75, 3, 1, "", "get_options_from_group"], [75, 3, 1, "", "insert_base_bank_options"], [75, 3, 1, "", "insert_ethinca_metric_options"], [75, 3, 1, "", "insert_mass_range_option_group"], [75, 3, 1, "", "insert_metric_calculation_options"], [75, 1, 1, "", "massRangeParameters"], [75, 1, 1, "", "metricParameters"], [75, 3, 1, "", "verify_ethinca_metric_options"], [75, 3, 1, "", "verify_mass_range_options"], [75, 3, 1, "", "verify_metric_calculation_options"]], "pycbc.tmpltbank.option_utils.IndentedHelpFormatterWithNL": [[75, 2, 1, "", "format_description"], [75, 2, 1, "", "format_option"]], "pycbc.tmpltbank.option_utils.ethincaParameters": [[75, 2, 1, "", "from_argparse"]], "pycbc.tmpltbank.option_utils.massRangeParameters": [[75, 5, 1, "", "default_delta_bh_spin"], [75, 5, 1, "", "default_delta_ns_mass"], [75, 5, 1, "", "default_ns_eos"], [75, 5, 1, "", "default_nsbh_boundary_mass"], [75, 2, 1, "", "from_argparse"], [75, 2, 1, "", "is_outside_range"]], "pycbc.tmpltbank.option_utils.metricParameters": [[75, 4, 1, "", "evals"], [75, 4, 1, "", "evecs"], [75, 4, 1, "", "evecsCV"], [75, 2, 1, "", "from_argparse"], [75, 4, 1, "", "metric"], [75, 4, 1, "", "moments"], [75, 4, 1, "", "psd"], [75, 4, 1, "", "time_unprojected_metric"]], "pycbc.tmpltbank.partitioned_bank": [[75, 1, 1, "", "PartitionedTmpltbank"]], "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank": [[75, 2, 1, "", "add_point_by_chi_coords"], [75, 2, 1, "", "add_point_by_masses"], [75, 2, 1, "", "add_tmpltbank_from_hdf_file"], [75, 2, 1, "", "add_tmpltbank_from_xml_table"], [75, 2, 1, "", "calc_point_distance"], [75, 2, 1, "", "calc_point_distance_vary"], [75, 2, 1, "", "check_bin_existence"], [75, 2, 1, "", "find_point_bin"], [75, 2, 1, "", "get_freq_map_and_normalizations"], [75, 2, 1, "", "get_point_from_bins_and_idx"], [75, 2, 1, "", "output_all_points"], [75, 2, 1, "", "test_point_distance"], [75, 2, 1, "", "test_point_distance_vary"]], "pycbc.transforms": [[53, 1, 1, "", "AlignTotalSpin"], [53, 1, 1, "", "AlignedMassSpinToCartesianSpin"], [53, 1, 1, "", "BaseTransform"], [53, 1, 1, "", "CartesianSpin1ToSphericalSpin1"], [53, 1, 1, "", "CartesianSpin2ToSphericalSpin2"], [53, 1, 1, "", "CartesianSpinToAlignedMassSpin"], [53, 1, 1, "", "CartesianSpinToChiP"], [53, 1, 1, "", "CartesianSpinToPrecessionMassSpin"], [53, 1, 1, "", "CartesianToSpherical"], [53, 1, 1, "", "ChiPToCartesianSpin"], [53, 1, 1, "", "ChirpDistanceToDistance"], [53, 1, 1, "", "CustomTransform"], [53, 1, 1, "", "CustomTransformMultiOutputs"], [53, 1, 1, "", "DistanceToChirpDistance"], [53, 1, 1, "", "DistanceToRedshift"], [53, 1, 1, "", "Exponent"], [53, 1, 1, "", "GEOToLISA"], [53, 1, 1, "", "GEOToSSB"], [53, 1, 1, "", "LISAToGEO"], [53, 1, 1, "", "LISAToSSB"], [53, 1, 1, "", "LambdaFromMultipleTOVFiles"], [53, 1, 1, "", "LambdaFromTOVFile"], [53, 1, 1, "", "Log"], [53, 1, 1, "", "Logistic"], [53, 1, 1, "", "Logit"], [53, 1, 1, "", "Mass1Mass2ToMchirpEta"], [53, 1, 1, "", "Mass1Mass2ToMchirpQ"], [53, 1, 1, "", "MchirpEtaToMass1Mass2"], [53, 1, 1, "", "MchirpQToMass1Mass2"], [53, 1, 1, "", "PrecessionMassSpinToCartesianSpin"], [53, 1, 1, "", "SSBToGEO"], [53, 1, 1, "", "SSBToLISA"], [53, 1, 1, "", "SphericalSpin1ToCartesianSpin1"], [53, 1, 1, "", "SphericalSpin2ToCartesianSpin2"], [53, 1, 1, "", "SphericalToCartesian"], [53, 3, 1, "", "apply_transforms"], [53, 3, 1, "", "compute_jacobian"], [53, 3, 1, "", "get_common_cbc_transforms"], [53, 3, 1, "", "order_transforms"], [53, 3, 1, "", "read_transforms_from_config"]], "pycbc.transforms.AlignTotalSpin": [[53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.AlignedMassSpinToCartesianSpin": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_transform"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.BaseTransform": [[53, 2, 1, "", "format_output"], [53, 2, 1, "", "from_config"], [53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.CartesianSpin1ToSphericalSpin1": [[53, 5, 1, "", "name"]], "pycbc.transforms.CartesianSpin2ToSphericalSpin2": [[53, 5, 1, "", "name"]], "pycbc.transforms.CartesianSpinToAlignedMassSpin": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.CartesianSpinToChiP": [[53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.CartesianSpinToPrecessionMassSpin": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.CartesianToSpherical": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.ChiPToCartesianSpin": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.ChirpDistanceToDistance": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.CustomTransform": [[53, 2, 1, "", "from_config"], [53, 2, 1, "", "jacobian"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.CustomTransformMultiOutputs": [[53, 2, 1, "", "from_config"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.DistanceToChirpDistance": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.DistanceToRedshift": [[53, 5, 1, "", "inverse"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.Exponent": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.GEOToLISA": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_transform"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.GEOToSSB": [[53, 5, 1, "", "default_params_name"], [53, 2, 1, "", "from_config"], [53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_transform"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.LISAToGEO": [[53, 5, 1, "", "default_params_name"], [53, 2, 1, "", "from_config"], [53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_transform"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.LISAToSSB": [[53, 5, 1, "", "default_params_name"], [53, 2, 1, "", "from_config"], [53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_transform"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.LambdaFromMultipleTOVFiles": [[53, 4, 1, "", "distance"], [53, 2, 1, "", "from_config"], [53, 2, 1, "", "get_eos"], [53, 4, 1, "", "lambda_param"], [53, 4, 1, "", "map_file"], [53, 4, 1, "", "mass_param"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.LambdaFromTOVFile": [[53, 4, 1, "", "data"], [53, 4, 1, "", "distance"], [53, 2, 1, "", "from_config"], [53, 4, 1, "", "lambda_data"], [53, 2, 1, "", "lambda_from_tov_data"], [53, 4, 1, "", "lambda_param"], [53, 4, 1, "", "mass_data"], [53, 4, 1, "", "mass_param"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.Log": [[53, 4, 1, "", "inputvar"], [53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 5, 1, "", "name"], [53, 4, 1, "", "outputvar"], [53, 2, 1, "", "transform"]], "pycbc.transforms.Logistic": [[53, 4, 1, "", "bounds"], [53, 2, 1, "", "from_config"], [53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.Logit": [[53, 4, 1, "", "bounds"], [53, 2, 1, "", "from_config"], [53, 4, 1, "", "inputvar"], [53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 2, 1, "", "logistic"], [53, 2, 1, "", "logit"], [53, 5, 1, "", "name"], [53, 4, 1, "", "outputvar"], [53, 2, 1, "", "transform"]], "pycbc.transforms.Mass1Mass2ToMchirpEta": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.Mass1Mass2ToMchirpQ": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.MchirpEtaToMass1Mass2": [[53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.MchirpQToMass1Mass2": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.PrecessionMassSpinToCartesianSpin": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_transform"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.SSBToGEO": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_transform"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.SSBToLISA": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_transform"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.SphericalSpin1ToCartesianSpin1": [[53, 5, 1, "", "inverse"], [53, 5, 1, "", "name"]], "pycbc.transforms.SphericalSpin2ToCartesianSpin2": [[53, 5, 1, "", "inverse"], [53, 5, 1, "", "name"]], "pycbc.transforms.SphericalToCartesian": [[53, 5, 1, "", "inverse"], [53, 2, 1, "", "inverse_transform"], [53, 5, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.types": [[76, 0, 0, "-", "aligned"], [76, 0, 0, "-", "array"], [76, 0, 0, "-", "array_cpu"], [76, 0, 0, "-", "config"], [76, 0, 0, "-", "frequencyseries"], [76, 0, 0, "-", "optparse"], [76, 0, 0, "-", "timeseries"]], "pycbc.types.aligned": [[76, 3, 1, "", "check_aligned"], [76, 3, 1, "", "empty"], [76, 3, 1, "", "zeros"]], "pycbc.types.array": [[76, 1, 1, "", "Array"], [76, 3, 1, "", "check_same_len_precision"], [76, 3, 1, "", "common_kind"], [76, 3, 1, "", "complex_same_precision_as"], [76, 3, 1, "", "empty"], [76, 3, 1, "", "force_precision_to_match"], [76, 3, 1, "", "load_array"], [76, 3, 1, "", "real_same_precision_as"], [76, 3, 1, "", "zeros"]], "pycbc.types.array.Array": [[76, 2, 1, "", "abs_arg_max"], [76, 2, 1, "", "abs_max_loc"], [76, 2, 1, "", "almost_equal_elem"], [76, 2, 1, "", "almost_equal_norm"], [76, 2, 1, "", "astype"], [76, 2, 1, "", "clear"], [76, 2, 1, "", "conj"], [76, 2, 1, "", "copy"], [76, 2, 1, "", "cumsum"], [76, 4, 1, "", "data"], [76, 2, 1, "", "dot"], [76, 4, 1, "", "dtype"], [76, 2, 1, "", "fill"], [76, 2, 1, "", "imag"], [76, 2, 1, "", "inner"], [76, 4, 1, "", "itemsize"], [76, 4, 1, "", "kind"], [76, 2, 1, "", "lal"], [76, 2, 1, "", "max"], [76, 2, 1, "", "max_loc"], [76, 2, 1, "", "min"], [76, 2, 1, "", "multiply_and_add"], [76, 4, 1, "", "nbytes"], [76, 4, 1, "", "ndim"], [76, 2, 1, "", "numpy"], [76, 4, 1, "", "precision"], [76, 4, 1, "", "ptr"], [76, 2, 1, "", "real"], [76, 2, 1, "", "resize"], [76, 2, 1, "", "roll"], [76, 2, 1, "", "save"], [76, 4, 1, "", "shape"], [76, 2, 1, "", "squared_norm"], [76, 2, 1, "", "sum"], [76, 2, 1, "", "take"], [76, 2, 1, "", "trim_zeros"], [76, 2, 1, "", "vdot"], [76, 2, 1, "", "view"], [76, 2, 1, "", "weighted_inner"]], "pycbc.types.array_cpu": [[76, 3, 1, "", "abs_arg_max"], [76, 3, 1, "", "abs_arg_max_complex"], [76, 3, 1, "", "abs_max_loc"], [76, 3, 1, "", "clear"], [76, 3, 1, "", "cumsum"], [76, 3, 1, "", "dot"], [76, 3, 1, "", "empty"], [76, 3, 1, "", "inner"], [76, 3, 1, "", "inner_real"], [76, 3, 1, "", "max"], [76, 3, 1, "", "max_loc"], [76, 3, 1, "", "min"], [76, 3, 1, "", "multiply_and_add"], [76, 3, 1, "", "numpy"], [76, 3, 1, "", "ptr"], [76, 3, 1, "", "squared_norm"], [76, 3, 1, "", "sum"], [76, 3, 1, "", "take"], [76, 3, 1, "", "vdot"], [76, 3, 1, "", "weighted_inner"], [76, 3, 1, "", "zeros"]], "pycbc.types.config": [[76, 1, 1, "", "DeepCopyableConfigParser"], [76, 1, 1, "", "InterpolatingConfigParser"]], "pycbc.types.config.InterpolatingConfigParser": [[76, 2, 1, "", "add_options_to_section"], [76, 2, 1, "", "check_duplicate_options"], [76, 2, 1, "", "from_cli"], [76, 2, 1, "", "get_opt_tag"], [76, 2, 1, "", "get_opt_tags"], [76, 2, 1, "", "get_subsections"], [76, 2, 1, "", "has_option_tag"], [76, 2, 1, "", "has_option_tags"], [76, 2, 1, "", "interpolate_string"], [76, 2, 1, "", "perform_extended_interpolation"], [76, 2, 1, "", "populate_shared_sections"], [76, 2, 1, "", "read_ini_file"], [76, 2, 1, "", "sanitize_newline"], [76, 2, 1, "", "sanity_check_subsections"], [76, 2, 1, "", "split_multi_sections"]], "pycbc.types.frequencyseries": [[76, 1, 1, "", "FrequencySeries"], [76, 3, 1, "", "load_frequencyseries"]], "pycbc.types.frequencyseries.FrequencySeries": [[76, 2, 1, "", "almost_equal_elem"], [76, 2, 1, "", "almost_equal_norm"], [76, 2, 1, "", "at_frequency"], [76, 2, 1, "", "cyclic_time_shift"], [76, 4, 1, "", "delta_f"], [76, 4, 1, "", "delta_t"], [76, 4, 1, "", "duration"], [76, 4, 1, "", "end_time"], [76, 4, 1, "", "epoch"], [76, 2, 1, "", "get_delta_f"], [76, 2, 1, "", "get_epoch"], [76, 2, 1, "", "get_sample_frequencies"], [76, 2, 1, "", "lal"], [76, 2, 1, "", "match"], [76, 2, 1, "", "plot"], [76, 4, 1, "", "sample_frequencies"], [76, 4, 1, "", "sample_rate"], [76, 2, 1, "", "save"], [76, 4, 1, "", "start_time"], [76, 2, 1, "", "to_frequencyseries"], [76, 2, 1, "", "to_timeseries"]], "pycbc.types.optparse": [[76, 1, 1, "", "DictOptionAction"], [76, 1, 1, "", "DictWithDefaultReturn"], [76, 1, 1, "", "MultiDetDictOptionAction"], [76, 1, 1, "", "MultiDetMultiColonOptionAction"], [76, 1, 1, "", "MultiDetOptionAction"], [76, 1, 1, "", "MultiDetOptionActionSpecial"], [76, 1, 1, "", "MultiDetOptionAppendAction"], [76, 3, 1, "", "convert_to_process_params_dict"], [76, 3, 1, "", "copy_opts_for_single_ifo"], [76, 3, 1, "", "ensure_one_opt"], [76, 3, 1, "", "ensure_one_opt_multi_ifo"], [76, 3, 1, "", "nonnegative_float"], [76, 3, 1, "", "nonnegative_int"], [76, 3, 1, "", "positive_float"], [76, 3, 1, "", "positive_int"], [76, 3, 1, "", "required_opts"], [76, 3, 1, "", "required_opts_multi_ifo"]], "pycbc.types.optparse.DictWithDefaultReturn": [[76, 5, 1, "", "default_set"], [76, 5, 1, "", "ifo_set"]], "pycbc.types.timeseries": [[76, 1, 1, "", "TimeSeries"], [76, 3, 1, "", "load_timeseries"]], "pycbc.types.timeseries.TimeSeries": [[76, 2, 1, "", "add_into"], [76, 2, 1, "", "almost_equal_elem"], [76, 2, 1, "", "almost_equal_norm"], [76, 2, 1, "", "append_zeros"], [76, 2, 1, "", "at_time"], [76, 2, 1, "", "at_times"], [76, 2, 1, "", "crop"], [76, 2, 1, "", "cyclic_time_shift"], [76, 4, 1, "", "delta_f"], [76, 4, 1, "", "delta_t"], [76, 2, 1, "", "detrend"], [76, 4, 1, "", "duration"], [76, 4, 1, "", "end_time"], [76, 2, 1, "", "epoch_close"], [76, 2, 1, "", "filter_psd"], [76, 2, 1, "", "fir_zero_filter"], [76, 2, 1, "", "gate"], [76, 2, 1, "", "get_delta_t"], [76, 2, 1, "", "get_duration"], [76, 2, 1, "", "get_end_time"], [76, 2, 1, "", "get_sample_rate"], [76, 2, 1, "", "get_sample_times"], [76, 2, 1, "", "highpass_fir"], [76, 2, 1, "", "inject"], [76, 2, 1, "", "lal"], [76, 2, 1, "", "lowpass_fir"], [76, 2, 1, "", "match"], [76, 2, 1, "", "notch_fir"], [76, 2, 1, "", "plot"], [76, 2, 1, "", "prepend_zeros"], [76, 2, 1, "", "psd"], [76, 2, 1, "", "qtransform"], [76, 2, 1, "", "resample"], [76, 4, 1, "", "sample_rate"], [76, 2, 1, "", "sample_rate_close"], [76, 4, 1, "", "sample_times"], [76, 2, 1, "", "save"], [76, 2, 1, "", "save_to_wav"], [76, 4, 1, "", "start_time"], [76, 2, 1, "", "time_slice"], [76, 2, 1, "", "to_astropy"], [76, 2, 1, "", "to_frequencyseries"], [76, 2, 1, "", "to_timeseries"], [76, 2, 1, "", "whiten"]], "pycbc.vetoes": [[77, 0, 0, "-", "autochisq"], [77, 0, 0, "-", "bank_chisq"], [77, 0, 0, "-", "chisq"], [77, 0, 0, "-", "chisq_cpu"], [77, 0, 0, "-", "sgchisq"]], "pycbc.vetoes.autochisq": [[77, 1, 1, "", "SingleDetAutoChisq"], [77, 1, 1, "", "SingleDetSkyMaxAutoChisq"], [77, 3, 1, "", "autochisq_from_precomputed"]], "pycbc.vetoes.autochisq.SingleDetAutoChisq": [[77, 2, 1, "", "values"]], "pycbc.vetoes.autochisq.SingleDetSkyMaxAutoChisq": [[77, 2, 1, "", "values"]], "pycbc.vetoes.bank_chisq": [[77, 1, 1, "", "SingleDetBankVeto"], [77, 1, 1, "", "SingleDetSkyMaxBankVeto"], [77, 3, 1, "", "bank_chisq_from_filters"], [77, 3, 1, "", "segment_snrs"], [77, 3, 1, "", "template_overlaps"]], "pycbc.vetoes.bank_chisq.SingleDetBankVeto": [[77, 2, 1, "", "cache_overlaps"], [77, 2, 1, "", "cache_segment_snrs"], [77, 2, 1, "", "values"]], "pycbc.vetoes.bank_chisq.SingleDetSkyMaxBankVeto": [[77, 2, 1, "", "values"]], "pycbc.vetoes.chisq": [[77, 1, 1, "", "SingleDetPowerChisq"], [77, 1, 1, "", "SingleDetSkyMaxPowerChisq"], [77, 3, 1, "", "chisq_accum_bin"], [77, 3, 1, "", "fastest_power_chisq_at_points"], [77, 3, 1, "", "power_chisq"], [77, 3, 1, "", "power_chisq_at_points_from_precomputed"], [77, 3, 1, "", "power_chisq_bins"], [77, 3, 1, "", "power_chisq_bins_from_sigmasq_series"], [77, 3, 1, "", "power_chisq_from_precomputed"], [77, 3, 1, "", "shift_sum"]], "pycbc.vetoes.chisq.SingleDetPowerChisq": [[77, 2, 1, "", "cached_chisq_bins"], [77, 2, 1, "", "parse_option"], [77, 2, 1, "", "values"]], "pycbc.vetoes.chisq.SingleDetSkyMaxPowerChisq": [[77, 2, 1, "", "calculate_chisq_bins"], [77, 2, 1, "", "values"]], "pycbc.vetoes.chisq_cpu": [[77, 3, 1, "", "chisq_accum_bin"], [77, 3, 1, "", "chisq_accum_bin_cython"], [77, 3, 1, "", "chisq_accum_bin_numpy"], [77, 3, 1, "", "point_chisq_code"], [77, 3, 1, "", "shift_sum"]], "pycbc.vetoes.sgchisq": [[77, 1, 1, "", "SingleDetSGChisq"]], "pycbc.vetoes.sgchisq.SingleDetSGChisq": [[77, 2, 1, "", "from_cli"], [77, 2, 1, "", "insert_option_group"], [77, 5, 1, "", "returns"], [77, 2, 1, "", "values"]], "pycbc.waveform": [[78, 0, 0, "-", "bank"], [78, 0, 0, "-", "compress"], [78, 0, 0, "-", "decompress_cpu"], [78, 0, 0, "-", "decompress_cpu_cython"], [78, 0, 0, "-", "generator"], [78, 0, 0, "-", "multiband"], [78, 0, 0, "-", "nltides"], [78, 0, 0, "-", "parameters"], [78, 0, 0, "-", "plugin"], [78, 0, 0, "-", "premerger"], [78, 0, 0, "-", "ringdown"], [78, 0, 0, "-", "sinegauss"], [78, 0, 0, "-", "spa_tmplt"], [78, 0, 0, "-", "spa_tmplt_cpu"], [78, 0, 0, "-", "supernovae"], [78, 0, 0, "-", "utils"], [78, 0, 0, "-", "utils_cpu"], [78, 0, 0, "-", "waveform"], [78, 0, 0, "-", "waveform_modes"]], "pycbc.waveform.bank": [[78, 1, 1, "", "FilterBank"], [78, 1, 1, "", "FilterBankSkyMax"], [78, 1, 1, "", "LiveFilterBank"], [78, 1, 1, "", "TemplateBank"], [78, 3, 1, "", "add_approximant_arg"], [78, 3, 1, "", "boolargs_from_apprxstr"], [78, 3, 1, "", "find_variable_start_frequency"], [78, 3, 1, "", "parse_approximant_arg"], [78, 3, 1, "", "sigma_cached"], [78, 3, 1, "", "tuple_to_hash"]], "pycbc.waveform.bank.FilterBank": [[78, 2, 1, "", "generate_with_delta_f_and_max_freq"], [78, 2, 1, "", "get_decompressed_waveform"]], "pycbc.waveform.bank.LiveFilterBank": [[78, 2, 1, "", "freq_resolution_for_template"], [78, 2, 1, "", "get_template"], [78, 2, 1, "", "getslice"], [78, 2, 1, "", "id_from_param"], [78, 2, 1, "", "round_up"]], "pycbc.waveform.bank.TemplateBank": [[78, 2, 1, "", "approximant"], [78, 2, 1, "", "end_frequency"], [78, 2, 1, "", "ensure_hash"], [78, 2, 1, "", "ensure_standard_filter_columns"], [78, 5, 1, "", "extra_args"], [78, 5, 1, "", "filehandler"], [78, 5, 1, "", "has_compressed_waveforms"], [78, 5, 1, "", "indoc"], [78, 4, 1, "", "parameters"], [78, 2, 1, "", "parse_approximant"], [78, 5, 1, "", "table"], [78, 2, 1, "", "template_thinning"], [78, 2, 1, "", "write_to_hdf"]], "pycbc.waveform.compress": [[78, 1, 1, "", "CompressedWaveform"], [78, 3, 1, "", "compress_waveform"], [78, 3, 1, "", "fd_decompress"], [78, 3, 1, "", "inline_linear_interp"], [78, 3, 1, "", "mchirp_compression"], [78, 3, 1, "", "rough_time_estimate"], [78, 3, 1, "", "spa_compression"], [78, 3, 1, "", "vecdiff"]], "pycbc.waveform.compress.CompressedWaveform": [[78, 4, 1, "", "amplitude"], [78, 2, 1, "", "clear_cache"], [78, 2, 1, "", "decompress"], [78, 2, 1, "", "from_hdf"], [78, 5, 1, "", "interpolation"], [78, 5, 1, "", "load_to_memory"], [78, 5, 1, "", "mismatch"], [78, 4, 1, "", "phase"], [78, 5, 1, "", "precision"], [78, 4, 1, "", "sample_points"], [78, 5, 1, "", "tolerance"], [78, 2, 1, "", "write_to_hdf"]], "pycbc.waveform.decompress_cpu": [[78, 3, 1, "", "inline_linear_interp"]], "pycbc.waveform.decompress_cpu_cython": [[78, 3, 1, "", "decomp_ccode_double"], [78, 3, 1, "", "decomp_ccode_float"]], "pycbc.waveform.generator": [[78, 1, 1, "", "BaseCBCGenerator"], [78, 1, 1, "", "BaseFDomainDetFrameGenerator"], [78, 1, 1, "", "BaseGenerator"], [78, 1, 1, "", "FDomainCBCGenerator"], [78, 1, 1, "", "FDomainCBCModesGenerator"], [78, 1, 1, "", "FDomainDetFrameGenerator"], [78, 1, 1, "", "FDomainDetFrameModesGenerator"], [78, 1, 1, "", "FDomainDetFrameTwoPolGenerator"], [78, 1, 1, "", "FDomainDetFrameTwoPolNoRespGenerator"], [78, 1, 1, "", "FDomainDirectDetFrameGenerator"], [78, 1, 1, "", "FDomainFreqTauRingdownGenerator"], [78, 1, 1, "", "FDomainMassSpinRingdownGenerator"], [78, 1, 1, "", "TDomainCBCGenerator"], [78, 1, 1, "", "TDomainCBCModesGenerator"], [78, 1, 1, "", "TDomainFreqTauRingdownGenerator"], [78, 1, 1, "", "TDomainMassSpinRingdownGenerator"], [78, 1, 1, "", "TDomainSupernovaeGenerator"], [78, 3, 1, "", "select_waveform_generator"], [78, 3, 1, "", "select_waveform_modes_generator"]], "pycbc.waveform.generator.BaseCBCGenerator": [[78, 5, 1, "", "possible_args"]], "pycbc.waveform.generator.BaseFDomainDetFrameGenerator": [[78, 5, 1, "", "current_params"], [78, 5, 1, "", "detector_names"], [78, 5, 1, "", "detectors"], [78, 4, 1, "", "epoch"], [78, 5, 1, "", "frozen_location_args"], [78, 2, 1, "", "generate"], [78, 5, 1, "", "location_args"], [78, 5, 1, "", "rframe_generator"], [78, 2, 1, "", "select_rframe_generator"], [78, 2, 1, "", "set_epoch"], [78, 4, 1, "", "static_args"], [78, 5, 1, "", "variable_args"]], "pycbc.waveform.generator.BaseGenerator": [[78, 5, 1, "", "current_params"], [78, 5, 1, "", "frozen_params"], [78, 2, 1, "", "generate"], [78, 5, 1, "", "generator"], [78, 4, 1, "", "static_args"], [78, 5, 1, "", "variable_args"]], "pycbc.waveform.generator.FDomainDetFrameGenerator": [[78, 5, 1, "", "current_params"], [78, 5, 1, "", "detector_names"], [78, 5, 1, "", "detectors"], [78, 5, 1, "", "epoch"], [78, 5, 1, "", "frozen_location_args"], [78, 2, 1, "", "generate"], [78, 5, 1, "", "location_args"], [78, 5, 1, "", "rframe_generator"], [78, 2, 1, "", "select_rframe_generator"], [78, 5, 1, "", "variable_args"]], "pycbc.waveform.generator.FDomainDetFrameModesGenerator": [[78, 5, 1, "", "current_params"], [78, 5, 1, "", "detector_names"], [78, 5, 1, "", "detectors"], [78, 5, 1, "", "epoch"], [78, 5, 1, "", "frozen_location_args"], [78, 2, 1, "", "generate"], [78, 5, 1, "", "location_args"], [78, 5, 1, "", "rframe_generator"], [78, 2, 1, "", "select_rframe_generator"], [78, 5, 1, "", "variable_args"]], "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator": [[78, 5, 1, "", "current_params"], [78, 5, 1, "", "detector_names"], [78, 5, 1, "", "detectors"], [78, 5, 1, "", "epoch"], [78, 5, 1, "", "frozen_location_args"], [78, 2, 1, "", "generate"], [78, 5, 1, "", "location_args"], [78, 5, 1, "", "rframe_generator"], [78, 2, 1, "", "select_rframe_generator"], [78, 5, 1, "", "variable_args"]], "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator": [[78, 5, 1, "", "current_params"], [78, 5, 1, "", "detector_names"], [78, 5, 1, "", "detectors"], [78, 5, 1, "", "epoch"], [78, 5, 1, "", "frozen_location_args"], [78, 2, 1, "", "generate"], [78, 5, 1, "", "rframe_generator"], [78, 2, 1, "", "select_rframe_generator"], [78, 5, 1, "", "variable_args"]], "pycbc.waveform.generator.FDomainDirectDetFrameGenerator": [[78, 4, 1, "", "epoch"], [78, 2, 1, "", "generate"], [78, 2, 1, "", "select_rframe_generator"], [78, 2, 1, "", "set_epoch"]], "pycbc.waveform.multiband": [[78, 3, 1, "", "multiband_fd_waveform"]], "pycbc.waveform.nltides": [[78, 3, 1, "", "nltides_fourier_phase_difference"], [78, 3, 1, "", "nonlinear_tidal_spa"]], "pycbc.waveform.parameters": [[78, 1, 1, "", "Parameter"], [78, 1, 1, "", "ParameterList"]], "pycbc.waveform.parameters.Parameter": [[78, 2, 1, "", "docstr"]], "pycbc.waveform.parameters.ParameterList": [[78, 4, 1, "", "asdict"], [78, 4, 1, "", "aslist"], [78, 2, 1, "", "default_dict"], [78, 2, 1, "", "defaults"], [78, 4, 1, "", "description_dict"], [78, 4, 1, "", "descriptions"], [78, 2, 1, "", "docstr"], [78, 4, 1, "", "dtype_dict"], [78, 4, 1, "", "dtypes"], [78, 4, 1, "", "label_dict"], [78, 4, 1, "", "labels"], [78, 4, 1, "", "names"], [78, 4, 1, "", "nodefaults"]], "pycbc.waveform.plugin": [[78, 3, 1, "", "add_custom_waveform"], [78, 3, 1, "", "add_length_estimator"], [78, 3, 1, "", "retrieve_waveform_plugins"]], "pycbc.waveform.premerger": [[78, 3, 1, "", "premerger_taylorf2"]], "pycbc.waveform.ringdown": [[78, 3, 1, "", "Kerr_factor"], [78, 3, 1, "", "fd_damped_sinusoid"], [78, 3, 1, "", "fd_output_vector"], [78, 3, 1, "", "format_lmns"], [78, 3, 1, "", "get_fd_from_final_mass_spin"], [78, 3, 1, "", "get_fd_from_freqtau"], [78, 3, 1, "", "get_td_from_final_mass_spin"], [78, 3, 1, "", "get_td_from_freqtau"], [78, 3, 1, "", "lm_amps_phases"], [78, 3, 1, "", "lm_arbitrary_harmonics"], [78, 3, 1, "", "lm_deltaf"], [78, 3, 1, "", "lm_deltat"], [78, 3, 1, "", "lm_ffinal"], [78, 3, 1, "", "lm_freqs_taus"], [78, 3, 1, "", "lm_tfinal"], [78, 3, 1, "", "multimode_base"], [78, 3, 1, "", "parse_mode"], [78, 3, 1, "", "props"], [78, 3, 1, "", "qnm_freq_decay"], [78, 3, 1, "", "qnm_time_decay"], [78, 3, 1, "", "spher_harms"], [78, 3, 1, "", "td_damped_sinusoid"], [78, 3, 1, "", "td_output_vector"]], "pycbc.waveform.sinegauss": [[78, 3, 1, "", "fd_sine_gaussian"]], "pycbc.waveform.spa_tmplt": [[78, 3, 1, "", "findchirp_chirptime"], [78, 3, 1, "", "spa_amplitude_factor"], [78, 3, 1, "", "spa_distance"], [78, 3, 1, "", "spa_length_in_time"], [78, 3, 1, "", "spa_tmplt"], [78, 3, 1, "", "spa_tmplt_end"], [78, 3, 1, "", "spa_tmplt_engine"], [78, 3, 1, "", "spa_tmplt_norm"], [78, 3, 1, "", "spa_tmplt_precondition"]], "pycbc.waveform.spa_tmplt_cpu": [[78, 3, 1, "", "cbrt_lookup"], [78, 3, 1, "", "get_cbrt"], [78, 3, 1, "", "get_log"], [78, 3, 1, "", "logv_lookup"], [78, 3, 1, "", "spa_tmplt_engine"], [78, 3, 1, "", "spa_tmplt_inline_sequence"]], "pycbc.waveform.supernovae": [[78, 3, 1, "", "get_corecollapse_bounce"]], "pycbc.waveform.utils": [[78, 3, 1, "", "amplitude_from_frequencyseries"], [78, 3, 1, "", "amplitude_from_polarizations"], [78, 3, 1, "", "apply_fd_time_shift"], [78, 3, 1, "", "apply_fseries_time_shift"], [78, 3, 1, "", "ceilpow2"], [78, 3, 1, "", "coalign_waveforms"], [78, 3, 1, "", "fd_taper"], [78, 3, 1, "", "fd_to_td"], [78, 3, 1, "", "frequency_from_polarizations"], [78, 3, 1, "", "phase_from_frequencyseries"], [78, 3, 1, "", "phase_from_polarizations"], [78, 3, 1, "", "taper_timeseries"], [78, 3, 1, "", "td_taper"], [78, 3, 1, "", "time_from_frequencyseries"]], "pycbc.waveform.utils_cpu": [[78, 3, 1, "", "apply_fseries_time_shift"], [78, 3, 1, "", "fstimeshift"], [78, 3, 1, "", "fstimeshift32"]], "pycbc.waveform.waveform": [[78, 6, 1, "", "FailedWaveformError"], [78, 6, 1, "", "NoWaveformError"], [78, 3, 1, "", "fd_approximants"], [78, 3, 1, "", "filter_approximants"], [78, 3, 1, "", "get_fd_det_waveform"], [78, 3, 1, "", "get_fd_det_waveform_sequence"], [78, 3, 1, "", "get_fd_waveform"], [78, 3, 1, "", "get_fd_waveform_from_td"], [78, 3, 1, "", "get_fd_waveform_sequence"], [78, 3, 1, "", "get_sgburst_waveform"], [78, 3, 1, "", "get_td_det_waveform_from_fd_det"], [78, 3, 1, "", "get_td_waveform"], [78, 3, 1, "", "get_td_waveform_from_fd"], [78, 3, 1, "", "get_template_amplitude_norm"], [78, 3, 1, "", "get_two_pol_waveform_filter"], [78, 3, 1, "", "get_waveform_end_frequency"], [78, 3, 1, "", "get_waveform_filter"], [78, 3, 1, "", "get_waveform_filter_length_in_time"], [78, 3, 1, "", "get_waveform_filter_norm"], [78, 3, 1, "", "print_fd_approximants"], [78, 3, 1, "", "print_sgburst_approximants"], [78, 3, 1, "", "print_td_approximants"], [78, 3, 1, "", "sgburst_approximants"], [78, 3, 1, "", "td_approximants"], [78, 3, 1, "", "td_waveform_to_fd_waveform"], [78, 3, 1, "", "waveform_norm_exists"]], "pycbc.waveform.waveform_modes": [[78, 3, 1, "", "default_modes"], [78, 3, 1, "", "fd_waveform_mode_approximants"], [78, 3, 1, "", "get_fd_waveform_modes"], [78, 3, 1, "", "get_glm"], [78, 3, 1, "", "get_imrphenomxh_modes"], [78, 3, 1, "", "get_nrhybsur_modes"], [78, 3, 1, "", "get_nrsur_modes"], [78, 3, 1, "", "get_td_waveform_modes"], [78, 3, 1, "", "sum_modes"], [78, 3, 1, "", "td_waveform_mode_approximants"]], "pycbc.workflow": [[79, 0, 0, "-", "coincidence"], [79, 0, 0, "-", "configparser_test"], [79, 0, 0, "-", "configuration"], [79, 0, 0, "-", "core"], [79, 0, 0, "-", "datafind"], [79, 0, 0, "-", "dq"], [79, 0, 0, "-", "grb_utils"], [79, 0, 0, "-", "inference_followups"], [79, 0, 0, "-", "injection"], [79, 0, 0, "-", "jobsetup"], [79, 0, 0, "-", "matched_filter"], [79, 0, 0, "-", "minifollowups"], [79, 0, 0, "-", "pegasus_sites"], [79, 0, 0, "-", "pegasus_workflow"], [79, 0, 0, "-", "plotting"], [79, 0, 0, "-", "psd"], [79, 0, 0, "-", "psdfiles"], [79, 0, 0, "-", "segment"], [79, 0, 0, "-", "splittable"], [79, 0, 0, "-", "tmpltbank"], [79, 0, 0, "-", "versioning"]], "pycbc.workflow.coincidence": [[79, 1, 1, "", "CensorForeground"], [79, 1, 1, "", "MergeExecutable"], [79, 1, 1, "", "PyCBCAddStatmap"], [79, 1, 1, "", "PyCBCBank2HDFExecutable"], [79, 1, 1, "", "PyCBCCombineStatmap"], [79, 1, 1, "", "PyCBCDistributeBackgroundBins"], [79, 1, 1, "", "PyCBCExcludeZerolag"], [79, 1, 1, "", "PyCBCFindCoincExecutable"], [79, 1, 1, "", "PyCBCFindSnglsExecutable"], [79, 1, 1, "", "PyCBCFitByTemplateExecutable"], [79, 1, 1, "", "PyCBCFitOverParamExecutable"], [79, 1, 1, "", "PyCBCHDFInjFindExecutable"], [79, 1, 1, "", "PyCBCSnglsStatMapExecutable"], [79, 1, 1, "", "PyCBCSnglsStatMapInjExecutable"], [79, 1, 1, "", "PyCBCStatMapExecutable"], [79, 1, 1, "", "PyCBCStatMapInjExecutable"], [79, 1, 1, "", "PyCBCTrig2HDFExecutable"], [79, 3, 1, "", "convert_bank_to_hdf"], [79, 3, 1, "", "convert_trig_to_hdf"], [79, 3, 1, "", "find_injections_in_hdf_coinc"], [79, 3, 1, "", "get_ordered_ifo_list"], [79, 3, 1, "", "make_foreground_censored_veto"], [79, 3, 1, "", "merge_single_detector_hdf_files"], [79, 3, 1, "", "rerank_coinc_followup"], [79, 3, 1, "", "select_files_by_ifo_combination"], [79, 3, 1, "", "setup_combine_statmap"], [79, 3, 1, "", "setup_exclude_zerolag"], [79, 3, 1, "", "setup_interval_coinc"], [79, 3, 1, "", "setup_interval_coinc_inj"], [79, 3, 1, "", "setup_sngls"], [79, 3, 1, "", "setup_sngls_inj"], [79, 3, 1, "", "setup_sngls_statmap"], [79, 3, 1, "", "setup_sngls_statmap_inj"], [79, 3, 1, "", "setup_statmap"], [79, 3, 1, "", "setup_statmap_inj"], [79, 3, 1, "", "setup_trigger_fitting"]], "pycbc.workflow.coincidence.CensorForeground": [[79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.MergeExecutable": [[79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCAddStatmap": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCBank2HDFExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCCombineStatmap": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCDistributeBackgroundBins": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCExcludeZerolag": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCFindCoincExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCFindSnglsExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"], [79, 5, 1, "", "file_input_options"]], "pycbc.workflow.coincidence.PyCBCFitByTemplateExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCFitOverParamExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCHDFInjFindExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCSnglsStatMapExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCSnglsStatMapInjExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCStatMapExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCStatMapInjExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCTrig2HDFExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.configparser_test": [[79, 3, 1, "", "add_options_to_section"], [79, 3, 1, "", "check_duplicate_options"], [79, 3, 1, "", "interpolate_string"], [79, 3, 1, "", "parse_workflow_ini_file"], [79, 3, 1, "", "perform_extended_interpolation"], [79, 3, 1, "", "read_ini_file"], [79, 3, 1, "", "sanity_check_subsections"], [79, 3, 1, "", "split_multi_sections"]], "pycbc.workflow.configuration": [[79, 1, 1, "", "WorkflowConfigParser"], [79, 3, 1, "", "add_workflow_command_line_group"], [79, 3, 1, "", "resolve_url"]], "pycbc.workflow.configuration.WorkflowConfigParser": [[79, 2, 1, "", "get_cli_option"], [79, 2, 1, "", "interpolate_exe"], [79, 2, 1, "", "perform_exe_expansion"], [79, 2, 1, "", "resolve_file_url"], [79, 2, 1, "", "resolve_urls"], [79, 2, 1, "", "section_to_cli"]], "pycbc.workflow.core": [[79, 6, 1, "", "CalledProcessErrorMod"], [79, 1, 1, "", "Executable"], [79, 1, 1, "", "File"], [79, 1, 1, "", "FileList"], [79, 1, 1, "", "Node"], [79, 1, 1, "", "SegFile"], [79, 1, 1, "", "Workflow"], [79, 3, 1, "", "add_workflow_settings_cli"], [79, 3, 1, "", "configparser_value_to_file"], [79, 3, 1, "", "get_full_analysis_chunk"], [79, 3, 1, "", "get_random_label"], [79, 3, 1, "", "make_analysis_dir"], [79, 3, 1, "", "make_external_call"], [79, 3, 1, "", "resolve_td_option"], [79, 3, 1, "", "resolve_url_to_file"]], "pycbc.workflow.core.Executable": [[79, 5, 1, "", "ALL_TRIGGERS"], [79, 5, 1, "", "DO_NOT_KEEP"], [79, 5, 1, "", "FINAL_RESULT"], [79, 5, 1, "", "INTERMEDIATE_PRODUCT"], [79, 5, 1, "", "KEEP_BUT_RAISE_WARNING"], [79, 5, 1, "", "MERGED_TRIGGERS"], [79, 2, 1, "", "add_ini_profile"], [79, 2, 1, "", "add_opt"], [79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"], [79, 5, 1, "", "file_input_options"], [79, 2, 1, "", "get_opt"], [79, 2, 1, "", "get_transformation"], [79, 2, 1, "", "has_opt"], [79, 4, 1, "", "ifo"], [79, 5, 1, "", "time_dependent_options"], [79, 2, 1, "", "update_current_retention_level"], [79, 2, 1, "", "update_current_tags"], [79, 2, 1, "", "update_output_directory"]], "pycbc.workflow.core.File": [[79, 2, 1, "", "add_metadata"], [79, 4, 1, "", "cache_entry"], [79, 2, 1, "", "from_path"], [79, 4, 1, "", "ifo"], [79, 4, 1, "", "segment"]], "pycbc.workflow.core.FileList": [[79, 2, 1, "", "categorize_by_attr"], [79, 2, 1, "", "convert_to_lal_cache"], [79, 2, 1, "", "dump"], [79, 5, 1, "", "entry_class"], [79, 2, 1, "", "find_all_output_in_range"], [79, 2, 1, "", "find_output"], [79, 2, 1, "", "find_output_at_time"], [79, 2, 1, "", "find_output_in_range"], [79, 2, 1, "", "find_output_with_ifo"], [79, 2, 1, "", "find_output_with_tag"], [79, 2, 1, "", "find_output_without_tag"], [79, 2, 1, "", "find_outputs_in_range"], [79, 2, 1, "", "get_times_covered_by_files"], [79, 2, 1, "", "load"], [79, 2, 1, "", "to_file_object"]], "pycbc.workflow.core.Node": [[79, 2, 1, "", "add_multiifo_input_list_opt"], [79, 2, 1, "", "add_multiifo_output_list_opt"], [79, 2, 1, "", "get_command_line"], [79, 2, 1, "", "new_multiifo_output_list_opt"], [79, 2, 1, "", "new_output_file_opt"], [79, 4, 1, "", "output_file"], [79, 4, 1, "", "output_files"], [79, 2, 1, "", "resolve_td_options"]], "pycbc.workflow.core.SegFile": [[79, 2, 1, "", "from_multi_segment_list"], [79, 2, 1, "", "from_segment_list"], [79, 2, 1, "", "from_segment_list_dict"], [79, 2, 1, "", "from_segment_xml"], [79, 2, 1, "", "parse_segdict_key"], [79, 2, 1, "", "remove_short_sci_segs"], [79, 2, 1, "", "return_union_seglist"], [79, 2, 1, "", "to_segment_xml"]], "pycbc.workflow.core.Workflow": [[79, 4, 1, "", "exec_sites_str"], [79, 2, 1, "", "execute_node"], [79, 2, 1, "", "get_ifo_combinations"], [79, 4, 1, "", "output_map"], [79, 2, 1, "", "save"], [79, 2, 1, "", "save_config"], [79, 4, 1, "", "sites"], [79, 4, 1, "", "staging_site"], [79, 4, 1, "", "staging_site_str"]], "pycbc.workflow.datafind": [[79, 3, 1, "", "convert_cachelist_to_filelist"], [79, 3, 1, "", "datafind_keep_unique_backups"], [79, 3, 1, "", "get_missing_segs_from_frame_file_cache"], [79, 3, 1, "", "get_science_segs_from_datafind_outs"], [79, 3, 1, "", "get_segment_summary_times"], [79, 3, 1, "", "log_datafind_command"], [79, 3, 1, "", "run_datafind_instance"], [79, 3, 1, "", "setup_datafind_from_pregenerated_lcf_files"], [79, 3, 1, "", "setup_datafind_runtime_cache_multi_calls_perifo"], [79, 3, 1, "", "setup_datafind_runtime_cache_single_call_perifo"], [79, 3, 1, "", "setup_datafind_runtime_frames_multi_calls_perifo"], [79, 3, 1, "", "setup_datafind_runtime_frames_single_call_perifo"], [79, 3, 1, "", "setup_datafind_workflow"]], "pycbc.workflow.dq": [[79, 1, 1, "", "PyCBCBinTemplatesDQExecutable"], [79, 1, 1, "", "PyCBCBinTriggerRatesDQExecutable"], [79, 3, 1, "", "setup_dq_reranking"]], "pycbc.workflow.dq.PyCBCBinTemplatesDQExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.dq.PyCBCBinTriggerRatesDQExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.grb_utils": [[79, 1, 1, "", "PycbcGrbInjCombinerExecutable"], [79, 1, 1, "", "PycbcGrbInjFinderExecutable"], [79, 1, 1, "", "PycbcGrbTrigClusterExecutable"], [79, 1, 1, "", "PycbcGrbTrigCombinerExecutable"], [79, 3, 1, "", "build_segment_filelist"], [79, 3, 1, "", "build_veto_filelist"], [79, 3, 1, "", "fermi_core_tail_model"], [79, 3, 1, "", "get_sky_grid_scale"], [79, 3, 1, "", "make_gating_node"], [79, 3, 1, "", "make_info_table"], [79, 3, 1, "", "make_pygrb_injs_tables"], [79, 3, 1, "", "make_pygrb_plot"], [79, 3, 1, "", "set_grb_start_end"], [79, 3, 1, "", "setup_pygrb_minifollowups"], [79, 3, 1, "", "setup_pygrb_pp_workflow"], [79, 3, 1, "", "setup_pygrb_results_workflow"]], "pycbc.workflow.grb_utils.PycbcGrbInjCombinerExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.grb_utils.PycbcGrbInjFinderExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.grb_utils.PycbcGrbTrigClusterExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.grb_utils.PycbcGrbTrigCombinerExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.inference_followups": [[79, 3, 1, "", "create_fits_file"], [79, 3, 1, "", "create_posterior_files"], [79, 3, 1, "", "get_diagnostic_plots"], [79, 3, 1, "", "get_plot_group"], [79, 3, 1, "", "make_diagnostic_plots"], [79, 3, 1, "", "make_inference_acceptance_rate_plot"], [79, 3, 1, "", "make_inference_dynesty_run_plot"], [79, 3, 1, "", "make_inference_dynesty_trace_plot"], [79, 3, 1, "", "make_inference_inj_recovery_plot"], [79, 3, 1, "", "make_inference_plot"], [79, 3, 1, "", "make_inference_plot_mcmc_history"], [79, 3, 1, "", "make_inference_posterior_plot"], [79, 3, 1, "", "make_inference_pp_plot"], [79, 3, 1, "", "make_inference_pp_table"], [79, 3, 1, "", "make_inference_prior_plot"], [79, 3, 1, "", "make_inference_samples_plot"], [79, 3, 1, "", "make_inference_skymap"], [79, 3, 1, "", "make_inference_summary_table"], [79, 3, 1, "", "make_posterior_workflow"]], "pycbc.workflow.injection": [[79, 1, 1, "", "PyCBCMergeHDFExecutable"], [79, 1, 1, "", "PyCBCOptimalSNRExecutable"], [79, 3, 1, "", "compute_inj_optimal_snr"], [79, 3, 1, "", "cut_distant_injections"], [79, 3, 1, "", "inj_to_hdf"], [79, 3, 1, "", "setup_injection_workflow"], [79, 3, 1, "", "veto_injections"]], "pycbc.workflow.injection.PyCBCMergeHDFExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.injection.PyCBCOptimalSNRExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.jobsetup": [[79, 1, 1, "", "JobSegmenter"], [79, 1, 1, "", "LalappsInspinjExecutable"], [79, 1, 1, "", "LigolwAddExecutable"], [79, 1, 1, "", "PyCBCInspiralExecutable"], [79, 1, 1, "", "PyCBCMultiInspiralExecutable"], [79, 1, 1, "", "PyCBCTmpltbankExecutable"], [79, 1, 1, "", "PycbcConditionStrainExecutable"], [79, 1, 1, "", "PycbcCreateInjectionsExecutable"], [79, 1, 1, "", "PycbcHDFSplitInjExecutable"], [79, 1, 1, "", "PycbcInferenceExecutable"], [79, 1, 1, "", "PycbcSplitBankExecutable"], [79, 1, 1, "", "PycbcSplitBankXmlExecutable"], [79, 1, 1, "", "PycbcSplitInspinjExecutable"], [79, 3, 1, "", "identify_needed_data"], [79, 3, 1, "", "int_gps_time_to_str"], [79, 3, 1, "", "multi_ifo_coherent_job_setup"], [79, 3, 1, "", "select_generic_executable"], [79, 3, 1, "", "select_matchedfilter_class"], [79, 3, 1, "", "select_tmpltbank_class"], [79, 3, 1, "", "sngl_ifo_job_setup"]], "pycbc.workflow.jobsetup.JobSegmenter": [[79, 2, 1, "", "get_data_times_for_job"], [79, 2, 1, "", "get_valid_times_for_job"], [79, 2, 1, "", "pick_tile_size"]], "pycbc.workflow.jobsetup.LalappsInspinjExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"], [79, 5, 1, "", "extension"]], "pycbc.workflow.jobsetup.LigolwAddExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.jobsetup.PyCBCInspiralExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"], [79, 2, 1, "", "get_valid_times"], [79, 5, 1, "", "time_dependent_options"], [79, 2, 1, "", "zero_pad_data_extend"]], "pycbc.workflow.jobsetup.PyCBCMultiInspiralExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"], [79, 5, 1, "", "file_input_options"], [79, 2, 1, "", "get_valid_times"]], "pycbc.workflow.jobsetup.PyCBCTmpltbankExecutable": [[79, 2, 1, "", "create_nodata_node"], [79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"], [79, 2, 1, "", "get_valid_times"]], "pycbc.workflow.jobsetup.PycbcConditionStrainExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.jobsetup.PycbcCreateInjectionsExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"], [79, 5, 1, "", "extension"]], "pycbc.workflow.jobsetup.PycbcHDFSplitInjExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.jobsetup.PycbcInferenceExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.jobsetup.PycbcSplitBankExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"], [79, 5, 1, "", "extension"]], "pycbc.workflow.jobsetup.PycbcSplitBankXmlExecutable": [[79, 5, 1, "", "extension"]], "pycbc.workflow.jobsetup.PycbcSplitInspinjExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.matched_filter": [[79, 3, 1, "", "setup_matchedfltr_dax_generated"], [79, 3, 1, "", "setup_matchedfltr_dax_generated_multi"], [79, 3, 1, "", "setup_matchedfltr_workflow"]], "pycbc.workflow.minifollowups": [[79, 1, 1, "", "PlotQScanExecutable"], [79, 1, 1, "", "SingleTemplateExecutable"], [79, 1, 1, "", "SingleTimeFreqExecutable"], [79, 3, 1, "", "get_single_template_params"], [79, 3, 1, "", "grouper"], [79, 3, 1, "", "make_coinc_info"], [79, 3, 1, "", "make_inj_info"], [79, 3, 1, "", "make_plot_waveform_plot"], [79, 3, 1, "", "make_qscan_plot"], [79, 3, 1, "", "make_single_template_files"], [79, 3, 1, "", "make_single_template_plots"], [79, 3, 1, "", "make_singles_timefreq"], [79, 3, 1, "", "make_skipped_html"], [79, 3, 1, "", "make_sngl_ifo"], [79, 3, 1, "", "make_trigger_timeseries"], [79, 3, 1, "", "make_upload_files"], [79, 3, 1, "", "setup_foreground_minifollowups"], [79, 3, 1, "", "setup_injection_minifollowups"], [79, 3, 1, "", "setup_single_det_minifollowups"], [79, 3, 1, "", "setup_upload_prep_minifollowups"]], "pycbc.workflow.minifollowups.PlotQScanExecutable": [[79, 5, 1, "", "time_dependent_options"]], "pycbc.workflow.minifollowups.SingleTemplateExecutable": [[79, 5, 1, "", "time_dependent_options"]], "pycbc.workflow.minifollowups.SingleTimeFreqExecutable": [[79, 5, 1, "", "time_dependent_options"]], "pycbc.workflow.pegasus_sites": [[79, 3, 1, "", "add_condorpool_copy_site"], [79, 3, 1, "", "add_condorpool_shared_site"], [79, 3, 1, "", "add_condorpool_symlink_site"], [79, 3, 1, "", "add_ini_site_profile"], [79, 3, 1, "", "add_local_site"], [79, 3, 1, "", "add_osg_site"], [79, 3, 1, "", "add_site"], [79, 3, 1, "", "add_site_pegasus_profile"], [79, 3, 1, "", "make_catalog"]], "pycbc.workflow.pegasus_workflow": [[79, 1, 1, "", "Executable"], [79, 1, 1, "", "File"], [79, 1, 1, "", "Node"], [79, 1, 1, "", "ProfileShortcuts"], [79, 1, 1, "", "SubWorkflow"], [79, 1, 1, "", "Transformation"], [79, 1, 1, "", "Workflow"]], "pycbc.workflow.pegasus_workflow.Executable": [[79, 2, 1, "", "add_profile"], [79, 2, 1, "", "create_transformation"], [79, 5, 1, "", "id"]], "pycbc.workflow.pegasus_workflow.File": [[79, 2, 1, "", "add_pfn"], [79, 4, 1, "", "dax_repr"], [79, 2, 1, "", "from_path"], [79, 2, 1, "", "has_pfn"], [79, 2, 1, "", "insert_into_dax"], [79, 2, 1, "", "output_map_str"]], "pycbc.workflow.pegasus_workflow.Node": [[79, 2, 1, "", "add_arg"], [79, 2, 1, "", "add_input"], [79, 2, 1, "", "add_input_arg"], [79, 2, 1, "", "add_input_list_opt"], [79, 2, 1, "", "add_input_opt"], [79, 2, 1, "", "add_list_opt"], [79, 2, 1, "", "add_opt"], [79, 2, 1, "", "add_output"], [79, 2, 1, "", "add_output_arg"], [79, 2, 1, "", "add_output_list_opt"], [79, 2, 1, "", "add_output_opt"], [79, 2, 1, "", "add_profile"], [79, 2, 1, "", "add_raw_arg"], [79, 2, 1, "", "new_output_file_opt"]], "pycbc.workflow.pegasus_workflow.ProfileShortcuts": [[79, 2, 1, "", "set_category"], [79, 2, 1, "", "set_execution_site"], [79, 2, 1, "", "set_memory"], [79, 2, 1, "", "set_num_cpus"], [79, 2, 1, "", "set_num_retries"], [79, 2, 1, "", "set_priority"], [79, 2, 1, "", "set_storage"], [79, 2, 1, "", "set_universe"]], "pycbc.workflow.pegasus_workflow.SubWorkflow": [[79, 2, 1, "", "add_into_workflow"], [79, 2, 1, "", "add_planner_arg"], [79, 2, 1, "", "set_subworkflow_properties"]], "pycbc.workflow.pegasus_workflow.Transformation": [[79, 2, 1, "", "is_same_as"]], "pycbc.workflow.pegasus_workflow.Workflow": [[79, 2, 1, "", "add_container"], [79, 2, 1, "", "add_explicit_dependancy"], [79, 2, 1, "", "add_node"], [79, 2, 1, "", "add_subworkflow_dependancy"], [79, 2, 1, "", "add_transformation"], [79, 2, 1, "", "add_workflow"], [79, 2, 1, "", "plan_and_submit"], [79, 2, 1, "", "save"], [79, 2, 1, "", "traverse_workflow_io"]], "pycbc.workflow.plotting": [[79, 1, 1, "", "PlotExecutable"], [79, 3, 1, "", "excludestr"], [79, 3, 1, "", "make_binned_hist"], [79, 3, 1, "", "make_coinc_snrchi_plot"], [79, 3, 1, "", "make_dq_flag_trigger_rate_plot"], [79, 3, 1, "", "make_dq_segment_table"], [79, 3, 1, "", "make_foreground_table"], [79, 3, 1, "", "make_foundmissed_plot"], [79, 3, 1, "", "make_gating_plot"], [79, 3, 1, "", "make_ifar_plot"], [79, 3, 1, "", "make_inj_table"], [79, 3, 1, "", "make_range_plot"], [79, 3, 1, "", "make_results_web_page"], [79, 3, 1, "", "make_seg_plot"], [79, 3, 1, "", "make_seg_table"], [79, 3, 1, "", "make_segments_plot"], [79, 3, 1, "", "make_sensitivity_plot"], [79, 3, 1, "", "make_single_hist"], [79, 3, 1, "", "make_singles_plot"], [79, 3, 1, "", "make_snrchi_plot"], [79, 3, 1, "", "make_snrifar_plot"], [79, 3, 1, "", "make_snrratehist_plot"], [79, 3, 1, "", "make_spectrum_plot"], [79, 3, 1, "", "make_template_bin_table"], [79, 3, 1, "", "make_template_plot"], [79, 3, 1, "", "make_throughput_plot"], [79, 3, 1, "", "make_veto_table"], [79, 3, 1, "", "requirestr"]], "pycbc.workflow.plotting.PlotExecutable": [[79, 2, 1, "", "create_node"], [79, 5, 1, "", "current_retention_level"]], "pycbc.workflow.psd": [[79, 3, 1, "", "make_average_psd"], [79, 3, 1, "", "make_psd_file"], [79, 3, 1, "", "merge_psds"], [79, 3, 1, "", "setup_psd_calculate"]], "pycbc.workflow.psdfiles": [[79, 3, 1, "", "setup_psd_pregenerated"], [79, 3, 1, "", "setup_psd_workflow"]], "pycbc.workflow.segment": [[79, 3, 1, "", "generate_triggered_segment"], [79, 3, 1, "", "get_flag_segments_file"], [79, 3, 1, "", "get_segments_file"], [79, 3, 1, "", "get_triggered_coherent_segment"], [79, 3, 1, "", "save_veto_definer"]], "pycbc.workflow.splittable": [[79, 3, 1, "", "select_splitfilejob_instance"], [79, 3, 1, "", "setup_splittable_dax_generated"], [79, 3, 1, "", "setup_splittable_workflow"]], "pycbc.workflow.tmpltbank": [[79, 3, 1, "", "setup_tmpltbank_dax_generated"], [79, 3, 1, "", "setup_tmpltbank_pregenerated"], [79, 3, 1, "", "setup_tmpltbank_without_frames"], [79, 3, 1, "", "setup_tmpltbank_workflow"]], "pycbc.workflow.versioning": [[79, 1, 1, "", "VersioningExecutable"], [79, 3, 1, "", "make_versioning_page"]], "pycbc.workflow.versioning.VersioningExecutable": [[79, 5, 1, "", "current_retention_level"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"applic": 9, "workflow": [9, 10, 22, 25, 31, 79, 82, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "calcul": [10, 28, 85], "effectu": 10, "fit": 10, "factor": 10, "templat": [10, 41, 82, 87, 100], "bank": [10, 78, 82, 87, 100], "introduct": [10, 22, 23, 26, 29, 31, 82, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100], "creat": [10, 11, 22, 33, 81, 86], "configur": [10, 22, 31, 33, 79, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "file": [10, 18, 19, 22, 25, 26, 29, 31, 33, 42, 48, 52, 80, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "gener": [10, 18, 22, 29, 43, 51, 52, 78, 82, 85, 87, 91, 92, 93, 94, 95, 96, 97, 98, 100], "understand": [10, 22], "result": [10, 22, 73, 93, 94], "valid": [10, 15, 88, 98], "product": [10, 46, 95, 97], "analysi": [10, 87, 97], "procedur": 10, "evalu": 10, "known": 10, "issu": 10, "build": [11, 12, 46, 48], "document": [11, 17, 20, 23, 26, 31, 46, 82, 87, 90, 95, 97], "github": [11, 81], "page": [11, 93, 94], "project": [11, 16], "push": 11, "bundl": 12, "execut": [12, 25, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100], "us": [12, 14, 18, 19, 23, 25, 35, 39, 41, 46, 82, 91, 92, 95, 99, 100], "script": [12, 18, 20, 86], "releas": [12, 81], "cvmf": 12, "catalog": [13, 54], "observ": 13, "gravit": [13, 16, 26, 30, 80, 95], "wave": [13, 16, 26, 30, 80, 95], "merger": 13, "which": [13, 82, 85, 90], "do": [13, 22, 97], "we": 13, "have": [13, 97], "inform": 13, "about": 13, "plot": [13, 28, 29, 45, 73, 79, 85, 89, 97], "some": [13, 82], "kei": [13, 19], "statist": [13, 89], "from": [13, 18, 29, 37, 48, 52, 95, 97, 98], "access": 13, "data": [13, 15, 25, 29, 31, 48, 80, 87, 95, 97], "around": 13, "each": 13, "event": [13, 57], "pycbc": [14, 18, 19, 20, 21, 23, 25, 30, 31, 43, 46, 48, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 86, 87, 88, 90, 91, 92, 98, 99, 100], "scientif": 14, "public": 14, "cite": 14, "softwar": [14, 29], "describ": 14, "algorithm": 14, "bayesian": 14, "infer": [14, 18, 31, 42, 43, 61, 62, 63, 64, 65, 93, 94], "search": [14, 95], "compact": 14, "binari": 14, "coalesc": 14, "queri": [15, 26, 29], "time": [15, 16, 24, 29, 38, 51, 52, 85, 95, 98], "hardwar": [15, 29], "inject": [15, 29, 33, 36, 66, 79, 80, 87, 89, 91, 93], "more": 15, "determin": 15, "an": [15, 24, 32, 52, 82], "instrument": 15, "ha": 15, "find": [15, 84, 89], "what": [15, 85], "flag": [15, 98], "can": [15, 85], "i": [15, 82, 85, 97], "detector": [16, 53, 85], "locat": [16, 18, 90], "light": 16, "travel": 16, "between": [16, 85], "sourc": [16, 48, 82], "pass": 16, "through": 16, "antenna": 16, "pattern": 16, "signal": [16, 28, 80], "frame": [16, 26, 60, 80], "ad": [16, 85, 86, 98], "custom": [16, 85, 86], "overrid": [16, 90], "exist": [16, 80, 98], "ones": 16, "develop": [17, 31, 46], "distribut": [18, 32, 56], "sampl": [18, 41, 45], "python": 18, "ini": [18, 22, 90, 97, 98], "make": [18, 45, 86], "mass": [18, 56], "m1": 18, "m2": 18, "mchirp": 18, "q": 18, "uniform": [18, 56], "mass1": 18, "mass2": 18, "sky": 18, "spin": [18, 56, 82], "exampl": [18, 22, 25, 31, 33, 34, 35, 38, 41, 44, 82, 83, 90, 93, 94, 98], "run": [19, 29, 32, 33, 84, 95, 96, 97], "under": 19, "docker": [19, 46], "jupyt": 19, "notebook": 19, "within": [19, 25, 86], "share": 19, "user": 19, "ssh": 19, "code": [20, 48, 82, 89, 90], "sphinx": 20, "packag": [20, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "modul": [20, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 87, 88, 90, 91, 92, 98, 99, 100], "extend": [21, 95], "extern": [21, 56], "plugin": [21, 78, 86], "dag": 22, "faith": 22, "comparison": 22, "how": [22, 29, 42, 44, 97], "config": [22, 76, 90, 98], "perform": 23, "fft": [23, 46, 58], "function": 23, "base": [23, 55, 64, 65, 89], "api": [23, 44], "class": [23, 42], "choos": 23, "specif": [23, 25, 45], "backend": 23, "method": [23, 26, 87], "filter": [24, 59, 87, 92], "appli": 24, "highpass": 24, "lowpass": 24, "fir": 24, "match": [24, 82, 85, 87, 92], "snr": [24, 73], "chisq": [24, 77], "seri": [24, 52, 81], "hdf": [25, 67], "singl": [25, 41, 57], "inspir": [25, 87, 92], "trigger": [25, 57, 84, 92, 97], "column": 25, "vector": 25, "addit": [25, 48], "reserv": 25, "combin": 25, "region": 25, "refer": 25, "arrai": [25, 76], "read": [26, 52, 72], "ldr": [26, 29], "server": [26, 29], "write": 26, "index": 27, "process": [28, 46], "gw150914": [28, 34, 38, 94], "whiten": 28, "strain": [28, 74, 80], "nois": [28, 34, 51, 70, 96], "listen": 28, "hanford": 28, "waveform": [29, 31, 43, 78, 85, 86], "content": [29, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 98], "command": [29, 82, 84, 90], "line": [29, 74, 82, 90], "pycbc_generate_hwinj": 29, "select": [29, 85, 97], "psd": [29, 52, 72, 73, 79], "estim": [29, 36, 37, 52, 72, 93, 94, 96], "lalapps_inspinj": [29, 91], "output": [29, 31], "pycbc_generate_hwinj_from_xml": 29, "check": [29, 48], "ascii": 29, "pycbc_plot_hwinj": 29, "recov": 29, "pycbc_inspir": [29, 92], "segment": [29, 79, 87, 98], "databas": 29, "power": 30, "astronomi": 30, "get": [30, 93, 94], "start": 30, "instal": [30, 46, 47, 48, 49], "overview": [31, 42, 44, 45, 82, 87], "model": [31, 34, 35, 38, 39, 41, 43, 64, 86], "sampler": [31, 40, 41, 42, 44, 65], "prior": [31, 97], "static": 31, "paramet": [31, 36, 37, 41, 43, 78, 93, 94], "set": [31, 49, 95, 97], "advanc": 31, "transform": [31, 53], "calibr": [31, 74], "constraint": [31, 56], "checkpoint": 31, "visual": 31, "posterior": [31, 42, 45, 62], "For": 31, "analyt": [32, 52, 64, 72], "simul": [33, 37, 80], "bbh": [33, 93], "1": 33, "2": 33, "setup": [33, 88, 91, 92, 93, 94, 98, 99, 100], "3": 33, "gaussian": [34, 51, 56, 70], "hierarch": [35, 64], "lens": 35, "lisa": [36, 37], "smbhb": [36, 37], "ldc": 37, "margin": [38, 41], "rel": [39, 43], "try": 40, "out": [40, 48], "differ": 40, "emce": [40, 62, 65], "parallel": 40, "temper": 40, "ptemce": [40, 62, 65], "dynesti": [40, 62, 65, 93, 94], "ultranest": [40, 62, 65], "epsi": [40, 62, 65], "cpnest": 40, "multinest": [40, 62, 65], "snowlin": [40, 62, 65], "nessai": [40, 62, 65], "quickstart": 41, "subset": 41, "over": 41, "all": 41, "abitrari": 41, "coordin": [41, 55], "nest": 41, "io": [42, 62, 67], "guidelin": [42, 44], "inherit": [42, 44], "diagram": [42, 44], "add": [42, 44, 47], "detail": [43, 44, 95, 97], "common": 43, "standard": [43, 97], "full": [43, 46, 97], "heterodyn": 43, "extrins": 43, "onli": 43, "composit": 43, "pycbc_inference_plot_posterior": 45, "iter": 45, "thin": 45, "chain": 45, "movi": 45, "pycbc_inference_plot_movi": 45, "simpl": 46, "virtualenv": [46, 49], "ldg": 46, "igwn": 46, "cluster": [46, 89], "other": [46, 88, 90], "scenario": 46, "intel": 46, "mkl": [46, 58], "optim": 46, "librari": [46, 83], "graphic": 46, "unit": 46, "support": [46, 47, 91, 92, 99, 100], "cuda": [46, 47], "relat": 46, "help": 46, "instruct": [47, 91, 92, 99, 100], "option": [47, 82, 89, 90], "depend": 47, "lalsuit": 48, "obtain": [48, 87, 98], "version": [48, 53, 73, 79, 98], "your": 48, "virtual": 48, "environ": [48, 90], "extra": 48, "up": [49, 95, 97], "pip": 49, "domain": [51, 85], "handl": 52, "save": 52, "lalsimul": 52, "subpackag": [53, 61], "submodul": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "bin_util": 53, "boundari": 53, "convers": 53, "cosmologi": 53, "dq": [53, 73, 79], "libutil": 53, "mchirp_area": 53, "opt": 53, "pnutil": 53, "pool": 53, "rate": 53, "scheme": 53, "sensit": [53, 89], "space": 55, "angular": [56, 63], "arbitrari": 56, "bound": 56, "fixedsampl": 56, "joint": 56, "power_law": 56, "qnm": 56, "sky_loc": 56, "uniform_log": 56, "util": [56, 78], "coher": 57, "coinc": 57, "coinc_rat": 57, "cut": 57, "eventmgr": 57, "eventmgr_cython": 57, "rank": 57, "signific": 57, "simd_threshold_cython": 57, "stat": 57, "threshold_cpu": 57, "trigger_fit": 57, "veto": [57, 77, 95, 98], "backend_cpu": 58, "backend_mkl": 58, "backend_support": 58, "class_api": 58, "core": [58, 79], "fft_callback": 58, "fftw": 58, "fftw_prune": 58, "fftw_pruned_cython": 58, "func_api": 58, "npfft": 58, "parser_support": 58, "autocorrel": 59, "matchedfilt": [59, 92], "matchedfilter_cpu": 59, "matchedfilter_numpi": 59, "qtransform": 59, "resampl": 59, "simd_correl": 59, "simd_correlate_cython": 59, "zpk": 59, "gwosc": 60, "store": 60, "burn_in": 61, "entropi": 61, "evid": 61, "gelman_rubin": 61, "gewek": 61, "option_util": [61, 75], "base_hdf": 62, "base_mcmc": [62, 65], "base_multitemp": [62, 65], "base_nested_sampl": 62, "base_sampl": 62, "emcee_pt": [62, 65, 94], "txt": 62, "jump": 63, "bounded_norm": 63, "discret": 63, "normal": 63, "base_data": 64, "brute_marg": 64, "data_util": 64, "gated_gaussian_nois": 64, "gaussian_nois": 64, "marginalized_gaussian_nois": 64, "relbin": 64, "relbin_cpu": 64, "single_templ": 64, "tool": 64, "base_cub": 65, "dummi": 65, "refin": 65, "injfilterrejector": 66, "ligolw": 67, "live": [67, 68], "record": 67, "snr_optim": 68, "neutron_star": 69, "eos_util": 69, "pg_isso_solv": 69, "reproduc": 70, "popul": 71, "fgmc_function": 71, "fgmc_laguerr": 71, "fgmc_plot": 71, "live_pastro": 71, "live_pastro_util": 71, "population_model": 71, "rates_funct": 71, "scale_inject": 71, "analytical_spac": 72, "variat": 72, "color": 73, "followup": 73, "layout": 73, "metadata": 73, "mpld3_util": 73, "pygrb_plotting_util": 73, "pygrb_postprocessing_util": 73, "render": 73, "scatter_histogram": 73, "str_util": 73, "table_util": 73, "gate": 74, "recalibr": 74, "tmpltbank": [75, 79, 82, 100], "bank_convers": 75, "bank_output_util": 75, "brute_force_method": 75, "calc_moment": 75, "coord_util": 75, "lambda_map": 75, "lattice_util": 75, "partitioned_bank": 75, "type": 76, "align": [76, 82], "array_cpu": 76, "frequencyseri": 76, "optpars": 76, "timeseri": 76, "autochisq": 77, "bank_chisq": 77, "chisq_cpu": 77, "sgchisq": 77, "compress": 78, "decompress_cpu": 78, "decompress_cpu_cython": 78, "multiband": 78, "nltide": 78, "premerg": 78, "pycbc_phenomc_tmplt": 78, "ringdown": 78, "sinegauss": 78, "spa_tmplt": 78, "spa_tmplt_cpu": 78, "supernova": 78, "utils_cpu": 78, "waveform_mod": 78, "coincid": [79, 87, 89], "configparser_test": 79, "datafind": [79, 88], "grb_util": 79, "inference_followup": 79, "jobsetup": 79, "matched_filt": [79, 92], "minifollowup": 79, "pegasus_sit": 79, "pegasus_workflow": 79, "psdfile": 79, "splittabl": [79, 99], "pycbc_condition_strain": 80, "oper": 80, "split": [80, 87, 99], "shorter": 80, "condit": 80, "caveat": 80, "backport": 81, "bug": 81, "fix": 81, "previou": [81, 95, 97], "non": 82, "placement": 82, "pycbc_geom_nonspinbank": [82, 100], "background": [82, 89], "geometr": 82, "pycbc_geom_aligned_bank": 82, "stochast": 82, "ian": 82, "": [82, 90], "recommend": 82, "should": 82, "want": [82, 97], "f2": 82, "metric": 82, "anoth": 82, "ie": 82, "imr": 82, "direct": 82, "pycbc_aligned_stoch_bank": 82, "lalapps_cbc_sbank": 82, "sbank": 82, "hybrid": 82, "approach": 82, "best": 82, "both": 82, "world": 82, "The": [82, 88, 91, 92, 98, 99, 100], "interact": 83, "tutori": 83, "upload": 84, "gracedb": 84, "requir": [84, 90], "input": 84, "one": 85, "multipl": 85, "mode": 85, "includ": 85, "td": 85, "fd": 85, "togeth": 85, "gw": 85, "phase": 85, "amplitud": 85, "frequenc": 85, "evolut": 85, "new": [86, 95], "approxim": 86, "avail": 86, "basic": 87, "tabl": [87, 99], "usag": [88, 91, 92, 98, 99, 100], "section": [88, 90, 91, 92, 97, 99, 100], "hdf5": 89, "limit": 89, "asign": 89, "interfac": 90, "suppli": 90, "global": 90, "xxx": 90, "subsect": 90, "macro": 90, "complet": 90, "special": 90, "sharedopt": 90, "them": [91, 92, 99, 100], "lalapps_inspiral_ahop": 92, "pycbc_make_inference_inj_workflow": 93, "A": [93, 94, 95, 96, 97], "plan": [93, 94, 95, 97], "pycbc_make_inference_workflow": 94, "gw170814": 94, "pycbc_make_offline_search_workflow": 95, "submit": [95, 97], "monitor": [95, 97], "debug": [95, 97], "pegasu": [95, 97], "dashboard": [95, 97], "analyz": 95, "reus": [95, 97], "gp": 95, "end": 95, "re": 95, "defin": [95, 98], "fail": 95, "partial": 95, "open": 95, "scienc": 95, "grid": 95, "prerequisit": 95, "pycbc_make_psd_estimation_workflow": 96, "pycbc_make_offline_grb_workflow": 97, "grb": 97, "cbc": 97, "profil": 97, "directori": 97, "ar": 97, "you": 97, "ye": 97, "No": 97, "my": 97, "own": 97, "descript": 98, "syntax": 98, "number": 98, "ifo": 98, "provid": 98, "pad": 98, "pre": 98, "xml": 98, "pycbc_splitbank": 99, "ex": 100, "lalapps_tmpltbank_ahop": 100}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"Applications and Workflows": [[9, "applications-and-workflows"]], "Calculating the Effectualness (Fitting Factor) of Template Banks": [[10, "calculating-the-effectualness-fitting-factor-of-template-banks"]], "Introduction": [[10, "introduction"], [22, "introduction"], [23, "introduction"], [26, "introduction"], [29, "introduction"], [31, "introduction"], [82, "introduction"], [82, "id5"], [84, "introduction"], [87, "introduction"], [88, "introduction"], [89, "introduction"], [90, "introduction"], [91, "introduction"], [92, "introduction"], [93, "introduction"], [94, "introduction"], [95, "introduction"], [97, "introduction"], [98, "introduction"], [99, "introduction"], [100, "introduction"]], "Creating a configuration file": [[10, "creating-a-configuration-file"]], "Generating the workflow": [[10, "generating-the-workflow"], [22, "generating-the-workflow"], [95, "generating-the-workflow"]], "Understanding the results": [[10, "understanding-the-results"], [22, "understanding-the-results"]], "Validating template banks for production analysis": [[10, "validating-template-banks-for-production-analysis"]], "Procedure": [[10, "procedure"]], "Evaluation": [[10, "evaluation"]], "Known issues": [[10, "known-issues"]], "Building Documentation for GitHub Pages": [[11, "building-documentation-for-github-pages"]], "Creating a GitHub project page": [[11, "creating-a-github-project-page"]], "Building and pushing the documentation": [[11, "building-and-pushing-the-documentation"]], "Building Bundled Executables": [[12, "building-bundled-executables"]], "Using the build script": [[12, "using-the-build-script"]], "Building Releases for CVMFS": [[12, "building-releases-for-cvmfs"]], "Catalog of Observed Gravitational-wave Mergers": [[13, "catalog-of-observed-gravitational-wave-mergers"]], "Which mergers do we have information about?": [[13, "which-mergers-do-we-have-information-about"]], "Plotting some key statistics from the catalog": [[13, "plotting-some-key-statistics-from-the-catalog"]], "Accessing data around each event": [[13, "accessing-data-around-each-event"]], "Use of PyCBC in Scientific Publications": [[14, "use-of-pycbc-in-scientific-publications"]], "Citing the PyCBC Software": [[14, "citing-the-pycbc-software"]], "Citing the scientific publications that describe the algorithms": [[14, "citing-the-scientific-publications-that-describe-the-algorithms"]], "Bayesian Inference": [[14, "bayesian-inference"]], "Searches for Compact Binary Coalescence": [[14, "searches-for-compact-binary-coalescence"]], "Query times of valid data, hardware injections, and more.": [[15, "query-times-of-valid-data-hardware-injections-and-more"]], "Determine the times an instrument has valid data": [[15, "determine-the-times-an-instrument-has-valid-data"]], "Finding times of hardware injections": [[15, "finding-times-of-hardware-injections"]], "What flags can I query?": [[15, "what-flags-can-i-query"]], "Gravitational-wave Detectors": [[16, "gravitational-wave-detectors"]], "Detector Locations": [[16, "detector-locations"]], "Light travel time between detectors": [[16, "light-travel-time-between-detectors"]], "Time source gravitational-wave passes through detector": [[16, "time-source-gravitational-wave-passes-through-detector"]], "Antenna Patterns and Projecting a Signal into the Detector Frame": [[16, "antenna-patterns-and-projecting-a-signal-into-the-detector-frame"]], "Adding a custom detector / overriding existing ones": [[16, "adding-a-custom-detector-overriding-existing-ones"]], "Documentation for Developers": [[17, "documentation-for-developers"]], "Using PyCBC Distributions from PyCBC Inference": [[18, "using-pycbc-distributions-from-pycbc-inference"]], "Generating samples in a Python script by using the .ini file": [[18, "generating-samples-in-a-python-script-by-using-the-ini-file"]], "Making Mass Distributions in M1 and M2": [[18, "making-mass-distributions-in-m1-and-m2"]], "Generating mchirp and q from uniform mass1 and mass2": [[18, "generating-mchirp-and-q-from-uniform-mass1-and-mass2"]], "Sky Location Distribution as Spin Distribution Example": [[18, "sky-location-distribution-as-spin-distribution-example"]], "Running PyCBC under Docker": [[19, "running-pycbc-under-docker"]], "Using jupyter notebook within docker": [[19, "using-jupyter-notebook-within-docker"]], "Sharing user files and SSH keys": [[19, "sharing-user-files-and-ssh-keys"]], "Documenting PyCBC code": [[20, "documenting-pycbc-code"]], "Sphinx": [[20, "sphinx"]], "Documenting the PyCBC package": [[20, "documenting-the-pycbc-package"]], "Documenting PyCBC modules": [[20, "documenting-pycbc-modules"]], "Documenting PyCBC scripts": [[20, "documenting-pycbc-scripts"]], "Extending PyCBC with external plugins": [[21, "extending-pycbc-with-external-plugins"]], "Dag Generator for Doing Faithfulness Comparisons": [[22, "dag-generator-for-doing-faithfulness-comparisons"]], "How to generate a workflow": [[22, "how-to-generate-a-workflow"]], "Creating a configuration (.ini) file": [[22, "creating-a-configuration-ini-file"]], "Example config files": [[22, "example-config-files"]], "Performing FFTs in PyCBC": [[23, "performing-ffts-in-pycbc"]], "Using the function based API": [[23, "using-the-function-based-api"]], "Using the class-based API": [[23, "using-the-class-based-api"]], "Choosing a specific backend": [[23, "choosing-a-specific-backend"]], "Method documentation": [[23, "method-documentation"], [26, "method-documentation"], [87, "method-documentation"]], "Filtering": [[24, "filtering"]], "Applying highpass / lowpass filters": [[24, "applying-highpass-lowpass-filters"]], "Applying an FIR filter": [[24, "applying-an-fir-filter"]], "Matched Filter SNR": [[24, "matched-filter-snr"]], "Chisq time series": [[24, "chisq-time-series"]], "HDF files within the PyCBC workflow": [[25, "hdf-files-within-the-pycbc-workflow"]], "single inspiral triggers": [[25, "single-inspiral-triggers"]], "Executables": [[25, "executables"], [25, "id1"]], "Specification": [[25, "specification"], [25, "id2"]], "Column vectors of trigger data": [[25, "id3"], [25, "id6"]], "Additional Data": [[25, "id4"], [25, "id8"]], "reserved columns": [[25, "id5"]], "combined single inspiral triggers": [[25, "combined-single-inspiral-triggers"]], "region reference arrays": [[25, "id7"]], "Example uses": [[25, "example-uses"]], "Reading Gravitational-wave Frames": [[26, "reading-gravitational-wave-frames"]], "Querying a LDR server": [[26, "querying-a-ldr-server"]], "Reading a frame file": [[26, "reading-a-frame-file"]], "Writing a frame file": [[26, "writing-a-frame-file"]], "Index": [[27, "index"]], "Signal Processing with GW150914": [[28, "signal-processing-with-gw150914"]], "Plotting the whitened strain": [[28, "plotting-the-whitened-strain"]], "Calculate the signal-to-noise": [[28, "calculate-the-signal-to-noise"]], "Listen to GW150914 in Hanford": [[28, "listen-to-gw150914-in-hanford"]], "Hardware injection waveform generation": [[29, "hardware-injection-waveform-generation"]], "Contents": [[29, "contents"]], "Generate waveform from command line (pycbc_generate_hwinj)": [[29, "generate-waveform-from-command-line-pycbc-generate-hwinj"]], "Select a time for the injection": [[29, "select-a-time-for-the-injection"]], "Select data for PSD estimation": [[29, "select-data-for-psd-estimation"]], "Run pycbc_generate_hwinj": [[29, "run-pycbc-generate-hwinj"]], "Generate waveform from lalapps_inspinj output (pycbc_generate_hwinj_from_xml)": [[29, "generate-waveform-from-lalapps-inspinj-output-pycbc-generate-hwinj-from-xml"]], "Run lalapps_inspinj": [[29, "run-lalapps-inspinj"]], "Run pycbc_generate_hwinj_from_xml": [[29, "run-pycbc-generate-hwinj-from-xml"]], "Checks for the hardware injection output": [[29, "checks-for-the-hardware-injection-output"]], "Plot ASCII waveform files with pycbc_plot_hwinj": [[29, "plot-ascii-waveform-files-with-pycbc-plot-hwinj"]], "Recover software injection with pycbc_inspiral": [[29, "recover-software-injection-with-pycbc-inspiral"]], "Recover ASCII file injection with pycbc_inspiral": [[29, "recover-ascii-file-injection-with-pycbc-inspiral"]], "How to query the segment database": [[29, "how-to-query-the-segment-database"]], "How to query the LDR server": [[29, "how-to-query-the-ldr-server"]], "PyCBC: Powering Gravitational-wave Astronomy": [[30, "pycbc-powering-gravitational-wave-astronomy"]], "Getting Started": [[30, "getting-started"]], "Installation": [[30, "installation"]], "PyCBC inference documentation (pycbc.inference)": [[31, "pycbc-inference-documentation-pycbc-inference"]], "Overview": [[31, "overview"], [45, "overview"], [82, "overview"], [82, "id1"]], "Configuring the model, sampler, priors, and data": [[31, "configuring-the-model-sampler-priors-and-data"]], "Configuring the model": [[31, "configuring-the-model"]], "Configuring the sampler": [[31, "configuring-the-sampler"]], "Configuring the prior": [[31, "configuring-the-prior"]], "Static parameters": [[31, "static-parameters"]], "Setting data": [[31, "setting-data"]], "Advanced configuration settings": [[31, "advanced-configuration-settings"]], "Waveform transforms": [[31, "waveform-transforms"]], "Calibration parameters": [[31, "calibration-parameters"]], "Constraints": [[31, "constraints"]], "Checkpointing and output files": [[31, "checkpointing-and-output-files"]], "Examples": [[31, "examples"]], "Visualizing the Posteriors": [[31, "visualizing-the-posteriors"]], "Workflows": [[31, "workflows"]], "For Developers": [[31, "for-developers"]], "Running on an analytic distribution": [[32, "running-on-an-analytic-distribution"]], "Simulated BBH example": [[33, "simulated-bbh-example"]], "1. Create the injection": [[33, "create-the-injection"]], "2. Setup the configuration files": [[33, "setup-the-configuration-files"]], "3. Run": [[33, "run"]], "GW150914 example with gaussian noise model": [[34, "gw150914-example-with-gaussian-noise-model"]], "Using the hierarchical model": [[35, "using-the-hierarchical-model"]], "Lensing example": [[35, "lensing-example"]], "LISA SMBHB injection and parameter estimation": [[36, "lisa-smbhb-injection-and-parameter-estimation"]], "LISA parameter estimation for simulated SMBHB from LDC": [[37, "lisa-parameter-estimation-for-simulated-smbhb-from-ldc"]], "Marginalized time model": [[38, "marginalized-time-model"]], "Example with GW150914": [[38, "example-with-gw150914"]], "Using the relative model": [[39, "using-the-relative-model"]], "Trying out different samplers": [[40, "trying-out-different-samplers"]], "Emcee": [[40, "id1"]], "Parallel-tempered Emcee": [[40, "id2"]], "PTEmcee": [[40, "id3"]], "Dynesty": [[40, "id4"]], "Ultranest": [[40, "id5"]], "Epsie": [[40, "id6"]], "cpnest": [[40, "id7"]], "Multinest": [[40, "id8"]], "Snowline": [[40, "id9"]], "nessai": [[40, "id10"]], "Using the single template model": [[41, "using-the-single-template-model"]], "Quickstart example": [[41, "quickstart-example"]], "Marginalization subset of parameters": [[41, "marginalization-subset-of-parameters"]], "Marginalization over all parameters": [[41, "marginalization-over-all-parameters"]], "Abitrary sampling coordinates with nested samplers": [[41, "abitrary-sampling-coordinates-with-nested-samplers"]], "Inference IO": [[42, "inference-io"]], "Overview & Guidelines": [[42, "overview-guidelines"], [44, "overview-guidelines"]], "Posterior Files": [[42, "posterior-files"]], "Inheritance diagrams": [[42, "inheritance-diagrams"], [44, "inheritance-diagrams"]], "How to add a sampler IO class": [[42, "how-to-add-a-sampler-io-class"]], "Details of common Models in PyCBC Inference": [[43, "details-of-common-models-in-pycbc-inference"]], "Standard models with full waveform generation": [[43, "standard-models-with-full-waveform-generation"]], "Heterodyne / Relative Models": [[43, "heterodyne-relative-models"]], "Extrinsic Parameter Only Models": [[43, "extrinsic-parameter-only-models"]], "Composite Models": [[43, "composite-models"]], "Sampler API": [[44, "sampler-api"]], "Detailed example": [[44, "detailed-example"]], "How to add a sampler": [[44, "how-to-add-a-sampler"]], "Plotting the posteriors (pycbc_inference_plot_posterior)": [[45, "plotting-the-posteriors-pycbc-inference-plot-posterior"]], "Plotting a specific iteration": [[45, "plotting-a-specific-iteration"]], "Plotting a thinned chain of samples": [[45, "plotting-a-thinned-chain-of-samples"]], "Making a movie (pycbc_inference_plot_movie)": [[45, "making-a-movie-pycbc-inference-plot-movie"]], "Installing PyCBC": [[46, "installing-pycbc"]], "Simple Installation": [[46, "simple-installation"]], "Full Virtualenv for Development and Production": [[46, "full-virtualenv-for-development-and-production"]], "Development build on LDG / IGWN clusters": [[46, "development-build-on-ldg-igwn-clusters"]], "Other scenarios": [[46, "other-scenarios"]], "Docker": [[46, "docker"]], "Building the Documentation": [[46, "building-the-documentation"]], "Use of Intel MKL Optimized FFT libraries": [[46, "use-of-intel-mkl-optimized-fft-libraries"]], "Graphics Processing Unit support with CUDA": [[46, "graphics-processing-unit-support-with-cuda"]], "Related Help": [[46, "related-help"]], "Instructions to add CUDA support (optional)": [[47, "instructions-to-add-cuda-support-optional"]], "Installing the CUDA dependencies": [[47, "installing-the-cuda-dependencies"]], "Installing lalsuite for PyCBC": [[48, "installing-lalsuite-for-pycbc"]], "Obtaining the source code and checking out a version": [[48, "obtaining-the-source-code-and-checking-out-a-version"]], "Building and installing into your virtual environment": [[48, "building-and-installing-into-your-virtual-environment"]], "Additional data files from lalsuite-extra": [[48, "additional-data-files-from-lalsuite-extra"]], "Setting up virtualenv": [[49, "setting-up-virtualenv"]], "Install pip": [[49, "install-pip"]], "Install virtualenv": [[49, "install-virtualenv"]], "pycbc": [[50, "pycbc"]], "Generating Noise": [[51, "generating-noise"]], "Generating time domain Gaussian noise": [[51, "generating-time-domain-gaussian-noise"]], "Handling PSDs": [[52, "handling-psds"]], "Reading / Saving a PSD from a file": [[52, "reading-saving-a-psd-from-a-file"]], "Generating an Analytic PSD from lalsimulation": [[52, "generating-an-analytic-psd-from-lalsimulation"]], "Estimating the PSD of a time series": [[52, "estimating-the-psd-of-a-time-series"]], "pycbc package": [[53, "pycbc-package"]], "Subpackages": [[53, "subpackages"], [61, "subpackages"]], "Submodules": [[53, "submodules"], [54, "submodules"], [55, "submodules"], [56, "submodules"], [57, "submodules"], [58, "submodules"], [59, "submodules"], [60, "submodules"], [61, "submodules"], [62, "submodules"], [63, "submodules"], [64, "submodules"], [65, "submodules"], [66, "submodules"], [67, "submodules"], [68, "submodules"], [69, "submodules"], [70, "submodules"], [71, "submodules"], [72, "submodules"], [73, "submodules"], [74, "submodules"], [75, "submodules"], [76, "submodules"], [77, "submodules"], [78, "submodules"], [79, "submodules"]], "pycbc.bin_utils module": [[53, "module-pycbc.bin_utils"]], "pycbc.boundaries module": [[53, "module-pycbc.boundaries"]], "pycbc.conversions module": [[53, "module-pycbc.conversions"]], "pycbc.cosmology module": [[53, "module-pycbc.cosmology"]], "pycbc.detector module": [[53, "module-pycbc.detector"]], "pycbc.dq module": [[53, "module-pycbc.dq"]], "pycbc.libutils module": [[53, "module-pycbc.libutils"]], "pycbc.mchirp_area module": [[53, "module-pycbc.mchirp_area"]], "pycbc.opt module": [[53, "module-pycbc.opt"]], "pycbc.pnutils module": [[53, "module-pycbc.pnutils"]], "pycbc.pool module": [[53, "module-pycbc.pool"]], "pycbc.rate module": [[53, "module-pycbc.rate"]], "pycbc.scheme module": [[53, "module-pycbc.scheme"]], "pycbc.sensitivity module": [[53, "module-pycbc.sensitivity"]], "pycbc.transforms module": [[53, "module-pycbc.transforms"]], "pycbc.version module": [[53, "module-pycbc.version"]], "Module contents": [[53, "module-pycbc"], [54, "module-pycbc.catalog"], [55, "module-pycbc.coordinates"], [56, "module-pycbc.distributions"], [57, "module-pycbc.events"], [58, "module-pycbc.fft"], [59, "module-pycbc.filter"], [60, "module-pycbc.frame"], [61, "module-pycbc.inference"], [62, "module-pycbc.inference.io"], [63, "module-pycbc.inference.jump"], [64, "module-pycbc.inference.models"], [65, "module-pycbc.inference.sampler"], [66, "module-pycbc.inject"], [67, "module-pycbc.io"], [68, "module-pycbc.live"], [69, "module-pycbc.neutron_stars"], [70, "module-pycbc.noise"], [71, "module-pycbc.population"], [72, "module-pycbc.psd"], [73, "module-pycbc.results"], [74, "module-pycbc.strain"], [75, "module-pycbc.tmpltbank"], [76, "module-pycbc.types"], [77, "module-pycbc.vetoes"], [78, "module-pycbc.waveform"], [79, "module-pycbc.workflow"]], "pycbc.catalog package": [[54, "pycbc-catalog-package"]], "pycbc.catalog.catalog module": [[54, "module-pycbc.catalog.catalog"]], "pycbc.coordinates package": [[55, "pycbc-coordinates-package"]], "pycbc.coordinates.base module": [[55, "module-pycbc.coordinates.base"]], "pycbc.coordinates.space module": [[55, "module-pycbc.coordinates.space"]], "pycbc.distributions package": [[56, "pycbc-distributions-package"]], "pycbc.distributions.angular module": [[56, "module-pycbc.distributions.angular"]], "pycbc.distributions.arbitrary module": [[56, "module-pycbc.distributions.arbitrary"]], "pycbc.distributions.bounded module": [[56, "module-pycbc.distributions.bounded"]], "pycbc.distributions.constraints module": [[56, "module-pycbc.distributions.constraints"]], "pycbc.distributions.external module": [[56, "module-pycbc.distributions.external"]], "pycbc.distributions.fixedsamples module": [[56, "module-pycbc.distributions.fixedsamples"]], "pycbc.distributions.gaussian module": [[56, "module-pycbc.distributions.gaussian"]], "pycbc.distributions.joint module": [[56, "module-pycbc.distributions.joint"]], "pycbc.distributions.mass module": [[56, "module-pycbc.distributions.mass"]], "pycbc.distributions.power_law module": [[56, "module-pycbc.distributions.power_law"]], "pycbc.distributions.qnm module": [[56, "module-pycbc.distributions.qnm"]], "pycbc.distributions.sky_location module": [[56, "module-pycbc.distributions.sky_location"]], "pycbc.distributions.spins module": [[56, "module-pycbc.distributions.spins"]], "pycbc.distributions.uniform module": [[56, "module-pycbc.distributions.uniform"]], "pycbc.distributions.uniform_log module": [[56, "module-pycbc.distributions.uniform_log"]], "pycbc.distributions.utils module": [[56, "module-pycbc.distributions.utils"]], "pycbc.events package": [[57, "pycbc-events-package"]], "pycbc.events.coherent module": [[57, "module-pycbc.events.coherent"]], "pycbc.events.coinc module": [[57, "module-pycbc.events.coinc"]], "pycbc.events.coinc_rate module": [[57, "module-pycbc.events.coinc_rate"]], "pycbc.events.cuts module": [[57, "module-pycbc.events.cuts"]], "pycbc.events.eventmgr module": [[57, "module-pycbc.events.eventmgr"]], "pycbc.events.eventmgr_cython module": [[57, "module-pycbc.events.eventmgr_cython"]], "pycbc.events.ranking module": [[57, "module-pycbc.events.ranking"]], "pycbc.events.significance module": [[57, "module-pycbc.events.significance"]], "pycbc.events.simd_threshold_cython module": [[57, "module-pycbc.events.simd_threshold_cython"]], "pycbc.events.single module": [[57, "module-pycbc.events.single"]], "pycbc.events.stat module": [[57, "module-pycbc.events.stat"]], "pycbc.events.threshold_cpu module": [[57, "module-pycbc.events.threshold_cpu"]], "pycbc.events.trigger_fits module": [[57, "module-pycbc.events.trigger_fits"]], "pycbc.events.triggers module": [[57, "module-pycbc.events.triggers"]], "pycbc.events.veto module": [[57, "module-pycbc.events.veto"]], "pycbc.fft package": [[58, "pycbc-fft-package"]], "pycbc.fft.backend_cpu module": [[58, "module-pycbc.fft.backend_cpu"]], "pycbc.fft.backend_mkl module": [[58, "module-pycbc.fft.backend_mkl"]], "pycbc.fft.backend_support module": [[58, "module-pycbc.fft.backend_support"]], "pycbc.fft.class_api module": [[58, "module-pycbc.fft.class_api"]], "pycbc.fft.core module": [[58, "module-pycbc.fft.core"]], "pycbc.fft.fft_callback module": [[58, "module-pycbc.fft.fft_callback"]], "pycbc.fft.fftw module": [[58, "module-pycbc.fft.fftw"]], "pycbc.fft.fftw_pruned module": [[58, "module-pycbc.fft.fftw_pruned"]], "pycbc.fft.fftw_pruned_cython module": [[58, "module-pycbc.fft.fftw_pruned_cython"]], "pycbc.fft.func_api module": [[58, "module-pycbc.fft.func_api"]], "pycbc.fft.mkl module": [[58, "module-pycbc.fft.mkl"]], "pycbc.fft.npfft module": [[58, "module-pycbc.fft.npfft"]], "pycbc.fft.parser_support module": [[58, "module-pycbc.fft.parser_support"]], "pycbc.filter package": [[59, "pycbc-filter-package"]], "pycbc.filter.autocorrelation module": [[59, "module-pycbc.filter.autocorrelation"]], "pycbc.filter.matchedfilter module": [[59, "module-pycbc.filter.matchedfilter"]], "pycbc.filter.matchedfilter_cpu module": [[59, "module-pycbc.filter.matchedfilter_cpu"]], "pycbc.filter.matchedfilter_numpy module": [[59, "module-pycbc.filter.matchedfilter_numpy"]], "pycbc.filter.qtransform module": [[59, "module-pycbc.filter.qtransform"]], "pycbc.filter.resample module": [[59, "module-pycbc.filter.resample"]], "pycbc.filter.simd_correlate module": [[59, "module-pycbc.filter.simd_correlate"]], "pycbc.filter.simd_correlate_cython module": [[59, "module-pycbc.filter.simd_correlate_cython"]], "pycbc.filter.zpk module": [[59, "module-pycbc.filter.zpk"]], "pycbc.frame package": [[60, "pycbc-frame-package"]], "pycbc.frame.frame module": [[60, "module-pycbc.frame.frame"]], "pycbc.frame.gwosc module": [[60, "module-pycbc.frame.gwosc"]], "pycbc.frame.store module": [[60, "module-pycbc.frame.store"]], "pycbc.inference package": [[61, "pycbc-inference-package"]], "pycbc.inference.burn_in module": [[61, "module-pycbc.inference.burn_in"]], "pycbc.inference.entropy module": [[61, "module-pycbc.inference.entropy"]], "pycbc.inference.evidence module": [[61, "module-pycbc.inference.evidence"]], "pycbc.inference.gelman_rubin module": [[61, "module-pycbc.inference.gelman_rubin"]], "pycbc.inference.geweke module": [[61, "module-pycbc.inference.geweke"]], "pycbc.inference.option_utils module": [[61, "module-pycbc.inference.option_utils"]], "pycbc.inference.io package": [[62, "pycbc-inference-io-package"]], "pycbc.inference.io.base_hdf module": [[62, "module-pycbc.inference.io.base_hdf"]], "pycbc.inference.io.base_mcmc module": [[62, "module-pycbc.inference.io.base_mcmc"]], "pycbc.inference.io.base_multitemper module": [[62, "module-pycbc.inference.io.base_multitemper"]], "pycbc.inference.io.base_nested_sampler module": [[62, "module-pycbc.inference.io.base_nested_sampler"]], "pycbc.inference.io.base_sampler module": [[62, "module-pycbc.inference.io.base_sampler"]], "pycbc.inference.io.dynesty module": [[62, "module-pycbc.inference.io.dynesty"]], "pycbc.inference.io.emcee module": [[62, "module-pycbc.inference.io.emcee"]], "pycbc.inference.io.emcee_pt module": [[62, "module-pycbc.inference.io.emcee_pt"]], "pycbc.inference.io.epsie module": [[62, "module-pycbc.inference.io.epsie"]], "pycbc.inference.io.multinest module": [[62, "module-pycbc.inference.io.multinest"]], "pycbc.inference.io.nessai module": [[62, "module-pycbc.inference.io.nessai"]], "pycbc.inference.io.posterior module": [[62, "module-pycbc.inference.io.posterior"]], "pycbc.inference.io.ptemcee module": [[62, "module-pycbc.inference.io.ptemcee"]], "pycbc.inference.io.snowline module": [[62, "module-pycbc.inference.io.snowline"]], "pycbc.inference.io.txt module": [[62, "module-pycbc.inference.io.txt"]], "pycbc.inference.io.ultranest module": [[62, "module-pycbc.inference.io.ultranest"]], "pycbc.inference.jump package": [[63, "pycbc-inference-jump-package"]], "pycbc.inference.jump.angular module": [[63, "module-pycbc.inference.jump.angular"]], "pycbc.inference.jump.bounded_normal module": [[63, "module-pycbc.inference.jump.bounded_normal"]], "pycbc.inference.jump.discrete module": [[63, "module-pycbc.inference.jump.discrete"]], "pycbc.inference.jump.normal module": [[63, "module-pycbc.inference.jump.normal"]], "pycbc.inference.models package": [[64, "pycbc-inference-models-package"]], "pycbc.inference.models.analytic module": [[64, "module-pycbc.inference.models.analytic"]], "pycbc.inference.models.base module": [[64, "module-pycbc.inference.models.base"]], "pycbc.inference.models.base_data module": [[64, "module-pycbc.inference.models.base_data"]], "pycbc.inference.models.brute_marg module": [[64, "module-pycbc.inference.models.brute_marg"]], "pycbc.inference.models.data_utils module": [[64, "module-pycbc.inference.models.data_utils"]], "pycbc.inference.models.gated_gaussian_noise module": [[64, "module-pycbc.inference.models.gated_gaussian_noise"]], "pycbc.inference.models.gaussian_noise module": [[64, "module-pycbc.inference.models.gaussian_noise"]], "pycbc.inference.models.hierarchical module": [[64, "module-pycbc.inference.models.hierarchical"]], "pycbc.inference.models.marginalized_gaussian_noise module": [[64, "module-pycbc.inference.models.marginalized_gaussian_noise"]], "pycbc.inference.models.relbin module": [[64, "module-pycbc.inference.models.relbin"]], "pycbc.inference.models.relbin_cpu module": [[64, "module-pycbc.inference.models.relbin_cpu"]], "pycbc.inference.models.single_template module": [[64, "module-pycbc.inference.models.single_template"]], "pycbc.inference.models.tools module": [[64, "module-pycbc.inference.models.tools"]], "pycbc.inference.sampler package": [[65, "pycbc-inference-sampler-package"]], "pycbc.inference.sampler.base module": [[65, "module-pycbc.inference.sampler.base"]], "pycbc.inference.sampler.base_cube module": [[65, "module-pycbc.inference.sampler.base_cube"]], "pycbc.inference.sampler.base_mcmc module": [[65, "module-pycbc.inference.sampler.base_mcmc"]], "pycbc.inference.sampler.base_multitemper module": [[65, "module-pycbc.inference.sampler.base_multitemper"]], "pycbc.inference.sampler.dummy module": [[65, "module-pycbc.inference.sampler.dummy"]], "pycbc.inference.sampler.dynesty module": [[65, "module-pycbc.inference.sampler.dynesty"]], "pycbc.inference.sampler.emcee module": [[65, "module-pycbc.inference.sampler.emcee"]], "pycbc.inference.sampler.emcee_pt module": [[65, "module-pycbc.inference.sampler.emcee_pt"]], "pycbc.inference.sampler.epsie module": [[65, "module-pycbc.inference.sampler.epsie"]], "pycbc.inference.sampler.multinest module": [[65, "module-pycbc.inference.sampler.multinest"]], "pycbc.inference.sampler.nessai module": [[65, "module-pycbc.inference.sampler.nessai"]], "pycbc.inference.sampler.ptemcee module": [[65, "module-pycbc.inference.sampler.ptemcee"]], "pycbc.inference.sampler.refine module": [[65, "module-pycbc.inference.sampler.refine"]], "pycbc.inference.sampler.snowline module": [[65, "module-pycbc.inference.sampler.snowline"]], "pycbc.inference.sampler.ultranest module": [[65, "module-pycbc.inference.sampler.ultranest"]], "pycbc.inject package": [[66, "pycbc-inject-package"]], "pycbc.inject.inject module": [[66, "module-pycbc.inject.inject"]], "pycbc.inject.injfilterrejector module": [[66, "module-pycbc.inject.injfilterrejector"]], "pycbc.io package": [[67, "pycbc-io-package"]], "pycbc.io.hdf module": [[67, "module-pycbc.io.hdf"]], "pycbc.io.ligolw module": [[67, "module-pycbc.io.ligolw"]], "pycbc.io.live module": [[67, "module-pycbc.io.live"]], "pycbc.io.record module": [[67, "module-pycbc.io.record"]], "pycbc.live package": [[68, "pycbc-live-package"]], "pycbc.live.snr_optimizer module": [[68, "module-pycbc.live.snr_optimizer"]], "pycbc.neutron_stars package": [[69, "pycbc-neutron-stars-package"]], "pycbc.neutron_stars.eos_utils module": [[69, "module-pycbc.neutron_stars.eos_utils"]], "pycbc.neutron_stars.pg_isso_solver module": [[69, "module-pycbc.neutron_stars.pg_isso_solver"]], "pycbc.noise package": [[70, "pycbc-noise-package"]], "pycbc.noise.gaussian module": [[70, "module-pycbc.noise.gaussian"]], "pycbc.noise.reproduceable module": [[70, "module-pycbc.noise.reproduceable"]], "pycbc.population package": [[71, "pycbc-population-package"]], "pycbc.population.fgmc_functions module": [[71, "module-pycbc.population.fgmc_functions"]], "pycbc.population.fgmc_laguerre module": [[71, "module-pycbc.population.fgmc_laguerre"]], "pycbc.population.fgmc_plots module": [[71, "module-pycbc.population.fgmc_plots"]], "pycbc.population.live_pastro module": [[71, "module-pycbc.population.live_pastro"]], "pycbc.population.live_pastro_utils module": [[71, "module-pycbc.population.live_pastro_utils"]], "pycbc.population.population_models module": [[71, "module-pycbc.population.population_models"]], "pycbc.population.rates_functions module": [[71, "module-pycbc.population.rates_functions"]], "pycbc.population.scale_injections module": [[71, "module-pycbc.population.scale_injections"]], "pycbc.psd package": [[72, "pycbc-psd-package"]], "pycbc.psd.analytical module": [[72, "module-pycbc.psd.analytical"]], "pycbc.psd.analytical_space module": [[72, "module-pycbc.psd.analytical_space"]], "pycbc.psd.estimate module": [[72, "module-pycbc.psd.estimate"]], "pycbc.psd.read module": [[72, "module-pycbc.psd.read"]], "pycbc.psd.variation module": [[72, "module-pycbc.psd.variation"]], "pycbc.results package": [[73, "pycbc-results-package"]], "pycbc.results.color module": [[73, "module-pycbc.results.color"]], "pycbc.results.dq module": [[73, "module-pycbc.results.dq"]], "pycbc.results.followup module": [[73, "module-pycbc.results.followup"]], "pycbc.results.layout module": [[73, "module-pycbc.results.layout"]], "pycbc.results.metadata module": [[73, "module-pycbc.results.metadata"]], "pycbc.results.mpld3_utils module": [[73, "module-pycbc.results.mpld3_utils"]], "pycbc.results.plot module": [[73, "module-pycbc.results.plot"]], "pycbc.results.psd module": [[73, "module-pycbc.results.psd"]], "pycbc.results.pygrb_plotting_utils module": [[73, "module-pycbc.results.pygrb_plotting_utils"]], "pycbc.results.pygrb_postprocessing_utils module": [[73, "module-pycbc.results.pygrb_postprocessing_utils"]], "pycbc.results.render module": [[73, "module-pycbc.results.render"]], "pycbc.results.scatter_histograms module": [[73, "module-pycbc.results.scatter_histograms"]], "pycbc.results.snr module": [[73, "module-pycbc.results.snr"]], "pycbc.results.str_utils module": [[73, "module-pycbc.results.str_utils"]], "pycbc.results.table_utils module": [[73, "module-pycbc.results.table_utils"]], "pycbc.results.versioning module": [[73, "module-pycbc.results.versioning"]], "pycbc.strain package": [[74, "pycbc-strain-package"]], "pycbc.strain.calibration module": [[74, "module-pycbc.strain.calibration"]], "pycbc.strain.gate module": [[74, "module-pycbc.strain.gate"]], "pycbc.strain.lines module": [[74, "module-pycbc.strain.lines"]], "pycbc.strain.recalibrate module": [[74, "module-pycbc.strain.recalibrate"]], "pycbc.strain.strain module": [[74, "module-pycbc.strain.strain"]], "pycbc.tmpltbank package": [[75, "pycbc-tmpltbank-package"]], "pycbc.tmpltbank.bank_conversions module": [[75, "module-pycbc.tmpltbank.bank_conversions"]], "pycbc.tmpltbank.bank_output_utils module": [[75, "module-pycbc.tmpltbank.bank_output_utils"]], "pycbc.tmpltbank.brute_force_methods module": [[75, "module-pycbc.tmpltbank.brute_force_methods"]], "pycbc.tmpltbank.calc_moments module": [[75, "module-pycbc.tmpltbank.calc_moments"]], "pycbc.tmpltbank.coord_utils module": [[75, "module-pycbc.tmpltbank.coord_utils"]], "pycbc.tmpltbank.lambda_mapping module": [[75, "module-pycbc.tmpltbank.lambda_mapping"]], "pycbc.tmpltbank.lattice_utils module": [[75, "module-pycbc.tmpltbank.lattice_utils"]], "pycbc.tmpltbank.option_utils module": [[75, "module-pycbc.tmpltbank.option_utils"]], "pycbc.tmpltbank.partitioned_bank module": [[75, "module-pycbc.tmpltbank.partitioned_bank"]], "pycbc.types package": [[76, "pycbc-types-package"]], "pycbc.types.aligned module": [[76, "module-pycbc.types.aligned"]], "pycbc.types.array module": [[76, "module-pycbc.types.array"]], "pycbc.types.array_cpu module": [[76, "module-pycbc.types.array_cpu"]], "pycbc.types.config module": [[76, "module-pycbc.types.config"]], "pycbc.types.frequencyseries module": [[76, "module-pycbc.types.frequencyseries"]], "pycbc.types.optparse module": [[76, "module-pycbc.types.optparse"]], "pycbc.types.timeseries module": [[76, "module-pycbc.types.timeseries"]], "pycbc.vetoes package": [[77, "pycbc-vetoes-package"]], "pycbc.vetoes.autochisq module": [[77, "module-pycbc.vetoes.autochisq"]], "pycbc.vetoes.bank_chisq module": [[77, "module-pycbc.vetoes.bank_chisq"]], "pycbc.vetoes.chisq module": [[77, "module-pycbc.vetoes.chisq"]], "pycbc.vetoes.chisq_cpu module": [[77, "module-pycbc.vetoes.chisq_cpu"]], "pycbc.vetoes.sgchisq module": [[77, "module-pycbc.vetoes.sgchisq"]], "pycbc.waveform package": [[78, "pycbc-waveform-package"]], "pycbc.waveform.bank module": [[78, "module-pycbc.waveform.bank"]], "pycbc.waveform.compress module": [[78, "module-pycbc.waveform.compress"]], "pycbc.waveform.decompress_cpu module": [[78, "module-pycbc.waveform.decompress_cpu"]], "pycbc.waveform.decompress_cpu_cython module": [[78, "module-pycbc.waveform.decompress_cpu_cython"]], "pycbc.waveform.generator module": [[78, "module-pycbc.waveform.generator"]], "pycbc.waveform.multiband module": [[78, "module-pycbc.waveform.multiband"]], "pycbc.waveform.nltides module": [[78, "module-pycbc.waveform.nltides"]], "pycbc.waveform.parameters module": [[78, "module-pycbc.waveform.parameters"]], "pycbc.waveform.plugin module": [[78, "module-pycbc.waveform.plugin"]], "pycbc.waveform.premerger module": [[78, "module-pycbc.waveform.premerger"]], "pycbc.waveform.pycbc_phenomC_tmplt module": [[78, "pycbc-waveform-pycbc-phenomc-tmplt-module"]], "pycbc.waveform.ringdown module": [[78, "module-pycbc.waveform.ringdown"]], "pycbc.waveform.sinegauss module": [[78, "module-pycbc.waveform.sinegauss"]], "pycbc.waveform.spa_tmplt module": [[78, "module-pycbc.waveform.spa_tmplt"]], "pycbc.waveform.spa_tmplt_cpu module": [[78, "module-pycbc.waveform.spa_tmplt_cpu"]], "pycbc.waveform.supernovae module": [[78, "module-pycbc.waveform.supernovae"]], "pycbc.waveform.utils module": [[78, "module-pycbc.waveform.utils"]], "pycbc.waveform.utils_cpu module": [[78, "module-pycbc.waveform.utils_cpu"]], "pycbc.waveform.waveform module": [[78, "module-pycbc.waveform.waveform"]], "pycbc.waveform.waveform_modes module": [[78, "module-pycbc.waveform.waveform_modes"]], "pycbc.workflow package": [[79, "pycbc-workflow-package"]], "pycbc.workflow.coincidence module": [[79, "module-pycbc.workflow.coincidence"]], "pycbc.workflow.configparser_test module": [[79, "module-pycbc.workflow.configparser_test"]], "pycbc.workflow.configuration module": [[79, "module-pycbc.workflow.configuration"]], "pycbc.workflow.core module": [[79, "module-pycbc.workflow.core"]], "pycbc.workflow.datafind module": [[79, "module-pycbc.workflow.datafind"]], "pycbc.workflow.dq module": [[79, "module-pycbc.workflow.dq"]], "pycbc.workflow.grb_utils module": [[79, "module-pycbc.workflow.grb_utils"]], "pycbc.workflow.inference_followups module": [[79, "module-pycbc.workflow.inference_followups"]], "pycbc.workflow.injection module": [[79, "module-pycbc.workflow.injection"]], "pycbc.workflow.jobsetup module": [[79, "module-pycbc.workflow.jobsetup"]], "pycbc.workflow.matched_filter module": [[79, "module-pycbc.workflow.matched_filter"]], "pycbc.workflow.minifollowups module": [[79, "module-pycbc.workflow.minifollowups"]], "pycbc.workflow.pegasus_sites module": [[79, "module-pycbc.workflow.pegasus_sites"]], "pycbc.workflow.pegasus_workflow module": [[79, "module-pycbc.workflow.pegasus_workflow"]], "pycbc.workflow.plotting module": [[79, "module-pycbc.workflow.plotting"]], "pycbc.workflow.psd module": [[79, "module-pycbc.workflow.psd"]], "pycbc.workflow.psdfiles module": [[79, "module-pycbc.workflow.psdfiles"]], "pycbc.workflow.segment module": [[79, "module-pycbc.workflow.segment"]], "pycbc.workflow.splittable module": [[79, "module-pycbc.workflow.splittable"]], "pycbc.workflow.tmpltbank module": [[79, "module-pycbc.workflow.tmpltbank"]], "pycbc.workflow.versioning module": [[79, "module-pycbc.workflow.versioning"]], "pycbc_condition_strain: operations with strain data files": [[80, "pycbc-condition-strain-operations-with-strain-data-files"]], "Splitting existing data into shorter frame files": [[80, "splitting-existing-data-into-shorter-frame-files"]], "Conditioning existing data": [[80, "conditioning-existing-data"]], "Injecting simulated signals into existing data": [[80, "injecting-simulated-signals-into-existing-data"]], "Simulating gravitational-wave data": [[80, "simulating-gravitational-wave-data"]], "Caveats": [[80, "caveats"]], "Creating Releases of PyCBC": [[81, "creating-releases-of-pycbc"]], "Creating the release on GitHub": [[81, "creating-the-release-on-github"]], "Backporting Bug Fixes to Previous Release Series": [[81, "backporting-bug-fixes-to-previous-release-series"]], "PyCBC template bank generation documentation (pycbc.tmpltbank)": [[82, "pycbc-template-bank-generation-documentation-pycbc-tmpltbank"]], "Non spin bank placement: pycbc_geom_nonspinbank": [[82, "non-spin-bank-placement-pycbc-geom-nonspinbank"]], "Background": [[82, "background"], [82, "id2"], [82, "id6"]], "Some examples": [[82, "some-examples"], [82, "id3"], [82, "id7"]], "Command line options": [[82, "command-line-options"], [82, "id4"]], "Aligned-spin geometric placement: pycbc_geom_aligned_bank": [[82, "aligned-spin-geometric-placement-pycbc-geom-aligned-bank"]], "Aligned-spin stochastic placement": [[82, "aligned-spin-stochastic-placement"]], "Ian\u2019s recommendation: Which stochastic code should I use?": [[82, "ian-s-recommendation-which-stochastic-code-should-i-use"]], "I want to use the F2 metric": [[82, "i-want-to-use-the-f2-metric"]], "I want to use another metric, ie. an IMR metric": [[82, "i-want-to-use-another-metric-ie-an-imr-metric"]], "I want to use direct match": [[82, "i-want-to-use-direct-match"]], "Command line options: pycbc_aligned_stoch_bank": [[82, "command-line-options-pycbc-aligned-stoch-bank"]], "Command line options: lalapps_cbc_sbank": [[82, "command-line-options-lalapps-cbc-sbank"]], "Sbank workflow generator": [[82, "sbank-workflow-generator"]], "Hybrid approaches: the best of both worlds": [[82, "hybrid-approaches-the-best-of-both-worlds"]], "The module\u2019s source code": [[82, "the-module-s-source-code"]], "Library Examples and Interactive Tutorials": [[83, "library-examples-and-interactive-tutorials"]], "Uploading triggers to gracedb": [[84, "uploading-triggers-to-gracedb"]], "Requirements": [[84, "requirements"], [90, "requirements"], [90, "id2"]], "Finding input files": [[84, "finding-input-files"]], "Running the command": [[84, "running-the-command"]], "Waveforms": [[85, "waveforms"]], "What waveforms can I generate?": [[85, "what-waveforms-can-i-generate"]], "Plotting Time Domain Waveforms": [[85, "plotting-time-domain-waveforms"]], "Generating one waveform in multiple detectors": [[85, "generating-one-waveform-in-multiple-detectors"]], "Selecting which modes to include": [[85, "selecting-which-modes-to-include"]], "Calculating the match between waveforms": [[85, "calculating-the-match-between-waveforms"]], "Plotting a TD and FD waveform together in the TD": [[85, "plotting-a-td-and-fd-waveform-together-in-the-td"]], "Plotting GW phase and amplitude of TD waveform": [[85, "plotting-gw-phase-and-amplitude-of-td-waveform"]], "Plotting frequency evolution of TD waveform": [[85, "plotting-frequency-evolution-of-td-waveform"]], "Adding a custom waveform": [[85, "adding-a-custom-waveform"]], "Making new waveform approximants available to PyCBC": [[86, "making-new-waveform-approximants-available-to-pycbc"]], "Adding a custom waveform model within a script": [[86, "adding-a-custom-waveform-model-within-a-script"]], "Creating a plugin for PyCBC": [[86, "creating-a-plugin-for-pycbc"]], "Workflow: the inspiral analysis workflow generator (pycbc.workflow)": [[87, "workflow-the-inspiral-analysis-workflow-generator-pycbc-workflow"]], "Workflow module documentation": [[87, "workflow-module-documentation"]], "Basics and overview": [[87, "basics-and-overview"]], "Generating segments": [[87, "generating-segments"]], "Obtaining data": [[87, "obtaining-data"]], "Injection generation": [[87, "injection-generation"]], "Template bank": [[87, "template-bank"]], "Split table": [[87, "split-table"]], "Matched-filtering": [[87, "matched-filtering"]], "Coincidence": [[87, "coincidence"]], "The workflow datafind and validation module": [[88, "the-workflow-datafind-and-validation-module"]], "Usage": [[88, "usage"], [91, "usage"], [92, "usage"], [98, "usage"], [99, "usage"], [100, "usage"]], "Configuration file setup": [[88, "configuration-file-setup"], [91, "configuration-file-setup"], [92, "configuration-file-setup"], [98, "configuration-file-setup"], [99, "configuration-file-setup"], [100, "configuration-file-setup"]], "[workflow-datafind] section": [[88, "workflow-datafind-section"]], "[executables]": [[88, "executables"], [91, "executables"], [92, "executables"], [99, "executables"], [100, "executables"]], "Other sections": [[88, "other-sections"]], "[datafind]": [[88, "datafind"]], "pycbc.workflow.datafind Module": [[88, "pycbc-workflow-datafind-module"]], "HDF5 Based Coincidence Code": [[89, "hdf5-based-coincidence-code"]], "Limitations": [[89, "limitations"]], "Configuration File": [[89, "configuration-file"], [97, "configuration-file"]], "Workflow Configuration": [[89, "workflow-configuration"]], "Executable Configuration": [[89, "executable-configuration"]], "Options to the coincidence/background executable": [[89, "options-to-the-coincidence-background-executable"]], "Options to the coincidence clustering + statistic asignment executable": [[89, "options-to-the-coincidence-clustering-statistic-asignment-executable"]], "Options to the injection finding executable": [[89, "options-to-the-injection-finding-executable"]], "Options for sensitivity plotting": [[89, "options-for-sensitivity-plotting"]], "Pycbc\u2019s workflow module configuration file(s) and command line interface": [[90, "pycbc-s-workflow-module-configuration-file-s-and-command-line-interface"]], "Supplying the config file on the command line and overriding options": [[90, "supplying-the-config-file-on-the-command-line-and-overriding-options"]], "Example": [[90, "example"], [90, "id1"], [90, "id3"]], "Global options - the [workflow] section": [[90, "global-options-the-workflow-section"]], "[workflow-XXX] subsections": [[90, "workflow-xxx-subsections"]], "Executable locations - the [executables] section": [[90, "executable-locations-the-executables-section"]], "executable macros": [[90, "executable-macros"]], "which(executable)": [[90, "which-executable"]], "Executable options": [[90, "executable-options"]], "Example complete workflow .ini file": [[90, "example-complete-workflow-ini-file"]], "Other special sections": [[90, "other-special-sections"]], "[environment] section": [[90, "environment-section"]], "[sharedoptions] section": [[90, "sharedoptions-section"]], "Code documentation": [[90, "code-documentation"]], "pycbc.workflow.configuration Module": [[90, "pycbc-workflow-configuration-module"]], "The workflow injection generation module": [[91, "the-workflow-injection-generation-module"]], "[workflow-injections] section": [[91, "workflow-injections-section"]], "Supported injection executables and instructions for using them": [[91, "supported-injection-executables-and-instructions-for-using-them"]], "lalapps_inspinj": [[91, "lalapps-inspinj"]], "pycbc.workflow.injection Module": [[91, "pycbc-workflow-injection-module"]], "The workflow matched-filter module": [[92, "the-workflow-matched-filter-module"]], "[workflow-matchedfilter] section": [[92, "workflow-matchedfilter-section"]], "Supported inspiral trigger generators and instructions for using them": [[92, "supported-inspiral-trigger-generators-and-instructions-for-using-them"]], "lalapps_inspiral_ahope": [[92, "lalapps-inspiral-ahope"]], "pycbc_inspiral": [[92, "pycbc-inspiral"]], "pycbc.workflow.matched_filter Module": [[92, "pycbc-workflow-matched-filter-module"]], "pycbc_make_inference_inj_workflow: A parameter estimation workflow generator for injections": [[93, "pycbc-make-inference-inj-workflow-a-parameter-estimation-workflow-generator-for-injections"]], "Example: BBH injections with dynesty": [[93, "example-bbh-injections-with-dynesty"]], "Get the inference configuration files": [[93, "get-the-inference-configuration-files"], [94, "get-the-inference-configuration-files"]], "Setup the workflow configuration file": [[93, "setup-the-workflow-configuration-file"], [94, "setup-the-workflow-configuration-file"]], "Generate the workflow": [[93, "generate-the-workflow"], [94, "generate-the-workflow"], [97, "generate-the-workflow"]], "Plan and execute the workflow": [[93, "plan-and-execute-the-workflow"], [94, "plan-and-execute-the-workflow"]], "Results page": [[93, "results-page"], [94, "results-page"]], "pycbc_make_inference_workflow: A parameter estimation workflow generator": [[94, "pycbc-make-inference-workflow-a-parameter-estimation-workflow-generator"]], "Example: GW150914 and GW170814 with emcee_pt": [[94, "example-gw150914-and-gw170814-with-emcee-pt"]], "Example: GW150914 and GW170814 with dynesty": [[94, "example-gw150914-and-gw170814-with-dynesty"]], "pycbc_make_offline_search_workflow: A workflow to search for gravitational waves": [[95, "pycbc-make-offline-search-workflow-a-workflow-to-search-for-gravitational-waves"]], "Configuration file": [[95, "configuration-file"], [96, "configuration-file"]], "Planning and Submitting the Workflow": [[95, "planning-and-submitting-the-workflow"], [97, "planning-and-submitting-the-workflow"]], "Monitor and Debug the Workflow (Detailed Pegasus Documentation)": [[95, "monitor-and-debug-the-workflow-detailed-pegasus-documentation"], [97, "monitor-and-debug-the-workflow-detailed-pegasus-documentation"]], "Pegasus Dashboard": [[95, "pegasus-dashboard"], [97, "pegasus-dashboard"]], "Pegasus Analyzer": [[95, "pegasus-analyzer"]], "Reuse of data from a previous workflow": [[95, "reuse-of-data-from-a-previous-workflow"], [97, "reuse-of-data-from-a-previous-workflow"]], "Setting up a workflow for data reuse": [[95, "setting-up-a-workflow-for-data-reuse"]], "Extending the GPS end time of a previous workflow": [[95, "extending-the-gps-end-time-of-a-previous-workflow"]], "Re-running a workflow using a new veto definer file": [[95, "re-running-a-workflow-using-a-new-veto-definer-file"]], "Re-running a failed workflow": [[95, "re-running-a-failed-workflow"]], "Using partial products from a previous workflow": [[95, "using-partial-products-from-a-previous-workflow"]], "Running on the Open Science Grid": [[95, "running-on-the-open-science-grid"]], "Prerequisites": [[95, "prerequisites"]], "Configuring the workflow": [[95, "configuring-the-workflow"]], "Running the workflow": [[95, "running-the-workflow"]], "pycbc_make_psd_estimation_workflow: A workflow generator for noise estimation": [[96, "pycbc-make-psd-estimation-workflow-a-workflow-generator-for-noise-estimation"]], "Generating and running the workflow": [[96, "generating-and-running-the-workflow"]], "pycbc_make_offline_grb_workflow: A GRB triggered CBC analysis workflow generator": [[97, "pycbc-make-offline-grb-workflow-a-grb-triggered-cbc-analysis-workflow-generator"]], "Workflow Sections": [[97, "workflow-sections"]], "Executable Sections": [[97, "executable-sections"]], "Pegasus Profile Sections": [[97, "pegasus-profile-sections"]], "How to run": [[97, "how-to-run"]], "Set up a run directory": [[97, "set-up-a-run-directory"]], "Configuration files - Are you running from production configuration (.ini) files?": [[97, "configuration-files-are-you-running-from-production-configuration-ini-files"]], "Yes, I want to run in a standard production configuration": [[97, "yes-i-want-to-run-in-a-standard-production-configuration"]], "No, I have my own configuration files": [[97, "no-i-have-my-own-configuration-files"]], "Pegasus Plots": [[97, "pegasus-plots"]], "Generate the full workflow you want to do": [[97, "generate-the-full-workflow-you-want-to-do"]], "Select the files you want to reuse from the prior run": [[97, "select-the-files-you-want-to-reuse-from-the-prior-run"]], "Plan the workflow": [[97, "plan-the-workflow"]], "The workflow segment generation module": [[98, "the-workflow-segment-generation-module"]], "Example config file": [[98, "example-config-file"]], "Description of the ini file contents": [[98, "description-of-the-ini-file-contents"]], "Flag syntax": [[98, "flag-syntax"]], "Version numbers": [[98, "version-numbers"]], "The veto-definer file": [[98, "the-veto-definer-file"]], "Adding a ifo": [[98, "adding-a-ifo"]], "Providing padding": [[98, "providing-padding"]], "Providing valid times": [[98, "providing-valid-times"]], "Obtaining segments from pre-existing XML files": [[98, "obtaining-segments-from-pre-existing-xml-files"]], "pycbc.workflow.segment Module": [[98, "pycbc-workflow-segment-module"]], "The workflow table splitting module": [[99, "the-workflow-table-splitting-module"]], "[workflow-splittable] section": [[99, "workflow-splittable-section"]], "Supported splittable executables and instructions for using them": [[99, "supported-splittable-executables-and-instructions-for-using-them"]], "pycbc_splitbank": [[99, "pycbc-splitbank"]], "pycbc.workflow.splittable Module": [[99, "pycbc-workflow-splittable-module"]], "The workflow template bank generation module": [[100, "the-workflow-template-bank-generation-module"]], "[workflow-tmpltbank] section": [[100, "workflow-tmpltbank-section"]], "Supported template bank exes and instructions for using them": [[100, "supported-template-bank-exes-and-instructions-for-using-them"]], "lalapps_tmpltbank_ahope": [[100, "lalapps-tmpltbank-ahope"]], "pycbc_geom_nonspinbank": [[100, "pycbc-geom-nonspinbank"]], "pycbc.workflow.tmpltbank Module": [[100, "pycbc-workflow-tmpltbank-module"]]}, "indexentries": {"a0() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.A0"]], "a3() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.A3"]], "aligntotalspin (class in pycbc.transforms)": [[53, "pycbc.transforms.AlignTotalSpin"]], "alignedmassspintocartesianspin (class in pycbc.transforms)": [[53, "pycbc.transforms.AlignedMassSpinToCartesianSpin"]], "basetransform (class in pycbc.transforms)": [[53, "pycbc.transforms.BaseTransform"]], "binnedarray (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.BinnedArray"]], "binnedratios (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.BinnedRatios"]], "bins (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.Bins"]], "bounds (class in pycbc.boundaries)": [[53, "pycbc.boundaries.Bounds"]], "broadcastpool (class in pycbc.pool)": [[53, "pycbc.pool.BroadcastPool"]], "cpuscheme (class in pycbc.scheme)": [[53, "pycbc.scheme.CPUScheme"]], "cudascheme (class in pycbc.scheme)": [[53, "pycbc.scheme.CUDAScheme"]], "cartesianspin1tosphericalspin1 (class in pycbc.transforms)": [[53, "pycbc.transforms.CartesianSpin1ToSphericalSpin1"]], "cartesianspin2tosphericalspin2 (class in pycbc.transforms)": [[53, "pycbc.transforms.CartesianSpin2ToSphericalSpin2"]], "cartesianspintoalignedmassspin (class in pycbc.transforms)": [[53, "pycbc.transforms.CartesianSpinToAlignedMassSpin"]], "cartesianspintochip (class in pycbc.transforms)": [[53, "pycbc.transforms.CartesianSpinToChiP"]], "cartesianspintoprecessionmassspin (class in pycbc.transforms)": [[53, "pycbc.transforms.CartesianSpinToPrecessionMassSpin"]], "cartesiantospherical (class in pycbc.transforms)": [[53, "pycbc.transforms.CartesianToSpherical"]], "chiptocartesianspin (class in pycbc.transforms)": [[53, "pycbc.transforms.ChiPToCartesianSpin"]], "chirpdistancetodistance (class in pycbc.transforms)": [[53, "pycbc.transforms.ChirpDistanceToDistance"]], "choosebyschemedict (class in pycbc.scheme)": [[53, "pycbc.scheme.ChooseBySchemeDict"]], "closedbound (class in pycbc.boundaries)": [[53, "pycbc.boundaries.ClosedBound"]], "customtransform (class in pycbc.transforms)": [[53, "pycbc.transforms.CustomTransform"]], "customtransformmultioutputs (class in pycbc.transforms)": [[53, "pycbc.transforms.CustomTransformMultiOutputs"]], "defaultscheme (class in pycbc.scheme)": [[53, "pycbc.scheme.DefaultScheme"]], "detector (class in pycbc.detector)": [[53, "pycbc.detector.Detector"]], "distancetochirpdistance (class in pycbc.transforms)": [[53, "pycbc.transforms.DistanceToChirpDistance"]], "distancetoredshift (class in pycbc.transforms)": [[53, "pycbc.transforms.DistanceToRedshift"]], "exponent (class in pycbc.transforms)": [[53, "pycbc.transforms.Exponent"]], "geotolisa (class in pycbc.transforms)": [[53, "pycbc.transforms.GEOToLISA"]], "geotossb (class in pycbc.transforms)": [[53, "pycbc.transforms.GEOToSSB"]], "irregularbins (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.IrregularBins"]], "lisa (class in pycbc.detector)": [[53, "pycbc.detector.LISA"]], "lisatogeo (class in pycbc.transforms)": [[53, "pycbc.transforms.LISAToGEO"]], "lisatossb (class in pycbc.transforms)": [[53, "pycbc.transforms.LISAToSSB"]], "lambdafrommultipletovfiles (class in pycbc.transforms)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles"]], "lambdafromtovfile (class in pycbc.transforms)": [[53, "pycbc.transforms.LambdaFromTOVFile"]], "limitedsizedict (class in pycbc.opt)": [[53, "pycbc.opt.LimitedSizeDict"]], "linearbins (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.LinearBins"]], "linearplusoverflowbins (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.LinearPlusOverflowBins"]], "log (class in pycbc.transforms)": [[53, "pycbc.transforms.Log"]], "logformatter (class in pycbc)": [[53, "pycbc.LogFormatter"]], "logarithmicbins (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.LogarithmicBins"]], "logarithmicplusoverflowbins (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.LogarithmicPlusOverflowBins"]], "logistic (class in pycbc.transforms)": [[53, "pycbc.transforms.Logistic"]], "logit (class in pycbc.transforms)": [[53, "pycbc.transforms.Logit"]], "mklscheme (class in pycbc.scheme)": [[53, "pycbc.scheme.MKLScheme"]], "mass1mass2tomchirpeta (class in pycbc.transforms)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpEta"]], "mass1mass2tomchirpq (class in pycbc.transforms)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpQ"]], "mchirpetatomass1mass2 (class in pycbc.transforms)": [[53, "pycbc.transforms.MchirpEtaToMass1Mass2"]], "mchirpqtomass1mass2 (class in pycbc.transforms)": [[53, "pycbc.transforms.MchirpQToMass1Mass2"]], "ndbins (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.NDBins"]], "numpyscheme (class in pycbc.scheme)": [[53, "pycbc.scheme.NumpyScheme"]], "openbound (class in pycbc.boundaries)": [[53, "pycbc.boundaries.OpenBound"]], "precessionmassspintocartesianspin (class in pycbc.transforms)": [[53, "pycbc.transforms.PrecessionMassSpinToCartesianSpin"]], "reflectedbound (class in pycbc.boundaries)": [[53, "pycbc.boundaries.ReflectedBound"]], "ssbtogeo (class in pycbc.transforms)": [[53, "pycbc.transforms.SSBToGEO"]], "ssbtolisa (class in pycbc.transforms)": [[53, "pycbc.transforms.SSBToLISA"]], "scheme (class in pycbc.scheme)": [[53, "pycbc.scheme.Scheme"]], "singlepool (class in pycbc.pool)": [[53, "pycbc.pool.SinglePool"]], "sphericalspin1tocartesianspin1 (class in pycbc.transforms)": [[53, "pycbc.transforms.SphericalSpin1ToCartesianSpin1"]], "sphericalspin2tocartesianspin2 (class in pycbc.transforms)": [[53, "pycbc.transforms.SphericalSpin2ToCartesianSpin2"]], "sphericaltocartesian (class in pycbc.transforms)": [[53, "pycbc.transforms.SphericalToCartesian"]], "add_common_pycbc_options() (in module pycbc)": [[53, "pycbc.add_common_pycbc_options"]], "add_detector_on_earth() (in module pycbc.detector)": [[53, "pycbc.detector.add_detector_on_earth"]], "allmap() (pycbc.pool.broadcastpool method)": [[53, "pycbc.pool.BroadcastPool.allmap"]], "antenna_pattern() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.antenna_pattern"]], "apply_conditions() (pycbc.boundaries.bounds method)": [[53, "pycbc.boundaries.Bounds.apply_conditions"]], "apply_cyclic() (in module pycbc.boundaries)": [[53, "pycbc.boundaries.apply_cyclic"]], "apply_transforms() (in module pycbc.transforms)": [[53, "pycbc.transforms.apply_transforms"]], "argmax() (pycbc.bin_utils.binnedarray method)": [[53, "pycbc.bin_utils.BinnedArray.argmax"]], "argmin() (pycbc.bin_utils.binnedarray method)": [[53, "pycbc.bin_utils.BinnedArray.argmin"]], "bins() (pycbc.bin_utils.binnedratios method)": [[53, "pycbc.bin_utils.BinnedRatios.bins"]], "bounds (pycbc.transforms.logistic property)": [[53, "pycbc.transforms.Logistic.bounds"]], "bounds (pycbc.transforms.logit property)": [[53, "pycbc.transforms.Logit.bounds"]], "broadcast() (pycbc.pool.broadcastpool method)": [[53, "pycbc.pool.BroadcastPool.broadcast"]], "broadcast() (pycbc.pool.singlepool method)": [[53, "pycbc.pool.SinglePool.broadcast"]], "calc_areas() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.calc_areas"]], "calc_probabilities() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.calc_probabilities"]], "centres() (pycbc.bin_utils.binnedarray method)": [[53, "pycbc.bin_utils.BinnedArray.centres"]], "centres() (pycbc.bin_utils.binnedratios method)": [[53, "pycbc.bin_utils.BinnedRatios.centres"]], "centres() (pycbc.bin_utils.bins method)": [[53, "pycbc.bin_utils.Bins.centres"]], "centres() (pycbc.bin_utils.irregularbins method)": [[53, "pycbc.bin_utils.IrregularBins.centres"]], "centres() (pycbc.bin_utils.linearbins method)": [[53, "pycbc.bin_utils.LinearBins.centres"]], "centres() (pycbc.bin_utils.linearplusoverflowbins method)": [[53, "pycbc.bin_utils.LinearPlusOverflowBins.centres"]], "centres() (pycbc.bin_utils.logarithmicbins method)": [[53, "pycbc.bin_utils.LogarithmicBins.centres"]], "centres() (pycbc.bin_utils.logarithmicplusoverflowbins method)": [[53, "pycbc.bin_utils.LogarithmicPlusOverflowBins.centres"]], "centres() (pycbc.bin_utils.ndbins method)": [[53, "pycbc.bin_utils.NDBins.centres"]], "chi_a() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_a"]], "chi_eff() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_eff"]], "chi_eff_from_spherical() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_eff_from_spherical"]], "chi_p() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_p"]], "chi_p_from_spherical() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_p_from_spherical"]], "chi_p_from_xi1_xi2() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_p_from_xi1_xi2"]], "chi_perp_from_mass1_mass2_xi2() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_perp_from_mass1_mass2_xi2"]], "chi_perp_from_spinx_spiny() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_perp_from_spinx_spiny"]], "chirp_distance() (in module pycbc.conversions)": [[53, "pycbc.conversions.chirp_distance"]], "chirp_distance() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.chirp_distance"]], "chirp_volume_montecarlo() (in module pycbc.sensitivity)": [[53, "pycbc.sensitivity.chirp_volume_montecarlo"]], "choose_pool() (in module pycbc.pool)": [[53, "pycbc.pool.choose_pool"]], "clean_cuda() (in module pycbc.scheme)": [[53, "pycbc.scheme.clean_cuda"]], "compute_efficiency() (in module pycbc.rate)": [[53, "pycbc.rate.compute_efficiency"]], "compute_jacobian() (in module pycbc.transforms)": [[53, "pycbc.transforms.compute_jacobian"]], "compute_lower_limit() (in module pycbc.rate)": [[53, "pycbc.rate.compute_lower_limit"]], "compute_search_efficiency_in_bins() (in module pycbc.sensitivity)": [[53, "pycbc.sensitivity.compute_search_efficiency_in_bins"]], "compute_search_volume_in_bins() (in module pycbc.sensitivity)": [[53, "pycbc.sensitivity.compute_search_volume_in_bins"]], "compute_upper_limit() (in module pycbc.rate)": [[53, "pycbc.rate.compute_upper_limit"]], "compute_volume_vs_mass() (in module pycbc.rate)": [[53, "pycbc.rate.compute_volume_vs_mass"]], "confidence_interval_min_width() (in module pycbc.rate)": [[53, "pycbc.rate.confidence_interval_min_width"]], "contains_conditioned() (pycbc.boundaries.bounds method)": [[53, "pycbc.boundaries.Bounds.contains_conditioned"]], "converter() (pycbc.logformatter method)": [[53, "pycbc.LogFormatter.converter"]], "copy() (pycbc.bin_utils.binnedarray method)": [[53, "pycbc.bin_utils.BinnedArray.copy"]], "cosmological_quantity_from_redshift() (in module pycbc.cosmology)": [[53, "pycbc.cosmology.cosmological_quantity_from_redshift"]], "cpuonly() (in module pycbc.scheme)": [[53, "pycbc.scheme.cpuonly"]], "current_prefix() (in module pycbc.scheme)": [[53, "pycbc.scheme.current_prefix"]], "cyclic (pycbc.boundaries.bounds property)": [[53, "pycbc.boundaries.Bounds.cyclic"]], "data (pycbc.transforms.lambdafromtovfile property)": [[53, "pycbc.transforms.LambdaFromTOVFile.data"]], "default_params_name (pycbc.transforms.geotossb attribute)": [[53, "pycbc.transforms.GEOToSSB.default_params_name"]], "default_params_name (pycbc.transforms.lisatogeo attribute)": [[53, "pycbc.transforms.LISAToGEO.default_params_name"]], "default_params_name (pycbc.transforms.lisatossb attribute)": [[53, "pycbc.transforms.LISAToSSB.default_params_name"]], "det_tc() (in module pycbc.conversions)": [[53, "pycbc.conversions.det_tc"]], "distance (pycbc.transforms.lambdafrommultipletovfiles property)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.distance"]], "distance (pycbc.transforms.lambdafromtovfile property)": [[53, "pycbc.transforms.LambdaFromTOVFile.distance"]], "distance_from_comoving_volume() (in module pycbc.cosmology)": [[53, "pycbc.cosmology.distance_from_comoving_volume"]], "dquadmon_from_lambda() (in module pycbc.conversions)": [[53, "pycbc.conversions.dquadmon_from_lambda"]], "effective_distance() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.effective_distance"]], "energy() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.energy"]], "energy_coefficients() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.energy_coefficients"]], "eta_from_mass1_mass2() (in module pycbc.conversions)": [[53, "pycbc.conversions.eta_from_mass1_mass2"]], "eta_from_q() (in module pycbc.conversions)": [[53, "pycbc.conversions.eta_from_q"]], "eta_from_tau0_tau3() (in module pycbc.conversions)": [[53, "pycbc.conversions.eta_from_tau0_tau3"]], "eta_mass1_to_mass2() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.eta_mass1_to_mass2"]], "f_bklisco() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.f_BKLISCO"]], "f_erd() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.f_ERD"]], "f_frd() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.f_FRD"]], "f_lrd() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.f_LRD"]], "f_lightring() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.f_LightRing"]], "f_schwarzisco() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.f_SchwarzISCO"]], "filter_injections_by_mass() (in module pycbc.rate)": [[53, "pycbc.rate.filter_injections_by_mass"]], "final_mass_from_f0_tau() (in module pycbc.conversions)": [[53, "pycbc.conversions.final_mass_from_f0_tau"]], "final_mass_from_initial() (in module pycbc.conversions)": [[53, "pycbc.conversions.final_mass_from_initial"]], "final_spin_from_f0_tau() (in module pycbc.conversions)": [[53, "pycbc.conversions.final_spin_from_f0_tau"]], "final_spin_from_initial() (in module pycbc.conversions)": [[53, "pycbc.conversions.final_spin_from_initial"]], "formattime() (pycbc.logformatter method)": [[53, "pycbc.LogFormatter.formatTime"]], "format_output() (pycbc.transforms.basetransform static method)": [[53, "pycbc.transforms.BaseTransform.format_output"]], "freq_from_final_mass_spin() (in module pycbc.conversions)": [[53, "pycbc.conversions.freq_from_final_mass_spin"]], "freqlmn_from_other_lmn() (in module pycbc.conversions)": [[53, "pycbc.conversions.freqlmn_from_other_lmn"]], "frequency_cutoff_from_name() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.frequency_cutoff_from_name"]], "frequency_to_velocity() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.frequency_to_velocity"]], "from_cli() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.from_cli"]], "from_cli() (in module pycbc.scheme)": [[53, "pycbc.scheme.from_cli"]], "from_config() (pycbc.transforms.basetransform class method)": [[53, "pycbc.transforms.BaseTransform.from_config"]], "from_config() (pycbc.transforms.customtransform class method)": [[53, "pycbc.transforms.CustomTransform.from_config"]], "from_config() (pycbc.transforms.customtransformmultioutputs class method)": [[53, "pycbc.transforms.CustomTransformMultiOutputs.from_config"]], "from_config() (pycbc.transforms.geotossb class method)": [[53, "pycbc.transforms.GEOToSSB.from_config"]], "from_config() (pycbc.transforms.lisatogeo class method)": [[53, "pycbc.transforms.LISAToGEO.from_config"]], "from_config() (pycbc.transforms.lisatossb class method)": [[53, "pycbc.transforms.LISAToSSB.from_config"]], "from_config() (pycbc.transforms.lambdafrommultipletovfiles class method)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.from_config"]], "from_config() (pycbc.transforms.lambdafromtovfile class method)": [[53, "pycbc.transforms.LambdaFromTOVFile.from_config"]], "from_config() (pycbc.transforms.logistic class method)": [[53, "pycbc.transforms.Logistic.from_config"]], "from_config() (pycbc.transforms.logit class method)": [[53, "pycbc.transforms.Logit.from_config"]], "get_area() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.get_area"]], "get_available_detectors() (in module pycbc.detector)": [[53, "pycbc.detector.get_available_detectors"]], "get_available_lal_detectors() (in module pycbc.detector)": [[53, "pycbc.detector.get_available_lal_detectors"]], "get_beta_sigma_from_aligned_spins() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.get_beta_sigma_from_aligned_spins"]], "get_common_cbc_transforms() (in module pycbc.transforms)": [[53, "pycbc.transforms.get_common_cbc_transforms"]], "get_ctypes_library() (in module pycbc.libutils)": [[53, "pycbc.libutils.get_ctypes_library"]], "get_eos() (pycbc.transforms.lambdafrommultipletovfiles method)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.get_eos"]], "get_final_freq() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.get_final_freq"]], "get_freq() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.get_freq"]], "get_gcrs_pos() (pycbc.detector.lisa method)": [[53, "pycbc.detector.LISA.get_gcrs_pos"]], "get_icrs_pos() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.get_icrs_pos"]], "get_inspiral_tf() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.get_inspiral_tf"]], "get_libpath_from_dirlist() (in module pycbc.libutils)": [[53, "pycbc.libutils.get_libpath_from_dirlist"]], "get_pos() (pycbc.detector.lisa method)": [[53, "pycbc.detector.LISA.get_pos"]], "getconf() (in module pycbc.opt)": [[53, "pycbc.opt.getconf"]], "gmst_accurate() (in module pycbc.detector)": [[53, "pycbc.detector.gmst_accurate"]], "gmst_estimate() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.gmst_estimate"]], "gps_now() (in module pycbc)": [[53, "pycbc.gps_now"]], "hpd_coverage() (in module pycbc.rate)": [[53, "pycbc.rate.hpd_coverage"]], "hpd_credible_interval() (in module pycbc.rate)": [[53, "pycbc.rate.hpd_credible_interval"]], "hpd_threshold() (in module pycbc.rate)": [[53, "pycbc.rate.hpd_threshold"]], "hybridenergy() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.hybridEnergy"]], "hybrid_meco_frequency() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.hybrid_meco_frequency"]], "hybrid_meco_velocity() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.hybrid_meco_velocity"]], "imap() (pycbc.pool.singlepool method)": [[53, "pycbc.pool.SinglePool.imap"]], "import_optional() (in module pycbc.libutils)": [[53, "pycbc.libutils.import_optional"]], "incdenominator() (pycbc.bin_utils.binnedratios method)": [[53, "pycbc.bin_utils.BinnedRatios.incdenominator"]], "incnumerator() (pycbc.bin_utils.binnedratios method)": [[53, "pycbc.bin_utils.BinnedRatios.incnumerator"]], "init_logging() (in module pycbc)": [[53, "pycbc.init_logging"]], "inputvar (pycbc.transforms.log property)": [[53, "pycbc.transforms.Log.inputvar"]], "inputvar (pycbc.transforms.logit property)": [[53, "pycbc.transforms.Logit.inputvar"]], "insert_args() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.insert_args"]], "insert_optimization_option_group() (in module pycbc.opt)": [[53, "pycbc.opt.insert_optimization_option_group"]], "insert_processing_option_group() (in module pycbc.scheme)": [[53, "pycbc.scheme.insert_processing_option_group"]], "integral_element() (in module pycbc.rate)": [[53, "pycbc.rate.integral_element"]], "integrate_efficiency() (in module pycbc.rate)": [[53, "pycbc.rate.integrate_efficiency"]], "intmc() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.intmc"]], "inverse (pycbc.transforms.alignedmassspintocartesianspin attribute)": [[53, "pycbc.transforms.AlignedMassSpinToCartesianSpin.inverse"]], "inverse (pycbc.transforms.basetransform attribute)": [[53, "pycbc.transforms.BaseTransform.inverse"]], "inverse (pycbc.transforms.cartesianspintoalignedmassspin attribute)": [[53, "pycbc.transforms.CartesianSpinToAlignedMassSpin.inverse"]], "inverse (pycbc.transforms.cartesianspintoprecessionmassspin attribute)": [[53, "pycbc.transforms.CartesianSpinToPrecessionMassSpin.inverse"]], "inverse (pycbc.transforms.cartesiantospherical attribute)": [[53, "pycbc.transforms.CartesianToSpherical.inverse"]], "inverse (pycbc.transforms.chiptocartesianspin attribute)": [[53, "pycbc.transforms.ChiPToCartesianSpin.inverse"]], "inverse (pycbc.transforms.chirpdistancetodistance attribute)": [[53, "pycbc.transforms.ChirpDistanceToDistance.inverse"]], "inverse (pycbc.transforms.distancetochirpdistance attribute)": [[53, "pycbc.transforms.DistanceToChirpDistance.inverse"]], "inverse (pycbc.transforms.distancetoredshift attribute)": [[53, "pycbc.transforms.DistanceToRedshift.inverse"]], "inverse (pycbc.transforms.exponent attribute)": [[53, "pycbc.transforms.Exponent.inverse"]], "inverse (pycbc.transforms.geotolisa attribute)": [[53, "pycbc.transforms.GEOToLISA.inverse"]], "inverse (pycbc.transforms.geotossb attribute)": [[53, "pycbc.transforms.GEOToSSB.inverse"]], "inverse (pycbc.transforms.lisatogeo attribute)": [[53, "pycbc.transforms.LISAToGEO.inverse"]], "inverse (pycbc.transforms.lisatossb attribute)": [[53, "pycbc.transforms.LISAToSSB.inverse"]], "inverse (pycbc.transforms.log attribute)": [[53, "pycbc.transforms.Log.inverse"]], "inverse (pycbc.transforms.logistic attribute)": [[53, "pycbc.transforms.Logistic.inverse"]], "inverse (pycbc.transforms.logit attribute)": [[53, "pycbc.transforms.Logit.inverse"]], "inverse (pycbc.transforms.mass1mass2tomchirpeta attribute)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpEta.inverse"]], "inverse (pycbc.transforms.mass1mass2tomchirpq attribute)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpQ.inverse"]], "inverse (pycbc.transforms.mchirpqtomass1mass2 attribute)": [[53, "pycbc.transforms.MchirpQToMass1Mass2.inverse"]], "inverse (pycbc.transforms.precessionmassspintocartesianspin attribute)": [[53, "pycbc.transforms.PrecessionMassSpinToCartesianSpin.inverse"]], "inverse (pycbc.transforms.ssbtogeo attribute)": [[53, "pycbc.transforms.SSBToGEO.inverse"]], "inverse (pycbc.transforms.ssbtolisa attribute)": [[53, "pycbc.transforms.SSBToLISA.inverse"]], "inverse (pycbc.transforms.sphericalspin1tocartesianspin1 attribute)": [[53, "pycbc.transforms.SphericalSpin1ToCartesianSpin1.inverse"]], "inverse (pycbc.transforms.sphericalspin2tocartesianspin2 attribute)": [[53, "pycbc.transforms.SphericalSpin2ToCartesianSpin2.inverse"]], "inverse (pycbc.transforms.sphericaltocartesian attribute)": [[53, "pycbc.transforms.SphericalToCartesian.inverse"]], "inverse_jacobian() (pycbc.transforms.basetransform method)": [[53, "pycbc.transforms.BaseTransform.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.cartesianspintoalignedmassspin method)": [[53, "pycbc.transforms.CartesianSpinToAlignedMassSpin.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.cartesianspintoprecessionmassspin method)": [[53, "pycbc.transforms.CartesianSpinToPrecessionMassSpin.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.cartesiantospherical method)": [[53, "pycbc.transforms.CartesianToSpherical.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.chiptocartesianspin method)": [[53, "pycbc.transforms.ChiPToCartesianSpin.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.chirpdistancetodistance method)": [[53, "pycbc.transforms.ChirpDistanceToDistance.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.distancetochirpdistance method)": [[53, "pycbc.transforms.DistanceToChirpDistance.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.exponent method)": [[53, "pycbc.transforms.Exponent.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.log method)": [[53, "pycbc.transforms.Log.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.logistic method)": [[53, "pycbc.transforms.Logistic.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.logit method)": [[53, "pycbc.transforms.Logit.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.mass1mass2tomchirpeta method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpEta.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.mass1mass2tomchirpq method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpQ.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.mchirpetatomass1mass2 method)": [[53, "pycbc.transforms.MchirpEtaToMass1Mass2.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.mchirpqtomass1mass2 method)": [[53, "pycbc.transforms.MchirpQToMass1Mass2.inverse_jacobian"]], "inverse_transform() (pycbc.transforms.alignedmassspintocartesianspin method)": [[53, "pycbc.transforms.AlignedMassSpinToCartesianSpin.inverse_transform"]], "inverse_transform() (pycbc.transforms.basetransform method)": [[53, "pycbc.transforms.BaseTransform.inverse_transform"]], "inverse_transform() (pycbc.transforms.cartesianspintoalignedmassspin method)": [[53, "pycbc.transforms.CartesianSpinToAlignedMassSpin.inverse_transform"]], "inverse_transform() (pycbc.transforms.cartesianspintoprecessionmassspin method)": [[53, "pycbc.transforms.CartesianSpinToPrecessionMassSpin.inverse_transform"]], "inverse_transform() (pycbc.transforms.cartesiantospherical method)": [[53, "pycbc.transforms.CartesianToSpherical.inverse_transform"]], "inverse_transform() (pycbc.transforms.chiptocartesianspin method)": [[53, "pycbc.transforms.ChiPToCartesianSpin.inverse_transform"]], "inverse_transform() (pycbc.transforms.chirpdistancetodistance method)": [[53, "pycbc.transforms.ChirpDistanceToDistance.inverse_transform"]], "inverse_transform() (pycbc.transforms.distancetochirpdistance method)": [[53, "pycbc.transforms.DistanceToChirpDistance.inverse_transform"]], "inverse_transform() (pycbc.transforms.exponent method)": [[53, "pycbc.transforms.Exponent.inverse_transform"]], "inverse_transform() (pycbc.transforms.geotolisa method)": [[53, "pycbc.transforms.GEOToLISA.inverse_transform"]], "inverse_transform() (pycbc.transforms.geotossb method)": [[53, "pycbc.transforms.GEOToSSB.inverse_transform"]], "inverse_transform() (pycbc.transforms.lisatogeo method)": [[53, "pycbc.transforms.LISAToGEO.inverse_transform"]], "inverse_transform() (pycbc.transforms.lisatossb method)": [[53, "pycbc.transforms.LISAToSSB.inverse_transform"]], "inverse_transform() (pycbc.transforms.log method)": [[53, "pycbc.transforms.Log.inverse_transform"]], "inverse_transform() (pycbc.transforms.logistic method)": [[53, "pycbc.transforms.Logistic.inverse_transform"]], "inverse_transform() (pycbc.transforms.logit method)": [[53, "pycbc.transforms.Logit.inverse_transform"]], "inverse_transform() (pycbc.transforms.mass1mass2tomchirpeta method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpEta.inverse_transform"]], "inverse_transform() (pycbc.transforms.mass1mass2tomchirpq method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpQ.inverse_transform"]], "inverse_transform() (pycbc.transforms.mchirpetatomass1mass2 method)": [[53, "pycbc.transforms.MchirpEtaToMass1Mass2.inverse_transform"]], "inverse_transform() (pycbc.transforms.mchirpqtomass1mass2 method)": [[53, "pycbc.transforms.MchirpQToMass1Mass2.inverse_transform"]], "inverse_transform() (pycbc.transforms.precessionmassspintocartesianspin method)": [[53, "pycbc.transforms.PrecessionMassSpinToCartesianSpin.inverse_transform"]], "inverse_transform() (pycbc.transforms.ssbtogeo method)": [[53, "pycbc.transforms.SSBToGEO.inverse_transform"]], "inverse_transform() (pycbc.transforms.ssbtolisa method)": [[53, "pycbc.transforms.SSBToLISA.inverse_transform"]], "inverse_transform() (pycbc.transforms.sphericaltocartesian method)": [[53, "pycbc.transforms.SphericalToCartesian.inverse_transform"]], "invq_from_mass1_mass2() (in module pycbc.conversions)": [[53, "pycbc.conversions.invq_from_mass1_mass2"]], "is_main_process() (in module pycbc.pool)": [[53, "pycbc.pool.is_main_process"]], "jacobian() (pycbc.transforms.basetransform method)": [[53, "pycbc.transforms.BaseTransform.jacobian"]], "jacobian() (pycbc.transforms.cartesianspintoalignedmassspin method)": [[53, "pycbc.transforms.CartesianSpinToAlignedMassSpin.jacobian"]], "jacobian() (pycbc.transforms.cartesianspintoprecessionmassspin method)": [[53, "pycbc.transforms.CartesianSpinToPrecessionMassSpin.jacobian"]], "jacobian() (pycbc.transforms.cartesiantospherical method)": [[53, "pycbc.transforms.CartesianToSpherical.jacobian"]], "jacobian() (pycbc.transforms.chiptocartesianspin method)": [[53, "pycbc.transforms.ChiPToCartesianSpin.jacobian"]], "jacobian() (pycbc.transforms.chirpdistancetodistance method)": [[53, "pycbc.transforms.ChirpDistanceToDistance.jacobian"]], "jacobian() (pycbc.transforms.customtransform method)": [[53, "pycbc.transforms.CustomTransform.jacobian"]], "jacobian() (pycbc.transforms.distancetochirpdistance method)": [[53, "pycbc.transforms.DistanceToChirpDistance.jacobian"]], "jacobian() (pycbc.transforms.exponent method)": [[53, "pycbc.transforms.Exponent.jacobian"]], "jacobian() (pycbc.transforms.log method)": [[53, "pycbc.transforms.Log.jacobian"]], "jacobian() (pycbc.transforms.logistic method)": [[53, "pycbc.transforms.Logistic.jacobian"]], "jacobian() (pycbc.transforms.logit method)": [[53, "pycbc.transforms.Logit.jacobian"]], "jacobian() (pycbc.transforms.mass1mass2tomchirpeta method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpEta.jacobian"]], "jacobian() (pycbc.transforms.mass1mass2tomchirpq method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpQ.jacobian"]], "jacobian() (pycbc.transforms.mchirpetatomass1mass2 method)": [[53, "pycbc.transforms.MchirpEtaToMass1Mass2.jacobian"]], "jacobian() (pycbc.transforms.mchirpqtomass1mass2 method)": [[53, "pycbc.transforms.MchirpQToMass1Mass2.jacobian"]], "jframe_to_l0frame() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.jframe_to_l0frame"]], "kerr_lightring() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.kerr_lightring"]], "kerr_lightring_velocity() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.kerr_lightring_velocity"]], "l0frame_to_jframe() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.l0frame_to_jframe"]], "lal() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.lal"]], "lambda_data (pycbc.transforms.lambdafromtovfile property)": [[53, "pycbc.transforms.LambdaFromTOVFile.lambda_data"]], "lambda_from_mass_tov_file() (in module pycbc.conversions)": [[53, "pycbc.conversions.lambda_from_mass_tov_file"]], "lambda_from_tov_data() (pycbc.transforms.lambdafromtovfile static method)": [[53, "pycbc.transforms.LambdaFromTOVFile.lambda_from_tov_data"]], "lambda_param (pycbc.transforms.lambdafrommultipletovfiles property)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.lambda_param"]], "lambda_param (pycbc.transforms.lambdafromtovfile property)": [[53, "pycbc.transforms.LambdaFromTOVFile.lambda_param"]], "lambda_tilde() (in module pycbc.conversions)": [[53, "pycbc.conversions.lambda_tilde"]], "larger() (pycbc.boundaries.closedbound method)": [[53, "pycbc.boundaries.ClosedBound.larger"]], "larger() (pycbc.boundaries.openbound method)": [[53, "pycbc.boundaries.OpenBound.larger"]], "light_travel_time_to_detector() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.light_travel_time_to_detector"]], "load_detector_config() (in module pycbc.detector)": [[53, "pycbc.detector.load_detector_config"]], "logistic() (pycbc.transforms.logit static method)": [[53, "pycbc.transforms.Logit.logistic"]], "logit() (pycbc.transforms.logit static method)": [[53, "pycbc.transforms.Logit.logit"]], "logregularize() (pycbc.bin_utils.binnedarray method)": [[53, "pycbc.bin_utils.BinnedArray.logregularize"]], "logregularize() (pycbc.bin_utils.binnedratios method)": [[53, "pycbc.bin_utils.BinnedRatios.logregularize"]], "lower() (pycbc.bin_utils.bins method)": [[53, "pycbc.bin_utils.Bins.lower"]], "lower() (pycbc.bin_utils.irregularbins method)": [[53, "pycbc.bin_utils.IrregularBins.lower"]], "lower() (pycbc.bin_utils.linearbins method)": [[53, "pycbc.bin_utils.LinearBins.lower"]], "lower() (pycbc.bin_utils.linearplusoverflowbins method)": [[53, "pycbc.bin_utils.LinearPlusOverflowBins.lower"]], "lower() (pycbc.bin_utils.logarithmicbins method)": [[53, "pycbc.bin_utils.LogarithmicBins.lower"]], "lower() (pycbc.bin_utils.logarithmicplusoverflowbins method)": [[53, "pycbc.bin_utils.LogarithmicPlusOverflowBins.lower"]], "lower() (pycbc.bin_utils.ndbins method)": [[53, "pycbc.bin_utils.NDBins.lower"]], "makedir() (in module pycbc)": [[53, "pycbc.makedir"]], "map() (pycbc.pool.broadcastpool method)": [[53, "pycbc.pool.BroadcastPool.map"]], "map() (pycbc.pool.singlepool method)": [[53, "pycbc.pool.SinglePool.map"]], "map_file (pycbc.transforms.lambdafrommultipletovfiles property)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.map_file"]], "mass1_from_mass2_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass1_from_mass2_eta"]], "mass1_from_mchirp_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass1_from_mchirp_eta"]], "mass1_from_mchirp_q() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass1_from_mchirp_q"]], "mass1_from_mtotal_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass1_from_mtotal_eta"]], "mass1_from_mtotal_q() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass1_from_mtotal_q"]], "mass1_from_tau0_tau3() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass1_from_tau0_tau3"]], "mass1_mass2_spin1z_spin2z_to_beta_sigma_gamma() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mass1_mass2_spin1z_spin2z_to_beta_sigma_gamma"]], "mass1_mass2_to_mchirp_eta() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mass1_mass2_to_mchirp_eta"]], "mass1_mass2_to_mtotal_eta() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mass1_mass2_to_mtotal_eta"]], "mass1_mass2_to_tau0_tau3() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mass1_mass2_to_tau0_tau3"]], "mass2_from_mass1_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass2_from_mass1_eta"]], "mass2_from_mchirp_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass2_from_mchirp_eta"]], "mass2_from_mchirp_q() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass2_from_mchirp_q"]], "mass2_from_mtotal_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass2_from_mtotal_eta"]], "mass2_from_mtotal_q() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass2_from_mtotal_q"]], "mass2_from_tau0_tau3() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass2_from_tau0_tau3"]], "mass_data (pycbc.transforms.lambdafromtovfile property)": [[53, "pycbc.transforms.LambdaFromTOVFile.mass_data"]], "mass_param (pycbc.transforms.lambdafrommultipletovfiles property)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.mass_param"]], "mass_param (pycbc.transforms.lambdafromtovfile property)": [[53, "pycbc.transforms.LambdaFromTOVFile.mass_param"]], "max (pycbc.boundaries.bounds property)": [[53, "pycbc.boundaries.Bounds.max"]], "mchirp_eta_to_mass1_mass2() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mchirp_eta_to_mass1_mass2"]], "mchirp_from_mass1_mass2() (in module pycbc.conversions)": [[53, "pycbc.conversions.mchirp_from_mass1_mass2"]], "mchirp_from_tau0() (in module pycbc.conversions)": [[53, "pycbc.conversions.mchirp_from_tau0"]], "mchirp_mass1_to_mass2() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mchirp_mass1_to_mass2"]], "mchirp_q_to_mass1_mass2() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mchirp_q_to_mass1_mass2"]], "mean_efficiency_volume() (in module pycbc.rate)": [[53, "pycbc.rate.mean_efficiency_volume"]], "meco2() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.meco2"]], "meco_velocity() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.meco_velocity"]], "megaparsecs_to_meters() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.megaparsecs_to_meters"]], "min (pycbc.boundaries.bounds property)": [[53, "pycbc.boundaries.Bounds.min"]], "module": [[53, "module-pycbc"], [53, "module-pycbc.bin_utils"], [53, "module-pycbc.boundaries"], [53, "module-pycbc.conversions"], [53, "module-pycbc.cosmology"], [53, "module-pycbc.detector"], [53, "module-pycbc.dq"], [53, "module-pycbc.libutils"], [53, "module-pycbc.mchirp_area"], [53, "module-pycbc.opt"], [53, "module-pycbc.pnutils"], [53, "module-pycbc.pool"], [53, "module-pycbc.rate"], [53, "module-pycbc.scheme"], [53, "module-pycbc.sensitivity"], [53, "module-pycbc.transforms"], [53, "module-pycbc.version"], [54, "module-pycbc.catalog"], [54, "module-pycbc.catalog.catalog"], [55, "module-pycbc.coordinates"], [55, "module-pycbc.coordinates.base"], [55, "module-pycbc.coordinates.space"], [56, "module-pycbc.distributions"], [56, "module-pycbc.distributions.angular"], [56, "module-pycbc.distributions.arbitrary"], [56, "module-pycbc.distributions.bounded"], [56, "module-pycbc.distributions.constraints"], [56, "module-pycbc.distributions.external"], [56, "module-pycbc.distributions.fixedsamples"], [56, "module-pycbc.distributions.gaussian"], [56, "module-pycbc.distributions.joint"], [56, "module-pycbc.distributions.mass"], [56, "module-pycbc.distributions.power_law"], [56, "module-pycbc.distributions.qnm"], [56, "module-pycbc.distributions.sky_location"], [56, "module-pycbc.distributions.spins"], [56, "module-pycbc.distributions.uniform"], [56, "module-pycbc.distributions.uniform_log"], [56, "module-pycbc.distributions.utils"], [57, "module-pycbc.events"], [57, "module-pycbc.events.coherent"], [57, "module-pycbc.events.coinc"], [57, "module-pycbc.events.coinc_rate"], [57, "module-pycbc.events.cuts"], [57, "module-pycbc.events.eventmgr"], [57, "module-pycbc.events.eventmgr_cython"], [57, "module-pycbc.events.ranking"], [57, "module-pycbc.events.significance"], [57, "module-pycbc.events.simd_threshold_cython"], [57, "module-pycbc.events.single"], [57, "module-pycbc.events.stat"], [57, "module-pycbc.events.threshold_cpu"], [57, "module-pycbc.events.trigger_fits"], [57, "module-pycbc.events.triggers"], [57, "module-pycbc.events.veto"], [58, "module-pycbc.fft"], [58, "module-pycbc.fft.backend_cpu"], [58, "module-pycbc.fft.backend_mkl"], [58, "module-pycbc.fft.backend_support"], [58, "module-pycbc.fft.class_api"], [58, "module-pycbc.fft.core"], [58, "module-pycbc.fft.fft_callback"], [58, "module-pycbc.fft.fftw"], [58, "module-pycbc.fft.fftw_pruned"], [58, "module-pycbc.fft.fftw_pruned_cython"], [58, "module-pycbc.fft.func_api"], [58, "module-pycbc.fft.mkl"], [58, "module-pycbc.fft.npfft"], [58, "module-pycbc.fft.parser_support"], [59, "module-pycbc.filter"], [59, "module-pycbc.filter.autocorrelation"], [59, "module-pycbc.filter.matchedfilter"], [59, "module-pycbc.filter.matchedfilter_cpu"], [59, "module-pycbc.filter.matchedfilter_numpy"], [59, "module-pycbc.filter.qtransform"], [59, "module-pycbc.filter.resample"], [59, "module-pycbc.filter.simd_correlate"], [59, "module-pycbc.filter.simd_correlate_cython"], [59, "module-pycbc.filter.zpk"], [60, "module-pycbc.frame"], [60, "module-pycbc.frame.frame"], [60, "module-pycbc.frame.gwosc"], [60, "module-pycbc.frame.store"], [61, "module-pycbc.inference"], [61, "module-pycbc.inference.burn_in"], [61, "module-pycbc.inference.entropy"], [61, "module-pycbc.inference.evidence"], [61, "module-pycbc.inference.gelman_rubin"], [61, "module-pycbc.inference.geweke"], [61, "module-pycbc.inference.option_utils"], [62, "module-pycbc.inference.io"], [62, "module-pycbc.inference.io.base_hdf"], [62, "module-pycbc.inference.io.base_mcmc"], [62, "module-pycbc.inference.io.base_multitemper"], [62, "module-pycbc.inference.io.base_nested_sampler"], [62, "module-pycbc.inference.io.base_sampler"], [62, "module-pycbc.inference.io.dynesty"], [62, "module-pycbc.inference.io.emcee"], [62, "module-pycbc.inference.io.emcee_pt"], [62, "module-pycbc.inference.io.epsie"], [62, "module-pycbc.inference.io.multinest"], [62, "module-pycbc.inference.io.nessai"], [62, "module-pycbc.inference.io.posterior"], [62, "module-pycbc.inference.io.ptemcee"], [62, "module-pycbc.inference.io.snowline"], [62, "module-pycbc.inference.io.txt"], [62, "module-pycbc.inference.io.ultranest"], [63, "module-pycbc.inference.jump"], [63, "module-pycbc.inference.jump.angular"], [63, "module-pycbc.inference.jump.bounded_normal"], [63, "module-pycbc.inference.jump.discrete"], [63, "module-pycbc.inference.jump.normal"], [64, "module-pycbc.inference.models"], [64, "module-pycbc.inference.models.analytic"], [64, "module-pycbc.inference.models.base"], [64, "module-pycbc.inference.models.base_data"], [64, "module-pycbc.inference.models.brute_marg"], [64, "module-pycbc.inference.models.data_utils"], [64, "module-pycbc.inference.models.gated_gaussian_noise"], [64, "module-pycbc.inference.models.gaussian_noise"], [64, "module-pycbc.inference.models.hierarchical"], [64, "module-pycbc.inference.models.marginalized_gaussian_noise"], [64, "module-pycbc.inference.models.relbin"], [64, "module-pycbc.inference.models.relbin_cpu"], [64, "module-pycbc.inference.models.single_template"], [64, "module-pycbc.inference.models.tools"], [65, "module-pycbc.inference.sampler"], [65, "module-pycbc.inference.sampler.base"], [65, "module-pycbc.inference.sampler.base_cube"], [65, "module-pycbc.inference.sampler.base_mcmc"], [65, "module-pycbc.inference.sampler.base_multitemper"], [65, "module-pycbc.inference.sampler.dummy"], [65, "module-pycbc.inference.sampler.dynesty"], [65, "module-pycbc.inference.sampler.emcee"], [65, "module-pycbc.inference.sampler.emcee_pt"], [65, "module-pycbc.inference.sampler.epsie"], [65, "module-pycbc.inference.sampler.multinest"], [65, "module-pycbc.inference.sampler.nessai"], [65, "module-pycbc.inference.sampler.ptemcee"], [65, "module-pycbc.inference.sampler.refine"], [65, "module-pycbc.inference.sampler.snowline"], [65, "module-pycbc.inference.sampler.ultranest"], [66, "module-pycbc.inject"], [66, "module-pycbc.inject.inject"], [66, "module-pycbc.inject.injfilterrejector"], [67, "module-pycbc.io"], [67, "module-pycbc.io.hdf"], [67, "module-pycbc.io.ligolw"], [67, "module-pycbc.io.live"], [67, "module-pycbc.io.record"], [68, "module-pycbc.live"], [68, "module-pycbc.live.snr_optimizer"], [69, "module-pycbc.neutron_stars"], [69, "module-pycbc.neutron_stars.eos_utils"], [69, "module-pycbc.neutron_stars.pg_isso_solver"], [70, "module-pycbc.noise"], [70, "module-pycbc.noise.gaussian"], [70, "module-pycbc.noise.reproduceable"], [71, "module-pycbc.population"], [71, "module-pycbc.population.fgmc_functions"], [71, "module-pycbc.population.fgmc_laguerre"], [71, "module-pycbc.population.fgmc_plots"], [71, "module-pycbc.population.live_pastro"], [71, "module-pycbc.population.live_pastro_utils"], [71, "module-pycbc.population.population_models"], [71, "module-pycbc.population.rates_functions"], [71, "module-pycbc.population.scale_injections"], [72, "module-pycbc.psd"], [72, "module-pycbc.psd.analytical"], [72, "module-pycbc.psd.analytical_space"], [72, "module-pycbc.psd.estimate"], [72, "module-pycbc.psd.read"], [72, "module-pycbc.psd.variation"], [73, "module-pycbc.results"], [73, "module-pycbc.results.color"], [73, "module-pycbc.results.dq"], [73, "module-pycbc.results.followup"], [73, "module-pycbc.results.layout"], [73, "module-pycbc.results.metadata"], [73, "module-pycbc.results.mpld3_utils"], [73, "module-pycbc.results.plot"], [73, "module-pycbc.results.psd"], [73, "module-pycbc.results.pygrb_plotting_utils"], [73, "module-pycbc.results.pygrb_postprocessing_utils"], [73, "module-pycbc.results.render"], [73, "module-pycbc.results.scatter_histograms"], [73, "module-pycbc.results.snr"], [73, "module-pycbc.results.str_utils"], [73, "module-pycbc.results.table_utils"], [73, "module-pycbc.results.versioning"], [74, "module-pycbc.strain"], [74, "module-pycbc.strain.calibration"], [74, "module-pycbc.strain.gate"], [74, "module-pycbc.strain.lines"], [74, "module-pycbc.strain.recalibrate"], [74, "module-pycbc.strain.strain"], [75, "module-pycbc.tmpltbank"], [75, "module-pycbc.tmpltbank.bank_conversions"], [75, "module-pycbc.tmpltbank.bank_output_utils"], [75, "module-pycbc.tmpltbank.brute_force_methods"], [75, "module-pycbc.tmpltbank.calc_moments"], [75, "module-pycbc.tmpltbank.coord_utils"], [75, "module-pycbc.tmpltbank.lambda_mapping"], [75, "module-pycbc.tmpltbank.lattice_utils"], [75, "module-pycbc.tmpltbank.option_utils"], [75, "module-pycbc.tmpltbank.partitioned_bank"], [76, "module-pycbc.types"], [76, "module-pycbc.types.aligned"], [76, "module-pycbc.types.array"], [76, "module-pycbc.types.array_cpu"], [76, "module-pycbc.types.config"], [76, "module-pycbc.types.frequencyseries"], [76, "module-pycbc.types.optparse"], [76, "module-pycbc.types.timeseries"], [77, "module-pycbc.vetoes"], [77, "module-pycbc.vetoes.autochisq"], [77, "module-pycbc.vetoes.bank_chisq"], [77, "module-pycbc.vetoes.chisq"], [77, "module-pycbc.vetoes.chisq_cpu"], [77, "module-pycbc.vetoes.sgchisq"], [78, "module-pycbc.waveform"], [78, "module-pycbc.waveform.bank"], [78, "module-pycbc.waveform.compress"], [78, "module-pycbc.waveform.decompress_cpu"], [78, "module-pycbc.waveform.decompress_cpu_cython"], [78, "module-pycbc.waveform.generator"], [78, "module-pycbc.waveform.multiband"], [78, "module-pycbc.waveform.nltides"], [78, "module-pycbc.waveform.parameters"], [78, "module-pycbc.waveform.plugin"], [78, "module-pycbc.waveform.premerger"], [78, "module-pycbc.waveform.ringdown"], [78, "module-pycbc.waveform.sinegauss"], [78, "module-pycbc.waveform.spa_tmplt"], [78, "module-pycbc.waveform.spa_tmplt_cpu"], [78, "module-pycbc.waveform.supernovae"], [78, "module-pycbc.waveform.utils"], [78, "module-pycbc.waveform.utils_cpu"], [78, "module-pycbc.waveform.waveform"], [78, "module-pycbc.waveform.waveform_modes"], [79, "module-pycbc.workflow"], [79, "module-pycbc.workflow.coincidence"], [79, "module-pycbc.workflow.configparser_test"], [79, "module-pycbc.workflow.configuration"], [79, "module-pycbc.workflow.core"], [79, "module-pycbc.workflow.datafind"], [79, "module-pycbc.workflow.dq"], [79, "module-pycbc.workflow.grb_utils"], [79, "module-pycbc.workflow.inference_followups"], [79, "module-pycbc.workflow.injection"], [79, "module-pycbc.workflow.jobsetup"], [79, "module-pycbc.workflow.matched_filter"], [79, "module-pycbc.workflow.minifollowups"], [79, "module-pycbc.workflow.pegasus_sites"], [79, "module-pycbc.workflow.pegasus_workflow"], [79, "module-pycbc.workflow.plotting"], [79, "module-pycbc.workflow.psd"], [79, "module-pycbc.workflow.psdfiles"], [79, "module-pycbc.workflow.segment"], [79, "module-pycbc.workflow.splittable"], [79, "module-pycbc.workflow.tmpltbank"], [79, "module-pycbc.workflow.versioning"]], "mtotal_eta_to_mass1_mass2() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mtotal_eta_to_mass1_mass2"]], "mtotal_from_mass1_mass2() (in module pycbc.conversions)": [[53, "pycbc.conversions.mtotal_from_mass1_mass2"]], "mtotal_from_mchirp_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.mtotal_from_mchirp_eta"]], "mtotal_from_tau0_tau3() (in module pycbc.conversions)": [[53, "pycbc.conversions.mtotal_from_tau0_tau3"]], "name (pycbc.boundaries.closedbound attribute)": [[53, "pycbc.boundaries.ClosedBound.name"]], "name (pycbc.boundaries.openbound attribute)": [[53, "pycbc.boundaries.OpenBound.name"]], "name (pycbc.boundaries.reflectedbound attribute)": [[53, "pycbc.boundaries.ReflectedBound.name"]], "name (pycbc.transforms.aligntotalspin attribute)": [[53, "pycbc.transforms.AlignTotalSpin.name"]], "name (pycbc.transforms.alignedmassspintocartesianspin attribute)": [[53, "pycbc.transforms.AlignedMassSpinToCartesianSpin.name"]], "name (pycbc.transforms.basetransform attribute)": [[53, "pycbc.transforms.BaseTransform.name"]], "name (pycbc.transforms.cartesianspin1tosphericalspin1 attribute)": [[53, "pycbc.transforms.CartesianSpin1ToSphericalSpin1.name"]], "name (pycbc.transforms.cartesianspin2tosphericalspin2 attribute)": [[53, "pycbc.transforms.CartesianSpin2ToSphericalSpin2.name"]], "name (pycbc.transforms.cartesianspintoalignedmassspin attribute)": [[53, "pycbc.transforms.CartesianSpinToAlignedMassSpin.name"]], "name (pycbc.transforms.cartesianspintochip attribute)": [[53, "pycbc.transforms.CartesianSpinToChiP.name"]], "name (pycbc.transforms.cartesianspintoprecessionmassspin attribute)": [[53, "pycbc.transforms.CartesianSpinToPrecessionMassSpin.name"]], "name (pycbc.transforms.cartesiantospherical attribute)": [[53, "pycbc.transforms.CartesianToSpherical.name"]], "name (pycbc.transforms.chiptocartesianspin attribute)": [[53, "pycbc.transforms.ChiPToCartesianSpin.name"]], "name (pycbc.transforms.chirpdistancetodistance attribute)": [[53, "pycbc.transforms.ChirpDistanceToDistance.name"]], "name (pycbc.transforms.customtransform attribute)": [[53, "pycbc.transforms.CustomTransform.name"]], "name (pycbc.transforms.customtransformmultioutputs attribute)": [[53, "pycbc.transforms.CustomTransformMultiOutputs.name"]], "name (pycbc.transforms.distancetochirpdistance attribute)": [[53, "pycbc.transforms.DistanceToChirpDistance.name"]], "name (pycbc.transforms.distancetoredshift attribute)": [[53, "pycbc.transforms.DistanceToRedshift.name"]], "name (pycbc.transforms.exponent attribute)": [[53, "pycbc.transforms.Exponent.name"]], "name (pycbc.transforms.geotolisa attribute)": [[53, "pycbc.transforms.GEOToLISA.name"]], "name (pycbc.transforms.geotossb attribute)": [[53, "pycbc.transforms.GEOToSSB.name"]], "name (pycbc.transforms.lisatogeo attribute)": [[53, "pycbc.transforms.LISAToGEO.name"]], "name (pycbc.transforms.lisatossb attribute)": [[53, "pycbc.transforms.LISAToSSB.name"]], "name (pycbc.transforms.lambdafrommultipletovfiles attribute)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.name"]], "name (pycbc.transforms.lambdafromtovfile attribute)": [[53, "pycbc.transforms.LambdaFromTOVFile.name"]], "name (pycbc.transforms.log attribute)": [[53, "pycbc.transforms.Log.name"]], "name (pycbc.transforms.logistic attribute)": [[53, "pycbc.transforms.Logistic.name"]], "name (pycbc.transforms.logit attribute)": [[53, "pycbc.transforms.Logit.name"]], "name (pycbc.transforms.mass1mass2tomchirpeta attribute)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpEta.name"]], "name (pycbc.transforms.mass1mass2tomchirpq attribute)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpQ.name"]], "name (pycbc.transforms.mchirpetatomass1mass2 attribute)": [[53, "pycbc.transforms.MchirpEtaToMass1Mass2.name"]], "name (pycbc.transforms.mchirpqtomass1mass2 attribute)": [[53, "pycbc.transforms.MchirpQToMass1Mass2.name"]], "name (pycbc.transforms.precessionmassspintocartesianspin attribute)": [[53, "pycbc.transforms.PrecessionMassSpinToCartesianSpin.name"]], "name (pycbc.transforms.ssbtogeo attribute)": [[53, "pycbc.transforms.SSBToGEO.name"]], "name (pycbc.transforms.ssbtolisa attribute)": [[53, "pycbc.transforms.SSBToLISA.name"]], "name (pycbc.transforms.sphericalspin1tocartesianspin1 attribute)": [[53, "pycbc.transforms.SphericalSpin1ToCartesianSpin1.name"]], "name (pycbc.transforms.sphericalspin2tocartesianspin2 attribute)": [[53, "pycbc.transforms.SphericalSpin2ToCartesianSpin2.name"]], "name (pycbc.transforms.sphericaltocartesian attribute)": [[53, "pycbc.transforms.SphericalToCartesian.name"]], "nearest_larger_binary_number() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.nearest_larger_binary_number"]], "nltides_gw_phase_diff_isco() (in module pycbc.conversions)": [[53, "pycbc.conversions.nltides_gw_phase_diff_isco"]], "normalize_pdf() (in module pycbc.rate)": [[53, "pycbc.rate.normalize_pdf"]], "optimal_dec_from_detector() (in module pycbc.conversions)": [[53, "pycbc.conversions.optimal_dec_from_detector"]], "optimal_orientation() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.optimal_orientation"]], "optimal_ra_from_detector() (in module pycbc.conversions)": [[53, "pycbc.conversions.optimal_ra_from_detector"]], "order_transforms() (in module pycbc.transforms)": [[53, "pycbc.transforms.order_transforms"]], "outputvar (pycbc.transforms.log property)": [[53, "pycbc.transforms.Log.outputvar"]], "outputvar (pycbc.transforms.logit property)": [[53, "pycbc.transforms.Logit.outputvar"]], "overhead_antenna_pattern() (in module pycbc.detector)": [[53, "pycbc.detector.overhead_antenna_pattern"]], "parse_flag_str() (in module pycbc.dq)": [[53, "pycbc.dq.parse_flag_str"]], "parse_veto_definer() (in module pycbc.dq)": [[53, "pycbc.dq.parse_veto_definer"]], "parsecs_to_meters() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.parsecs_to_meters"]], "phi1_from_phi_a_phi_s() (in module pycbc.conversions)": [[53, "pycbc.conversions.phi1_from_phi_a_phi_s"]], "phi2_from_phi_a_phi_s() (in module pycbc.conversions)": [[53, "pycbc.conversions.phi2_from_phi_a_phi_s"]], "phi_a() (in module pycbc.conversions)": [[53, "pycbc.conversions.phi_a"]], "phi_from_spinx_spiny() (in module pycbc.conversions)": [[53, "pycbc.conversions.phi_from_spinx_spiny"]], "phi_s() (in module pycbc.conversions)": [[53, "pycbc.conversions.phi_s"]], "pkg_config() (in module pycbc.libutils)": [[53, "pycbc.libutils.pkg_config"]], "pkg_config_check_exists() (in module pycbc.libutils)": [[53, "pycbc.libutils.pkg_config_check_exists"]], "pkg_config_header_strings() (in module pycbc.libutils)": [[53, "pycbc.libutils.pkg_config_header_strings"]], "pkg_config_libdirs() (in module pycbc.libutils)": [[53, "pycbc.libutils.pkg_config_libdirs"]], "ppdets() (in module pycbc.detector)": [[53, "pycbc.detector.ppdets"]], "primary_mass() (in module pycbc.conversions)": [[53, "pycbc.conversions.primary_mass"]], "primary_spin() (in module pycbc.conversions)": [[53, "pycbc.conversions.primary_spin"]], "primary_xi() (in module pycbc.conversions)": [[53, "pycbc.conversions.primary_xi"]], "project_wave() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.project_wave"]], "pycbc": [[53, "module-pycbc"]], "pycbc.bin_utils": [[53, "module-pycbc.bin_utils"]], "pycbc.boundaries": [[53, "module-pycbc.boundaries"]], "pycbc.conversions": [[53, "module-pycbc.conversions"]], "pycbc.cosmology": [[53, "module-pycbc.cosmology"]], "pycbc.detector": [[53, "module-pycbc.detector"]], "pycbc.dq": [[53, "module-pycbc.dq"]], "pycbc.libutils": [[53, "module-pycbc.libutils"]], "pycbc.mchirp_area": [[53, "module-pycbc.mchirp_area"]], "pycbc.opt": [[53, "module-pycbc.opt"]], "pycbc.pnutils": [[53, "module-pycbc.pnutils"]], "pycbc.pool": [[53, "module-pycbc.pool"]], "pycbc.rate": [[53, "module-pycbc.rate"]], "pycbc.scheme": [[53, "module-pycbc.scheme"]], "pycbc.sensitivity": [[53, "module-pycbc.sensitivity"]], "pycbc.transforms": [[53, "module-pycbc.transforms"]], "pycbc.version": [[53, "module-pycbc.version"]], "q_from_mass1_mass2() (in module pycbc.conversions)": [[53, "pycbc.conversions.q_from_mass1_mass2"]], "query_cumulative_flags() (in module pycbc.dq)": [[53, "pycbc.dq.query_cumulative_flags"]], "query_dqsegdb2() (in module pycbc.dq)": [[53, "pycbc.dq.query_dqsegdb2"]], "query_flag() (in module pycbc.dq)": [[53, "pycbc.dq.query_flag"]], "query_str() (in module pycbc.dq)": [[53, "pycbc.dq.query_str"]], "random_string() (in module pycbc)": [[53, "pycbc.random_string"]], "ratio() (pycbc.bin_utils.binnedratios method)": [[53, "pycbc.bin_utils.BinnedRatios.ratio"]], "read_transforms_from_config() (in module pycbc.transforms)": [[53, "pycbc.transforms.read_transforms_from_config"]], "redshift() (in module pycbc.cosmology)": [[53, "pycbc.cosmology.redshift"]], "redshift_estimation() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.redshift_estimation"]], "redshift_from_comoving_volume() (in module pycbc.cosmology)": [[53, "pycbc.cosmology.redshift_from_comoving_volume"]], "reflect() (pycbc.boundaries.reflectedbound method)": [[53, "pycbc.boundaries.ReflectedBound.reflect"]], "reflect_left() (pycbc.boundaries.reflectedbound method)": [[53, "pycbc.boundaries.ReflectedBound.reflect_left"]], "reflect_right() (pycbc.boundaries.reflectedbound method)": [[53, "pycbc.boundaries.ReflectedBound.reflect_right"]], "reflect_well() (in module pycbc.boundaries)": [[53, "pycbc.boundaries.reflect_well"]], "register_clean_cuda() (in module pycbc.scheme)": [[53, "pycbc.scheme.register_clean_cuda"]], "regularize() (pycbc.bin_utils.binnedratios method)": [[53, "pycbc.bin_utils.BinnedRatios.regularize"]], "remnant_mass_from_mass1_mass2_cartesian_spin_eos() (in module pycbc.conversions)": [[53, "pycbc.conversions.remnant_mass_from_mass1_mass2_cartesian_spin_eos"]], "remnant_mass_from_mass1_mass2_spherical_spin_eos() (in module pycbc.conversions)": [[53, "pycbc.conversions.remnant_mass_from_mass1_mass2_spherical_spin_eos"]], "schemed() (in module pycbc.scheme)": [[53, "pycbc.scheme.schemed"]], "secondary_mass() (in module pycbc.conversions)": [[53, "pycbc.conversions.secondary_mass"]], "secondary_spin() (in module pycbc.conversions)": [[53, "pycbc.conversions.secondary_spin"]], "secondary_xi() (in module pycbc.conversions)": [[53, "pycbc.conversions.secondary_xi"]], "set_gmst_reference() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.set_gmst_reference"]], "single_arm_frequency_response() (in module pycbc.detector)": [[53, "pycbc.detector.single_arm_frequency_response"]], "smaller() (pycbc.boundaries.closedbound method)": [[53, "pycbc.boundaries.ClosedBound.smaller"]], "smaller() (pycbc.boundaries.openbound method)": [[53, "pycbc.boundaries.OpenBound.smaller"]], "snr_from_loglr() (in module pycbc.conversions)": [[53, "pycbc.conversions.snr_from_loglr"]], "solar_mass_to_kg() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.solar_mass_to_kg"]], "spin1x_from_xi1_phi_a_phi_s() (in module pycbc.conversions)": [[53, "pycbc.conversions.spin1x_from_xi1_phi_a_phi_s"]], "spin1y_from_xi1_phi_a_phi_s() (in module pycbc.conversions)": [[53, "pycbc.conversions.spin1y_from_xi1_phi_a_phi_s"]], "spin1z_from_mass1_mass2_chi_eff_chi_a() (in module pycbc.conversions)": [[53, "pycbc.conversions.spin1z_from_mass1_mass2_chi_eff_chi_a"]], "spin2x_from_mass1_mass2_xi2_phi_a_phi_s() (in module pycbc.conversions)": [[53, "pycbc.conversions.spin2x_from_mass1_mass2_xi2_phi_a_phi_s"]], "spin2y_from_mass1_mass2_xi2_phi_a_phi_s() (in module pycbc.conversions)": [[53, "pycbc.conversions.spin2y_from_mass1_mass2_xi2_phi_a_phi_s"]], "spin2z_from_mass1_mass2_chi_eff_chi_a() (in module pycbc.conversions)": [[53, "pycbc.conversions.spin2z_from_mass1_mass2_chi_eff_chi_a"]], "spin_from_pulsar_freq() (in module pycbc.conversions)": [[53, "pycbc.conversions.spin_from_pulsar_freq"]], "src_mass_from_z_det_mass() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.src_mass_from_z_det_mass"]], "t2_cutoff_frequency() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.t2_cutoff_frequency"]], "t2_cutoff_velocity() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.t2_cutoff_velocity"]], "t4_cutoff_velocity() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.t4_cutoff_velocity"]], "tau0_from_mass1_mass2() (in module pycbc.conversions)": [[53, "pycbc.conversions.tau0_from_mass1_mass2"]], "tau0_from_mchirp() (in module pycbc.conversions)": [[53, "pycbc.conversions.tau0_from_mchirp"]], "tau0_from_mtotal_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.tau0_from_mtotal_eta"]], "tau0_tau3_to_mass1_mass2() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.tau0_tau3_to_mass1_mass2"]], "tau0_tau3_to_mtotal_eta() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.tau0_tau3_to_mtotal_eta"]], "tau3_from_mass1_mass2() (in module pycbc.conversions)": [[53, "pycbc.conversions.tau3_from_mass1_mass2"]], "tau3_from_mtotal_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.tau3_from_mtotal_eta"]], "tau_from_final_mass_spin() (in module pycbc.conversions)": [[53, "pycbc.conversions.tau_from_final_mass_spin"]], "taulmn_from_other_lmn() (in module pycbc.conversions)": [[53, "pycbc.conversions.taulmn_from_other_lmn"]], "time_delay_from_detector() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.time_delay_from_detector"]], "time_delay_from_detector() (pycbc.detector.lisa method)": [[53, "pycbc.detector.LISA.time_delay_from_detector"]], "time_delay_from_earth_center() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.time_delay_from_earth_center"]], "time_delay_from_earth_center() (pycbc.detector.lisa method)": [[53, "pycbc.detector.LISA.time_delay_from_earth_center"]], "time_delay_from_location() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.time_delay_from_location"]], "time_delay_from_location() (pycbc.detector.lisa method)": [[53, "pycbc.detector.LISA.time_delay_from_location"]], "transform() (pycbc.transforms.aligntotalspin method)": [[53, "pycbc.transforms.AlignTotalSpin.transform"]], "transform() (pycbc.transforms.alignedmassspintocartesianspin method)": [[53, "pycbc.transforms.AlignedMassSpinToCartesianSpin.transform"]], "transform() (pycbc.transforms.basetransform method)": [[53, "pycbc.transforms.BaseTransform.transform"]], "transform() (pycbc.transforms.cartesianspintoalignedmassspin method)": [[53, "pycbc.transforms.CartesianSpinToAlignedMassSpin.transform"]], "transform() (pycbc.transforms.cartesianspintochip method)": [[53, "pycbc.transforms.CartesianSpinToChiP.transform"]], "transform() (pycbc.transforms.cartesianspintoprecessionmassspin method)": [[53, "pycbc.transforms.CartesianSpinToPrecessionMassSpin.transform"]], "transform() (pycbc.transforms.cartesiantospherical method)": [[53, "pycbc.transforms.CartesianToSpherical.transform"]], "transform() (pycbc.transforms.chiptocartesianspin method)": [[53, "pycbc.transforms.ChiPToCartesianSpin.transform"]], "transform() (pycbc.transforms.chirpdistancetodistance method)": [[53, "pycbc.transforms.ChirpDistanceToDistance.transform"]], "transform() (pycbc.transforms.customtransform method)": [[53, "pycbc.transforms.CustomTransform.transform"]], "transform() (pycbc.transforms.customtransformmultioutputs method)": [[53, "pycbc.transforms.CustomTransformMultiOutputs.transform"]], "transform() (pycbc.transforms.distancetochirpdistance method)": [[53, "pycbc.transforms.DistanceToChirpDistance.transform"]], "transform() (pycbc.transforms.distancetoredshift method)": [[53, "pycbc.transforms.DistanceToRedshift.transform"]], "transform() (pycbc.transforms.exponent method)": [[53, "pycbc.transforms.Exponent.transform"]], "transform() (pycbc.transforms.geotolisa method)": [[53, "pycbc.transforms.GEOToLISA.transform"]], "transform() (pycbc.transforms.geotossb method)": [[53, "pycbc.transforms.GEOToSSB.transform"]], "transform() (pycbc.transforms.lisatogeo method)": [[53, "pycbc.transforms.LISAToGEO.transform"]], "transform() (pycbc.transforms.lisatossb method)": [[53, "pycbc.transforms.LISAToSSB.transform"]], "transform() (pycbc.transforms.lambdafrommultipletovfiles method)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.transform"]], "transform() (pycbc.transforms.lambdafromtovfile method)": [[53, "pycbc.transforms.LambdaFromTOVFile.transform"]], "transform() (pycbc.transforms.log method)": [[53, "pycbc.transforms.Log.transform"]], "transform() (pycbc.transforms.logistic method)": [[53, "pycbc.transforms.Logistic.transform"]], "transform() (pycbc.transforms.logit method)": [[53, "pycbc.transforms.Logit.transform"]], "transform() (pycbc.transforms.mass1mass2tomchirpeta method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpEta.transform"]], "transform() (pycbc.transforms.mass1mass2tomchirpq method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpQ.transform"]], "transform() (pycbc.transforms.mchirpetatomass1mass2 method)": [[53, "pycbc.transforms.MchirpEtaToMass1Mass2.transform"]], "transform() (pycbc.transforms.mchirpqtomass1mass2 method)": [[53, "pycbc.transforms.MchirpQToMass1Mass2.transform"]], "transform() (pycbc.transforms.precessionmassspintocartesianspin method)": [[53, "pycbc.transforms.PrecessionMassSpinToCartesianSpin.transform"]], "transform() (pycbc.transforms.ssbtogeo method)": [[53, "pycbc.transforms.SSBToGEO.transform"]], "transform() (pycbc.transforms.ssbtolisa method)": [[53, "pycbc.transforms.SSBToLISA.transform"]], "transform() (pycbc.transforms.sphericaltocartesian method)": [[53, "pycbc.transforms.SphericalToCartesian.transform"]], "upper() (pycbc.bin_utils.bins method)": [[53, "pycbc.bin_utils.Bins.upper"]], "upper() (pycbc.bin_utils.irregularbins method)": [[53, "pycbc.bin_utils.IrregularBins.upper"]], "upper() (pycbc.bin_utils.linearbins method)": [[53, "pycbc.bin_utils.LinearBins.upper"]], "upper() (pycbc.bin_utils.linearplusoverflowbins method)": [[53, "pycbc.bin_utils.LinearPlusOverflowBins.upper"]], "upper() (pycbc.bin_utils.logarithmicbins method)": [[53, "pycbc.bin_utils.LogarithmicBins.upper"]], "upper() (pycbc.bin_utils.logarithmicplusoverflowbins method)": [[53, "pycbc.bin_utils.LogarithmicPlusOverflowBins.upper"]], "upper() (pycbc.bin_utils.ndbins method)": [[53, "pycbc.bin_utils.NDBins.upper"]], "use_mpi() (in module pycbc.pool)": [[53, "pycbc.pool.use_mpi"]], "velocity_to_frequency() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.velocity_to_frequency"]], "verify_optimization_options() (in module pycbc.opt)": [[53, "pycbc.opt.verify_optimization_options"]], "verify_processing_options() (in module pycbc.scheme)": [[53, "pycbc.scheme.verify_processing_options"]], "volume_binned_pylal() (in module pycbc.sensitivity)": [[53, "pycbc.sensitivity.volume_binned_pylal"]], "volume_montecarlo() (in module pycbc.sensitivity)": [[53, "pycbc.sensitivity.volume_montecarlo"]], "volume_shell() (in module pycbc.sensitivity)": [[53, "pycbc.sensitivity.volume_shell"]], "volume_to_distance_with_errors() (in module pycbc.sensitivity)": [[53, "pycbc.sensitivity.volume_to_distance_with_errors"]], "xi1_from_spin1x_spin1y() (in module pycbc.conversions)": [[53, "pycbc.conversions.xi1_from_spin1x_spin1y"]], "xi2_from_mass1_mass2_spin2x_spin2y() (in module pycbc.conversions)": [[53, "pycbc.conversions.xi2_from_mass1_mass2_spin2x_spin2y"]], "catalog (class in pycbc.catalog)": [[54, "pycbc.catalog.Catalog"]], "merger (class in pycbc.catalog)": [[54, "pycbc.catalog.Merger"]], "find_event_in_catalog() (in module pycbc.catalog)": [[54, "pycbc.catalog.find_event_in_catalog"]], "get_source() (in module pycbc.catalog.catalog)": [[54, "pycbc.catalog.catalog.get_source"]], "list_catalogs() (in module pycbc.catalog.catalog)": [[54, "pycbc.catalog.catalog.list_catalogs"]], "lvk_catalogs() (in module pycbc.catalog.catalog)": [[54, "pycbc.catalog.catalog.lvk_catalogs"]], "median1d() (pycbc.catalog.catalog method)": [[54, "pycbc.catalog.Catalog.median1d"]], "median1d() (pycbc.catalog.merger method)": [[54, "pycbc.catalog.Merger.median1d"]], "populate_catalogs() (in module pycbc.catalog.catalog)": [[54, "pycbc.catalog.catalog.populate_catalogs"]], "pycbc.catalog": [[54, "module-pycbc.catalog"]], "pycbc.catalog.catalog": [[54, "module-pycbc.catalog.catalog"]], "strain() (pycbc.catalog.merger method)": [[54, "pycbc.catalog.Merger.strain"]], "cartesian_to_spherical() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.cartesian_to_spherical"]], "cartesian_to_spherical() (in module pycbc.coordinates.base)": [[55, "pycbc.coordinates.base.cartesian_to_spherical"]], "cartesian_to_spherical_azimuthal() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.cartesian_to_spherical_azimuthal"]], "cartesian_to_spherical_azimuthal() (in module pycbc.coordinates.base)": [[55, "pycbc.coordinates.base.cartesian_to_spherical_azimuthal"]], "cartesian_to_spherical_polar() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.cartesian_to_spherical_polar"]], "cartesian_to_spherical_polar() (in module pycbc.coordinates.base)": [[55, "pycbc.coordinates.base.cartesian_to_spherical_polar"]], "cartesian_to_spherical_rho() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.cartesian_to_spherical_rho"]], "cartesian_to_spherical_rho() (in module pycbc.coordinates.base)": [[55, "pycbc.coordinates.base.cartesian_to_spherical_rho"]], "earth_position_ssb() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.earth_position_ssb"]], "earth_position_ssb() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.earth_position_ssb"]], "geo_to_lisa() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.geo_to_lisa"]], "geo_to_lisa() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.geo_to_lisa"]], "geo_to_ssb() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.geo_to_ssb"]], "geo_to_ssb() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.geo_to_ssb"]], "lisa_position_ssb() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.lisa_position_ssb"]], "lisa_position_ssb() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.lisa_position_ssb"]], "lisa_to_geo() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.lisa_to_geo"]], "lisa_to_geo() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.lisa_to_geo"]], "lisa_to_ssb() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.lisa_to_ssb"]], "lisa_to_ssb() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.lisa_to_ssb"]], "localization_to_propagation_vector() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.localization_to_propagation_vector"]], "localization_to_propagation_vector() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.localization_to_propagation_vector"]], "polarization_newframe() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.polarization_newframe"]], "polarization_newframe() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.polarization_newframe"]], "propagation_vector_to_localization() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.propagation_vector_to_localization"]], "propagation_vector_to_localization() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.propagation_vector_to_localization"]], "pycbc.coordinates": [[55, "module-pycbc.coordinates"]], "pycbc.coordinates.base": [[55, "module-pycbc.coordinates.base"]], "pycbc.coordinates.space": [[55, "module-pycbc.coordinates.space"]], "rotation_matrix_ssb_to_geo() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.rotation_matrix_ssb_to_geo"]], "rotation_matrix_ssb_to_geo() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.rotation_matrix_ssb_to_geo"]], "rotation_matrix_ssb_to_lisa() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.rotation_matrix_ssb_to_lisa"]], "rotation_matrix_ssb_to_lisa() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.rotation_matrix_ssb_to_lisa"]], "spherical_to_cartesian() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.spherical_to_cartesian"]], "spherical_to_cartesian() (in module pycbc.coordinates.base)": [[55, "pycbc.coordinates.base.spherical_to_cartesian"]], "ssb_to_geo() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.ssb_to_geo"]], "ssb_to_geo() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.ssb_to_geo"]], "ssb_to_lisa() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.ssb_to_lisa"]], "ssb_to_lisa() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.ssb_to_lisa"]], "t_geo_from_ssb() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.t_geo_from_ssb"]], "t_geo_from_ssb() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.t_geo_from_ssb"]], "t_lisa_from_ssb() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.t_lisa_from_ssb"]], "t_lisa_from_ssb() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.t_lisa_from_ssb"]], "t_ssb_from_t_geo() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.t_ssb_from_t_geo"]], "t_ssb_from_t_geo() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.t_ssb_from_t_geo"]], "t_ssb_from_t_lisa() (in module pycbc.coordinates)": [[55, "pycbc.coordinates.t_ssb_from_t_lisa"]], "t_ssb_from_t_lisa() (in module pycbc.coordinates.space)": [[55, "pycbc.coordinates.space.t_ssb_from_t_lisa"]], "arbitrary (class in pycbc.distributions.arbitrary)": [[56, "pycbc.distributions.arbitrary.Arbitrary"]], "boundeddist (class in pycbc.distributions.bounded)": [[56, "pycbc.distributions.bounded.BoundedDist"]], "constraint (class in pycbc.distributions.constraints)": [[56, "pycbc.distributions.constraints.Constraint"]], "cosangle (class in pycbc.distributions.angular)": [[56, "pycbc.distributions.angular.CosAngle"]], "distributionfunctionfromfile (class in pycbc.distributions.external)": [[56, "pycbc.distributions.external.DistributionFunctionFromFile"]], "external (class in pycbc.distributions.external)": [[56, "pycbc.distributions.external.External"]], "fishersky (class in pycbc.distributions.sky_location)": [[56, "pycbc.distributions.sky_location.FisherSky"]], "fixedsamples (class in pycbc.distributions.fixedsamples)": [[56, "pycbc.distributions.fixedsamples.FixedSamples"]], "fromfile (class in pycbc.distributions.arbitrary)": [[56, "pycbc.distributions.arbitrary.FromFile"]], "gaussian (class in pycbc.distributions.gaussian)": [[56, "pycbc.distributions.gaussian.Gaussian"]], "independentchipchieff (class in pycbc.distributions.spins)": [[56, "pycbc.distributions.spins.IndependentChiPChiEff"]], "jointdistribution (class in pycbc.distributions.joint)": [[56, "pycbc.distributions.joint.JointDistribution"]], "mchirpfromuniformmass1mass2 (class in pycbc.distributions.mass)": [[56, "pycbc.distributions.mass.MchirpfromUniformMass1Mass2"]], "qfromuniformmass1mass2 (class in pycbc.distributions.mass)": [[56, "pycbc.distributions.mass.QfromUniformMass1Mass2"]], "sinangle (class in pycbc.distributions.angular)": [[56, "pycbc.distributions.angular.SinAngle"]], "supernovaeconvexhull (class in pycbc.distributions.constraints)": [[56, "pycbc.distributions.constraints.SupernovaeConvexHull"]], "uniform (class in pycbc.distributions.uniform)": [[56, "pycbc.distributions.uniform.Uniform"]], "uniformangle (class in pycbc.distributions.angular)": [[56, "pycbc.distributions.angular.UniformAngle"]], "uniformf0tau (class in pycbc.distributions.qnm)": [[56, "pycbc.distributions.qnm.UniformF0Tau"]], "uniformlog10 (class in pycbc.distributions.uniform_log)": [[56, "pycbc.distributions.uniform_log.UniformLog10"]], "uniformpowerlaw (class in pycbc.distributions.power_law)": [[56, "pycbc.distributions.power_law.UniformPowerLaw"]], "uniformradius (class in pycbc.distributions.power_law)": [[56, "pycbc.distributions.power_law.UniformRadius"]], "uniformsky (class in pycbc.distributions.sky_location)": [[56, "pycbc.distributions.sky_location.UniformSky"]], "uniformsolidangle (class in pycbc.distributions.angular)": [[56, "pycbc.distributions.angular.UniformSolidAngle"]], "apply_boundary_conditions() (pycbc.distributions.angular.uniformangle method)": [[56, "pycbc.distributions.angular.UniformAngle.apply_boundary_conditions"]], "apply_boundary_conditions() (pycbc.distributions.angular.uniformsolidangle method)": [[56, "pycbc.distributions.angular.UniformSolidAngle.apply_boundary_conditions"]], "apply_boundary_conditions() (pycbc.distributions.bounded.boundeddist method)": [[56, "pycbc.distributions.bounded.BoundedDist.apply_boundary_conditions"]], "apply_boundary_conditions() (pycbc.distributions.external.external method)": [[56, "pycbc.distributions.external.External.apply_boundary_conditions"]], "apply_boundary_conditions() (pycbc.distributions.fixedsamples.fixedsamples method)": [[56, "pycbc.distributions.fixedsamples.FixedSamples.apply_boundary_conditions"]], "apply_boundary_conditions() (pycbc.distributions.joint.jointdistribution method)": [[56, "pycbc.distributions.joint.JointDistribution.apply_boundary_conditions"]], "apply_boundary_conditions() (pycbc.distributions.spins.independentchipchieff method)": [[56, "pycbc.distributions.spins.IndependentChiPChiEff.apply_boundary_conditions"]], "azimuthal_angle (pycbc.distributions.angular.uniformsolidangle property)": [[56, "pycbc.distributions.angular.UniformSolidAngle.azimuthal_angle"]], "bounded_from_config() (in module pycbc.distributions.bounded)": [[56, "pycbc.distributions.bounded.bounded_from_config"]], "bounds (pycbc.distributions.angular.uniformsolidangle property)": [[56, "pycbc.distributions.angular.UniformSolidAngle.bounds"]], "bounds (pycbc.distributions.bounded.boundeddist property)": [[56, "pycbc.distributions.bounded.BoundedDist.bounds"]], "bounds (pycbc.distributions.joint.jointdistribution property)": [[56, "pycbc.distributions.joint.JointDistribution.bounds"]], "cdf() (pycbc.distributions.gaussian.gaussian method)": [[56, "pycbc.distributions.gaussian.Gaussian.cdf"]], "cdfinv() (pycbc.distributions.bounded.boundeddist method)": [[56, "pycbc.distributions.bounded.BoundedDist.cdfinv"]], "cdfinv() (pycbc.distributions.fixedsamples.fixedsamples method)": [[56, "pycbc.distributions.fixedsamples.FixedSamples.cdfinv"]], "cdfinv() (pycbc.distributions.joint.jointdistribution method)": [[56, "pycbc.distributions.joint.JointDistribution.cdfinv"]], "constraints (pycbc.distributions.joint.jointdistribution attribute)": [[56, "pycbc.distributions.joint.JointDistribution.constraints"]], "contains() (pycbc.distributions.joint.jointdistribution method)": [[56, "pycbc.distributions.joint.JointDistribution.contains"]], "cyclic (pycbc.distributions.joint.jointdistribution property)": [[56, "pycbc.distributions.joint.JointDistribution.cyclic"]], "dim (pycbc.distributions.power_law.uniformpowerlaw attribute)": [[56, "pycbc.distributions.power_law.UniformPowerLaw.dim"]], "distributions (pycbc.distributions.joint.jointdistribution attribute)": [[56, "pycbc.distributions.joint.JointDistribution.distributions"]], "domain (pycbc.distributions.angular.uniformangle property)": [[56, "pycbc.distributions.angular.UniformAngle.domain"]], "draw_samples_from_config() (in module pycbc.distributions.utils)": [[56, "pycbc.distributions.utils.draw_samples_from_config"]], "filename (pycbc.distributions.arbitrary.fromfile property)": [[56, "pycbc.distributions.arbitrary.FromFile.filename"]], "from_config() (pycbc.distributions.angular.uniformangle class method)": [[56, "pycbc.distributions.angular.UniformAngle.from_config"]], "from_config() (pycbc.distributions.angular.uniformsolidangle class method)": [[56, "pycbc.distributions.angular.UniformSolidAngle.from_config"]], "from_config() (pycbc.distributions.arbitrary.arbitrary class method)": [[56, "pycbc.distributions.arbitrary.Arbitrary.from_config"]], "from_config() (pycbc.distributions.arbitrary.fromfile class method)": [[56, "pycbc.distributions.arbitrary.FromFile.from_config"]], "from_config() (pycbc.distributions.bounded.boundeddist class method)": [[56, "pycbc.distributions.bounded.BoundedDist.from_config"]], "from_config() (pycbc.distributions.external.external class method)": [[56, "pycbc.distributions.external.External.from_config"]], "from_config() (pycbc.distributions.fixedsamples.fixedsamples class method)": [[56, "pycbc.distributions.fixedsamples.FixedSamples.from_config"]], "from_config() (pycbc.distributions.gaussian.gaussian class method)": [[56, "pycbc.distributions.gaussian.Gaussian.from_config"]], "from_config() (pycbc.distributions.mass.qfromuniformmass1mass2 class method)": [[56, "pycbc.distributions.mass.QfromUniformMass1Mass2.from_config"]], "from_config() (pycbc.distributions.power_law.uniformpowerlaw class method)": [[56, "pycbc.distributions.power_law.UniformPowerLaw.from_config"]], "from_config() (pycbc.distributions.qnm.uniformf0tau class method)": [[56, "pycbc.distributions.qnm.UniformF0Tau.from_config"]], "from_config() (pycbc.distributions.sky_location.fishersky class method)": [[56, "pycbc.distributions.sky_location.FisherSky.from_config"]], "from_config() (pycbc.distributions.spins.independentchipchieff class method)": [[56, "pycbc.distributions.spins.IndependentChiPChiEff.from_config"]], "from_config() (pycbc.distributions.uniform.uniform class method)": [[56, "pycbc.distributions.uniform.Uniform.from_config"]], "get_arrays_from_file() (pycbc.distributions.arbitrary.fromfile method)": [[56, "pycbc.distributions.arbitrary.FromFile.get_arrays_from_file"]], "get_kde_from_arrays() (pycbc.distributions.arbitrary.arbitrary static method)": [[56, "pycbc.distributions.arbitrary.Arbitrary.get_kde_from_arrays"]], "get_param_bounds_from_config() (in module pycbc.distributions.bounded)": [[56, "pycbc.distributions.bounded.get_param_bounds_from_config"]], "kde (pycbc.distributions.arbitrary.arbitrary property)": [[56, "pycbc.distributions.arbitrary.Arbitrary.kde"]], "kde (pycbc.distributions.arbitrary.fromfile attribute)": [[56, "pycbc.distributions.arbitrary.FromFile.kde"]], "lognorm (pycbc.distributions.arbitrary.fromfile attribute)": [[56, "pycbc.distributions.arbitrary.FromFile.lognorm"]], "lognorm (pycbc.distributions.mass.qfromuniformmass1mass2 property)": [[56, "pycbc.distributions.mass.QfromUniformMass1Mass2.lognorm"]], "lognorm (pycbc.distributions.power_law.uniformpowerlaw property)": [[56, "pycbc.distributions.power_law.UniformPowerLaw.lognorm"]], "lognorm (pycbc.distributions.uniform.uniform property)": [[56, "pycbc.distributions.uniform.Uniform.lognorm"]], "logpdf() (pycbc.distributions.bounded.boundeddist method)": [[56, "pycbc.distributions.bounded.BoundedDist.logpdf"]], "mean (pycbc.distributions.gaussian.gaussian property)": [[56, "pycbc.distributions.gaussian.Gaussian.mean"]], "name (pycbc.distributions.angular.cosangle attribute)": [[56, "pycbc.distributions.angular.CosAngle.name"]], "name (pycbc.distributions.angular.sinangle attribute)": [[56, "pycbc.distributions.angular.SinAngle.name"]], "name (pycbc.distributions.angular.uniformangle attribute)": [[56, "pycbc.distributions.angular.UniformAngle.name"]], "name (pycbc.distributions.angular.uniformsolidangle attribute)": [[56, "pycbc.distributions.angular.UniformSolidAngle.name"]], "name (pycbc.distributions.arbitrary.arbitrary attribute)": [[56, "pycbc.distributions.arbitrary.Arbitrary.name"]], "name (pycbc.distributions.arbitrary.fromfile attribute)": [[56, "pycbc.distributions.arbitrary.FromFile.name"]], "name (pycbc.distributions.constraints.constraint attribute)": [[56, "pycbc.distributions.constraints.Constraint.name"]], "name (pycbc.distributions.constraints.supernovaeconvexhull attribute)": [[56, "pycbc.distributions.constraints.SupernovaeConvexHull.name"]], "name (pycbc.distributions.external.distributionfunctionfromfile attribute)": [[56, "pycbc.distributions.external.DistributionFunctionFromFile.name"]], "name (pycbc.distributions.external.external attribute)": [[56, "pycbc.distributions.external.External.name"]], "name (pycbc.distributions.fixedsamples.fixedsamples attribute)": [[56, "pycbc.distributions.fixedsamples.FixedSamples.name"]], "name (pycbc.distributions.gaussian.gaussian attribute)": [[56, "pycbc.distributions.gaussian.Gaussian.name"]], "name (pycbc.distributions.joint.jointdistribution attribute)": [[56, "pycbc.distributions.joint.JointDistribution.name"]], "name (pycbc.distributions.mass.mchirpfromuniformmass1mass2 attribute)": [[56, "pycbc.distributions.mass.MchirpfromUniformMass1Mass2.name"]], "name (pycbc.distributions.mass.qfromuniformmass1mass2 attribute)": [[56, "pycbc.distributions.mass.QfromUniformMass1Mass2.name"]], "name (pycbc.distributions.power_law.uniformpowerlaw attribute)": [[56, "pycbc.distributions.power_law.UniformPowerLaw.name"]], "name (pycbc.distributions.power_law.uniformradius attribute)": [[56, "pycbc.distributions.power_law.UniformRadius.name"]], "name (pycbc.distributions.qnm.uniformf0tau attribute)": [[56, "pycbc.distributions.qnm.UniformF0Tau.name"]], "name (pycbc.distributions.sky_location.fishersky attribute)": [[56, "pycbc.distributions.sky_location.FisherSky.name"]], "name (pycbc.distributions.sky_location.uniformsky attribute)": [[56, "pycbc.distributions.sky_location.UniformSky.name"]], "name (pycbc.distributions.spins.independentchipchieff attribute)": [[56, "pycbc.distributions.spins.IndependentChiPChiEff.name"]], "name (pycbc.distributions.uniform.uniform attribute)": [[56, "pycbc.distributions.uniform.Uniform.name"]], "name (pycbc.distributions.uniform_log.uniformlog10 attribute)": [[56, "pycbc.distributions.uniform_log.UniformLog10.name"]], "norm (pycbc.distributions.arbitrary.fromfile attribute)": [[56, "pycbc.distributions.arbitrary.FromFile.norm"]], "norm (pycbc.distributions.mass.qfromuniformmass1mass2 property)": [[56, "pycbc.distributions.mass.QfromUniformMass1Mass2.norm"]], "norm (pycbc.distributions.power_law.uniformpowerlaw property)": [[56, "pycbc.distributions.power_law.UniformPowerLaw.norm"]], "norm (pycbc.distributions.uniform.uniform property)": [[56, "pycbc.distributions.uniform.Uniform.norm"]], "params (pycbc.distributions.arbitrary.arbitrary property)": [[56, "pycbc.distributions.arbitrary.Arbitrary.params"]], "params (pycbc.distributions.bounded.boundeddist property)": [[56, "pycbc.distributions.bounded.BoundedDist.params"]], "params (pycbc.distributions.sky_location.fishersky property)": [[56, "pycbc.distributions.sky_location.FisherSky.params"]], "pdf() (pycbc.distributions.bounded.boundeddist method)": [[56, "pycbc.distributions.bounded.BoundedDist.pdf"]], "polar_angle (pycbc.distributions.angular.uniformsolidangle property)": [[56, "pycbc.distributions.angular.UniformSolidAngle.polar_angle"]], "prior_from_config() (in module pycbc.distributions.utils)": [[56, "pycbc.distributions.utils.prior_from_config"]], "pycbc.distributions": [[56, "module-pycbc.distributions"]], "pycbc.distributions.angular": [[56, "module-pycbc.distributions.angular"]], "pycbc.distributions.arbitrary": [[56, "module-pycbc.distributions.arbitrary"]], "pycbc.distributions.bounded": [[56, "module-pycbc.distributions.bounded"]], "pycbc.distributions.constraints": [[56, "module-pycbc.distributions.constraints"]], "pycbc.distributions.external": [[56, "module-pycbc.distributions.external"]], "pycbc.distributions.fixedsamples": [[56, "module-pycbc.distributions.fixedsamples"]], "pycbc.distributions.gaussian": [[56, "module-pycbc.distributions.gaussian"]], "pycbc.distributions.joint": [[56, "module-pycbc.distributions.joint"]], "pycbc.distributions.mass": [[56, "module-pycbc.distributions.mass"]], "pycbc.distributions.power_law": [[56, "module-pycbc.distributions.power_law"]], "pycbc.distributions.qnm": [[56, "module-pycbc.distributions.qnm"]], "pycbc.distributions.sky_location": [[56, "module-pycbc.distributions.sky_location"]], "pycbc.distributions.spins": [[56, "module-pycbc.distributions.spins"]], "pycbc.distributions.uniform": [[56, "module-pycbc.distributions.uniform"]], "pycbc.distributions.uniform_log": [[56, "module-pycbc.distributions.uniform_log"]], "pycbc.distributions.utils": [[56, "module-pycbc.distributions.utils"]], "read_constraints_from_config() (in module pycbc.distributions)": [[56, "pycbc.distributions.read_constraints_from_config"]], "read_distributions_from_config() (in module pycbc.distributions)": [[56, "pycbc.distributions.read_distributions_from_config"]], "read_params_from_config() (in module pycbc.distributions)": [[56, "pycbc.distributions.read_params_from_config"]], "required_parameters (pycbc.distributions.constraints.supernovaeconvexhull attribute)": [[56, "pycbc.distributions.constraints.SupernovaeConvexHull.required_parameters"]], "rvs() (pycbc.distributions.arbitrary.arbitrary method)": [[56, "pycbc.distributions.arbitrary.Arbitrary.rvs"]], "rvs() (pycbc.distributions.bounded.boundeddist method)": [[56, "pycbc.distributions.bounded.BoundedDist.rvs"]], "rvs() (pycbc.distributions.external.external method)": [[56, "pycbc.distributions.external.External.rvs"]], "rvs() (pycbc.distributions.fixedsamples.fixedsamples method)": [[56, "pycbc.distributions.fixedsamples.FixedSamples.rvs"]], "rvs() (pycbc.distributions.joint.jointdistribution method)": [[56, "pycbc.distributions.joint.JointDistribution.rvs"]], "rvs() (pycbc.distributions.mass.qfromuniformmass1mass2 method)": [[56, "pycbc.distributions.mass.QfromUniformMass1Mass2.rvs"]], "rvs() (pycbc.distributions.qnm.uniformf0tau method)": [[56, "pycbc.distributions.qnm.UniformF0Tau.rvs"]], "rvs() (pycbc.distributions.sky_location.fishersky method)": [[56, "pycbc.distributions.sky_location.FisherSky.rvs"]], "rvs() (pycbc.distributions.spins.independentchipchieff method)": [[56, "pycbc.distributions.spins.IndependentChiPChiEff.rvs"]], "set_bandwidth() (pycbc.distributions.arbitrary.arbitrary method)": [[56, "pycbc.distributions.arbitrary.Arbitrary.set_bandwidth"]], "var (pycbc.distributions.gaussian.gaussian property)": [[56, "pycbc.distributions.gaussian.Gaussian.var"]], "variable_args (pycbc.distributions.joint.jointdistribution attribute)": [[56, "pycbc.distributions.joint.JointDistribution.variable_args"]], "well_reflected (pycbc.distributions.joint.jointdistribution property)": [[56, "pycbc.distributions.joint.JointDistribution.well_reflected"]], "within_constraints() (pycbc.distributions.joint.jointdistribution method)": [[56, "pycbc.distributions.joint.JointDistribution.within_constraints"]], "cputhresholdcluster (class in pycbc.events.threshold_cpu)": [[57, "pycbc.events.threshold_cpu.CPUThresholdCluster"]], "coincexpirebuffer (class in pycbc.events.coinc)": [[57, "pycbc.events.coinc.CoincExpireBuffer"]], "dqexpfitfgbgkdestatistic (class in pycbc.events.stat)": [[57, "pycbc.events.stat.DQExpFitFgBgKDEStatistic"]], "dqexpfitfgbgnormstatistic (class in pycbc.events.stat)": [[57, "pycbc.events.stat.DQExpFitFgBgNormStatistic"]], "eventmanager (class in pycbc.events.eventmgr)": [[57, "pycbc.events.eventmgr.EventManager"]], "eventmanagercoherent (class in pycbc.events.eventmgr)": [[57, "pycbc.events.eventmgr.EventManagerCoherent"]], "eventmanagermultidet (class in pycbc.events.eventmgr)": [[57, "pycbc.events.eventmgr.EventManagerMultiDet"]], "expfitbgratestatistic (class in pycbc.events.stat)": [[57, "pycbc.events.stat.ExpFitBgRateStatistic"]], "expfitcombinedsnr (class in pycbc.events.stat)": [[57, "pycbc.events.stat.ExpFitCombinedSNR"]], "expfitfgbgkdestatistic (class in pycbc.events.stat)": [[57, "pycbc.events.stat.ExpFitFgBgKDEStatistic"]], "expfitfgbgnormbbhstatistic (class in pycbc.events.stat)": [[57, "pycbc.events.stat.ExpFitFgBgNormBBHStatistic"]], "expfitfgbgnormstatistic (class in pycbc.events.stat)": [[57, "pycbc.events.stat.ExpFitFgBgNormStatistic"]], "expfitstatistic (class in pycbc.events.stat)": [[57, "pycbc.events.stat.ExpFitStatistic"]], "ks_test() (in module pycbc.events.trigger_fits)": [[57, "pycbc.events.trigger_fits.KS_test"]], "livecoinctimeslidebackgroundestimator (class in pycbc.events.coinc)": [[57, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator"]], "livesingle (class in pycbc.events.single)": [[57, "pycbc.events.single.LiveSingle"]], "multiringbuffer (class in pycbc.events.coinc)": [[57, "pycbc.events.coinc.MultiRingBuffer"]], "phasetdexpfitstatistic (class in pycbc.events.stat)": [[57, "pycbc.events.stat.PhaseTDExpFitStatistic"]], "phasetdstatistic (class in pycbc.events.stat)": [[57, "pycbc.events.stat.PhaseTDStatistic"]], "quadraturesumstatistic (class in pycbc.events.stat)": [[57, "pycbc.events.stat.QuadratureSumStatistic"]], "stat (class in pycbc.events.stat)": [[57, "pycbc.events.stat.Stat"]], "thresholdcluster (class in pycbc.events.eventmgr)": [[57, "pycbc.events.eventmgr.ThresholdCluster"]], "add() (pycbc.events.coinc.coincexpirebuffer method)": [[57, "pycbc.events.coinc.CoincExpireBuffer.add"]], "add() (pycbc.events.coinc.multiringbuffer method)": [[57, "pycbc.events.coinc.MultiRingBuffer.add"]], "add_singles() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator method)": [[57, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.add_singles"]], "add_template_events() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.add_template_events"]], "add_template_events_to_network() (pycbc.events.eventmgr.eventmanagercoherent method)": [[57, "pycbc.events.eventmgr.EventManagerCoherent.add_template_events_to_network"]], "add_template_network_events() (pycbc.events.eventmgr.eventmanagercoherent method)": [[57, "pycbc.events.eventmgr.EventManagerCoherent.add_template_network_events"]], "add_template_params() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.add_template_params"]], "advance_time() (pycbc.events.coinc.multiringbuffer method)": [[57, "pycbc.events.coinc.MultiRingBuffer.advance_time"]], "apply_far_limit() (in module pycbc.events.significance)": [[57, "pycbc.events.significance.apply_far_limit"]], "apply_template_cuts() (in module pycbc.events.cuts)": [[57, "pycbc.events.cuts.apply_template_cuts"]], "apply_template_fit_cut() (in module pycbc.events.cuts)": [[57, "pycbc.events.cuts.apply_template_fit_cut"]], "apply_trigger_cuts() (in module pycbc.events.cuts)": [[57, "pycbc.events.cuts.apply_trigger_cuts"]], "assign_dq_rates() (pycbc.events.stat.dqexpfitfgbgnormstatistic method)": [[57, "pycbc.events.stat.DQExpFitFgBgNormStatistic.assign_dq_rates"]], "assign_fits() (pycbc.events.stat.expfitstatistic method)": [[57, "pycbc.events.stat.ExpFitStatistic.assign_fits"]], "assign_kdes() (pycbc.events.stat.expfitfgbgkdestatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgKDEStatistic.assign_kdes"]], "assign_median_sigma() (pycbc.events.stat.expfitfgbgnormstatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgNormStatistic.assign_median_sigma"]], "assign_template_bins() (pycbc.events.stat.dqexpfitfgbgnormstatistic method)": [[57, "pycbc.events.stat.DQExpFitFgBgNormStatistic.assign_template_bins"]], "background_bin_from_string() (in module pycbc.events.coinc)": [[57, "pycbc.events.coinc.background_bin_from_string"]], "background_time (pycbc.events.coinc.livecoinctimeslidebackgroundestimator property)": [[57, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.background_time"]], "backout_last() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator method)": [[57, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.backout_last"]], "bank_bins_from_cli() (in module pycbc.events.triggers)": [[57, "pycbc.events.triggers.bank_bins_from_cli"]], "calculate_ifar() (pycbc.events.single.livesingle method)": [[57, "pycbc.events.single.LiveSingle.calculate_ifar"]], "check() (pycbc.events.single.livesingle method)": [[57, "pycbc.events.single.LiveSingle.check"]], "check_expired_triggers() (pycbc.events.coinc.multiringbuffer method)": [[57, "pycbc.events.coinc.MultiRingBuffer.check_expired_triggers"]], "check_significance_options() (in module pycbc.events.significance)": [[57, "pycbc.events.significance.check_significance_options"]], "check_update_cuts() (in module pycbc.events.cuts)": [[57, "pycbc.events.cuts.check_update_cuts"]], "chisq_threshold() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.chisq_threshold"]], "cluster_coincs() (in module pycbc.events.coinc)": [[57, "pycbc.events.coinc.cluster_coincs"]], "cluster_coincs_multiifo() (in module pycbc.events.coinc)": [[57, "pycbc.events.coinc.cluster_coincs_multiifo"]], "cluster_over_time() (in module pycbc.events.coinc)": [[57, "pycbc.events.coinc.cluster_over_time"]], "cluster_reduce() (in module pycbc.events.eventmgr)": [[57, "pycbc.events.eventmgr.cluster_reduce"]], "cluster_template_events() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.cluster_template_events"]], "cluster_template_events_single_ifo() (pycbc.events.eventmgr.eventmanagermultidet method)": [[57, "pycbc.events.eventmgr.EventManagerMultiDet.cluster_template_events_single_ifo"]], "cluster_template_network_events() (pycbc.events.eventmgr.eventmanagercoherent method)": [[57, "pycbc.events.eventmgr.EventManagerCoherent.cluster_template_network_events"]], "coherent_snr() (in module pycbc.events.coherent)": [[57, "pycbc.events.coherent.coherent_snr"]], "coinc_old() (pycbc.events.stat.expfitstatistic method)": [[57, "pycbc.events.stat.ExpFitStatistic.coinc_OLD"]], "coinc_old() (pycbc.events.stat.phasetdexpfitstatistic method)": [[57, "pycbc.events.stat.PhaseTDExpFitStatistic.coinc_OLD"]], "coinc_lim_for_thresh() (pycbc.events.stat.dqexpfitfgbgkdestatistic method)": [[57, "pycbc.events.stat.DQExpFitFgBgKDEStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.expfitbgratestatistic method)": [[57, "pycbc.events.stat.ExpFitBgRateStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.expfitcombinedsnr method)": [[57, "pycbc.events.stat.ExpFitCombinedSNR.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.expfitfgbgkdestatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgKDEStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.expfitfgbgnormbbhstatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgNormBBHStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.expfitfgbgnormstatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgNormStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.expfitstatistic method)": [[57, "pycbc.events.stat.ExpFitStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.phasetdexpfitstatistic method)": [[57, "pycbc.events.stat.PhaseTDExpFitStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.phasetdstatistic method)": [[57, "pycbc.events.stat.PhaseTDStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.quadraturesumstatistic method)": [[57, "pycbc.events.stat.QuadratureSumStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.stat method)": [[57, "pycbc.events.stat.Stat.coinc_lim_for_thresh"]], "coinc_lim_for_thresh_old() (pycbc.events.stat.expfitstatistic method)": [[57, "pycbc.events.stat.ExpFitStatistic.coinc_lim_for_thresh_OLD"]], "coinc_lim_for_thresh_old() (pycbc.events.stat.phasetdexpfitstatistic method)": [[57, "pycbc.events.stat.PhaseTDExpFitStatistic.coinc_lim_for_thresh_OLD"]], "coincbuffer_expireelements() (in module pycbc.events.eventmgr_cython)": [[57, "pycbc.events.eventmgr_cython.coincbuffer_expireelements"]], "coincbuffer_numgreater() (in module pycbc.events.eventmgr_cython)": [[57, "pycbc.events.eventmgr_cython.coincbuffer_numgreater"]], "coincident_snr() (in module pycbc.events.coherent)": [[57, "pycbc.events.coherent.coincident_snr"]], "combination_noise_lograte() (in module pycbc.events.coinc_rate)": [[57, "pycbc.events.coinc_rate.combination_noise_lograte"]], "combination_noise_rate() (in module pycbc.events.coinc_rate)": [[57, "pycbc.events.coinc_rate.combination_noise_rate"]], "consolidate_events() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.consolidate_events"]], "convert_inputstr() (in module pycbc.events.cuts)": [[57, "pycbc.events.cuts.convert_inputstr"]], "count_n_louder() (in module pycbc.events.significance)": [[57, "pycbc.events.significance.count_n_louder"]], "cum_fit() (in module pycbc.events.trigger_fits)": [[57, "pycbc.events.trigger_fits.cum_fit"]], "data (pycbc.events.coinc.coincexpirebuffer property)": [[57, "pycbc.events.coinc.CoincExpireBuffer.data"]], "data() (pycbc.events.coinc.multiringbuffer method)": [[57, "pycbc.events.coinc.MultiRingBuffer.data"]], "digest_significance_options() (in module pycbc.events.significance)": [[57, "pycbc.events.significance.digest_significance_options"]], "discard_last() (pycbc.events.coinc.multiringbuffer method)": [[57, "pycbc.events.coinc.MultiRingBuffer.discard_last"]], "effsnr() (in module pycbc.events.ranking)": [[57, "pycbc.events.ranking.effsnr"]], "expire_vector() (pycbc.events.coinc.multiringbuffer method)": [[57, "pycbc.events.coinc.MultiRingBuffer.expire_vector"]], "exponential_fitalpha() (in module pycbc.events.trigger_fits)": [[57, "pycbc.events.trigger_fits.exponential_fitalpha"]], "filled_time (pycbc.events.coinc.multiringbuffer property)": [[57, "pycbc.events.coinc.MultiRingBuffer.filled_time"]], "finalize_events() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.finalize_events"]], "finalize_template_events() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.finalize_template_events"]], "finalize_template_events() (pycbc.events.eventmgr.eventmanagercoherent method)": [[57, "pycbc.events.eventmgr.EventManagerCoherent.finalize_template_events"]], "finalize_template_events() (pycbc.events.eventmgr.eventmanagermultidet method)": [[57, "pycbc.events.eventmgr.EventManagerMultiDet.finalize_template_events"]], "find_dq_noise_rate() (pycbc.events.stat.dqexpfitfgbgnormstatistic method)": [[57, "pycbc.events.stat.DQExpFitFgBgNormStatistic.find_dq_noise_rate"]], "find_dq_state_by_time() (pycbc.events.stat.dqexpfitfgbgnormstatistic method)": [[57, "pycbc.events.stat.DQExpFitFgBgNormStatistic.find_dq_state_by_time"]], "find_fits() (pycbc.events.stat.expfitstatistic method)": [[57, "pycbc.events.stat.ExpFitStatistic.find_fits"]], "find_kdes() (pycbc.events.stat.expfitfgbgkdestatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgKDEStatistic.find_kdes"]], "findchirp_cluster_over_window() (in module pycbc.events.eventmgr)": [[57, "pycbc.events.eventmgr.findchirp_cluster_over_window"]], "findchirp_cluster_over_window_cython() (in module pycbc.events.eventmgr_cython)": [[57, "pycbc.events.eventmgr_cython.findchirp_cluster_over_window_cython"]], "fit_above_thresh() (in module pycbc.events.trigger_fits)": [[57, "pycbc.events.trigger_fits.fit_above_thresh"]], "fit_fn() (in module pycbc.events.trigger_fits)": [[57, "pycbc.events.trigger_fits.fit_fn"]], "from_cli() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator class method)": [[57, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.from_cli"]], "from_cli() (pycbc.events.single.livesingle class method)": [[57, "pycbc.events.single.LiveSingle.from_cli"]], "from_multi_ifo_interface() (pycbc.events.eventmgr.eventmanager class method)": [[57, "pycbc.events.eventmgr.EventManager.from_multi_ifo_interface"]], "get_coinc_indexes() (in module pycbc.events.coherent)": [[57, "pycbc.events.coherent.get_coinc_indexes"]], "get_coinc_triggers() (in module pycbc.events.coherent)": [[57, "pycbc.events.coherent.get_coinc_triggers"]], "get_far() (in module pycbc.events.significance)": [[57, "pycbc.events.significance.get_far"]], "get_found_param() (in module pycbc.events.triggers)": [[57, "pycbc.events.triggers.get_found_param"]], "get_hist() (pycbc.events.stat.phasetdstatistic method)": [[57, "pycbc.events.stat.PhaseTDStatistic.get_hist"]], "get_inj_param() (in module pycbc.events.triggers)": [[57, "pycbc.events.triggers.get_inj_param"]], "get_mass_spin() (in module pycbc.events.triggers)": [[57, "pycbc.events.triggers.get_mass_spin"]], "get_n_louder() (in module pycbc.events.significance)": [[57, "pycbc.events.significance.get_n_louder"]], "get_newsnr() (in module pycbc.events.ranking)": [[57, "pycbc.events.ranking.get_newsnr"]], "get_newsnr_sgveto() (in module pycbc.events.ranking)": [[57, "pycbc.events.ranking.get_newsnr_sgveto"]], "get_newsnr_sgveto_psdvar() (in module pycbc.events.ranking)": [[57, "pycbc.events.ranking.get_newsnr_sgveto_psdvar"]], "get_newsnr_sgveto_psdvar_scaled() (in module pycbc.events.ranking)": [[57, "pycbc.events.ranking.get_newsnr_sgveto_psdvar_scaled"]], "get_newsnr_sgveto_psdvar_scaled_threshold() (in module pycbc.events.ranking)": [[57, "pycbc.events.ranking.get_newsnr_sgveto_psdvar_scaled_threshold"]], "get_newsnr_sgveto_psdvar_threshold() (in module pycbc.events.ranking)": [[57, "pycbc.events.ranking.get_newsnr_sgveto_psdvar_threshold"]], "get_param() (in module pycbc.events.triggers)": [[57, "pycbc.events.triggers.get_param"]], "get_projection_matrix() (in module pycbc.events.coherent)": [[57, "pycbc.events.coherent.get_projection_matrix"]], "get_ref_vals() (pycbc.events.stat.expfitstatistic method)": [[57, "pycbc.events.stat.ExpFitStatistic.get_ref_vals"]], "get_segment_definer_comments() (in module pycbc.events.veto)": [[57, "pycbc.events.veto.get_segment_definer_comments"]], "get_sngl_ranking() (pycbc.events.stat.stat method)": [[57, "pycbc.events.stat.Stat.get_sngl_ranking"]], "get_sngls_ranking_from_trigs() (in module pycbc.events.ranking)": [[57, "pycbc.events.ranking.get_sngls_ranking_from_trigs"]], "get_snr() (in module pycbc.events.ranking)": [[57, "pycbc.events.ranking.get_snr"]], "get_statistic() (in module pycbc.events.stat)": [[57, "pycbc.events.stat.get_statistic"]], "get_statistic_from_opts() (in module pycbc.events.stat)": [[57, "pycbc.events.stat.get_statistic_from_opts"]], "ifar() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator method)": [[57, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.ifar"]], "ifar_opt_to_far_limit() (in module pycbc.events.significance)": [[57, "pycbc.events.significance.ifar_opt_to_far_limit"]], "increment() (pycbc.events.coinc.coincexpirebuffer method)": [[57, "pycbc.events.coinc.CoincExpireBuffer.increment"]], "indices_outside_segments() (in module pycbc.events.veto)": [[57, "pycbc.events.veto.indices_outside_segments"]], "indices_outside_times() (in module pycbc.events.veto)": [[57, "pycbc.events.veto.indices_outside_times"]], "indices_within_segments() (in module pycbc.events.veto)": [[57, "pycbc.events.veto.indices_within_segments"]], "indices_within_times() (in module pycbc.events.veto)": [[57, "pycbc.events.veto.indices_within_times"]], "ingest_cuts_option_group() (in module pycbc.events.cuts)": [[57, "pycbc.events.cuts.ingest_cuts_option_group"]], "insert_args() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator static method)": [[57, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.insert_args"]], "insert_args() (pycbc.events.single.livesingle static method)": [[57, "pycbc.events.single.LiveSingle.insert_args"]], "insert_bank_bins_option_group() (in module pycbc.events.triggers)": [[57, "pycbc.events.triggers.insert_bank_bins_option_group"]], "insert_cuts_option_group() (in module pycbc.events.cuts)": [[57, "pycbc.events.cuts.insert_cuts_option_group"]], "insert_significance_option_group() (in module pycbc.events.significance)": [[57, "pycbc.events.significance.insert_significance_option_group"]], "insert_statistic_option_group() (in module pycbc.events.stat)": [[57, "pycbc.events.stat.insert_statistic_option_group"]], "kde_ratio() (pycbc.events.stat.dqexpfitfgbgkdestatistic method)": [[57, "pycbc.events.stat.DQExpFitFgBgKDEStatistic.kde_ratio"]], "kde_ratio() (pycbc.events.stat.expfitfgbgkdestatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgKDEStatistic.kde_ratio"]], "keep_loudest_in_interval() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.keep_loudest_in_interval"]], "keep_near_injection() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.keep_near_injection"]], "lognoiserate() (pycbc.events.stat.dqexpfitfgbgnormstatistic method)": [[57, "pycbc.events.stat.DQExpFitFgBgNormStatistic.lognoiserate"]], "lognoiserate() (pycbc.events.stat.expfitfgbgnormstatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgNormStatistic.lognoiserate"]], "lognoiserate() (pycbc.events.stat.expfitstatistic method)": [[57, "pycbc.events.stat.ExpFitStatistic.lognoiserate"]], "logsignalrate() (pycbc.events.stat.dqexpfitfgbgkdestatistic method)": [[57, "pycbc.events.stat.DQExpFitFgBgKDEStatistic.logsignalrate"]], "logsignalrate() (pycbc.events.stat.expfitfgbgkdestatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgKDEStatistic.logsignalrate"]], "logsignalrate() (pycbc.events.stat.expfitfgbgnormbbhstatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgNormBBHStatistic.logsignalrate"]], "logsignalrate() (pycbc.events.stat.phasetdstatistic method)": [[57, "pycbc.events.stat.PhaseTDStatistic.logsignalrate"]], "logsignalrateinternals_compute2detrate() (in module pycbc.events.eventmgr_cython)": [[57, "pycbc.events.eventmgr_cython.logsignalrateinternals_compute2detrate"]], "logsignalrateinternals_computepsignalbins() (in module pycbc.events.eventmgr_cython)": [[57, "pycbc.events.eventmgr_cython.logsignalrateinternals_computepsignalbins"]], "make_output_dir() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.make_output_dir"]], "mean_if_greater_than_zero() (in module pycbc.events.coinc)": [[57, "pycbc.events.coinc.mean_if_greater_than_zero"]], "multiifo_noise_coincident_area() (in module pycbc.events.coinc_rate)": [[57, "pycbc.events.coinc_rate.multiifo_noise_coincident_area"]], "multiifo_noise_lograte() (in module pycbc.events.coinc_rate)": [[57, "pycbc.events.coinc_rate.multiifo_noise_lograte"]], "multiifo_signal_coincident_area() (in module pycbc.events.coinc_rate)": [[57, "pycbc.events.coinc_rate.multiifo_signal_coincident_area"]], "n_louder_from_fit() (in module pycbc.events.significance)": [[57, "pycbc.events.significance.n_louder_from_fit"]], "nbytes (pycbc.events.coinc.coincexpirebuffer property)": [[57, "pycbc.events.coinc.CoincExpireBuffer.nbytes"]], "nbytes (pycbc.events.coinc.multiringbuffer property)": [[57, "pycbc.events.coinc.MultiRingBuffer.nbytes"]], "network_chisq() (in module pycbc.events.coherent)": [[57, "pycbc.events.coherent.network_chisq"]], "new_template() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.new_template"]], "newsnr() (in module pycbc.events.ranking)": [[57, "pycbc.events.ranking.newsnr"]], "newsnr_sgveto() (in module pycbc.events.ranking)": [[57, "pycbc.events.ranking.newsnr_sgveto"]], "newsnr_sgveto_psdvar() (in module pycbc.events.ranking)": [[57, "pycbc.events.ranking.newsnr_sgveto_psdvar"]], "newsnr_sgveto_psdvar_scaled() (in module pycbc.events.ranking)": [[57, "pycbc.events.ranking.newsnr_sgveto_psdvar_scaled"]], "newsnr_sgveto_psdvar_scaled_threshold() (in module pycbc.events.ranking)": [[57, "pycbc.events.ranking.newsnr_sgveto_psdvar_scaled_threshold"]], "newsnr_sgveto_psdvar_threshold() (in module pycbc.events.ranking)": [[57, "pycbc.events.ranking.newsnr_sgveto_psdvar_threshold"]], "newsnr_threshold() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.newsnr_threshold"]], "null_snr() (in module pycbc.events.coherent)": [[57, "pycbc.events.coherent.null_snr"]], "num_elements() (pycbc.events.coinc.multiringbuffer method)": [[57, "pycbc.events.coinc.MultiRingBuffer.num_elements"]], "num_greater() (pycbc.events.coinc.coincexpirebuffer method)": [[57, "pycbc.events.coinc.CoincExpireBuffer.num_greater"]], "parallel_thresh_cluster() (in module pycbc.events.simd_threshold_cython)": [[57, "pycbc.events.simd_threshold_cython.parallel_thresh_cluster"]], "parallel_threshold() (in module pycbc.events.simd_threshold_cython)": [[57, "pycbc.events.simd_threshold_cython.parallel_threshold"]], "parse_statistic_keywords_opt() (in module pycbc.events.stat)": [[57, "pycbc.events.stat.parse_statistic_keywords_opt"]], "pick_best_coinc() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator class method)": [[57, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.pick_best_coinc"]], "positive_float() (in module pycbc.events.significance)": [[57, "pycbc.events.significance.positive_float"]], "power_fitalpha() (in module pycbc.events.trigger_fits)": [[57, "pycbc.events.trigger_fits.power_fitalpha"]], "pycbc.events": [[57, "module-pycbc.events"]], "pycbc.events.coherent": [[57, "module-pycbc.events.coherent"]], "pycbc.events.coinc": [[57, "module-pycbc.events.coinc"]], "pycbc.events.coinc_rate": [[57, "module-pycbc.events.coinc_rate"]], "pycbc.events.cuts": [[57, "module-pycbc.events.cuts"]], "pycbc.events.eventmgr": [[57, "module-pycbc.events.eventmgr"]], "pycbc.events.eventmgr_cython": [[57, "module-pycbc.events.eventmgr_cython"]], "pycbc.events.ranking": [[57, "module-pycbc.events.ranking"]], "pycbc.events.significance": [[57, "module-pycbc.events.significance"]], "pycbc.events.simd_threshold_cython": [[57, "module-pycbc.events.simd_threshold_cython"]], "pycbc.events.single": [[57, "module-pycbc.events.single"]], "pycbc.events.stat": [[57, "module-pycbc.events.stat"]], "pycbc.events.threshold_cpu": [[57, "module-pycbc.events.threshold_cpu"]], "pycbc.events.trigger_fits": [[57, "module-pycbc.events.trigger_fits"]], "pycbc.events.triggers": [[57, "module-pycbc.events.triggers"]], "pycbc.events.veto": [[57, "module-pycbc.events.veto"]], "rank_stat_coinc() (pycbc.events.stat.expfitbgratestatistic method)": [[57, "pycbc.events.stat.ExpFitBgRateStatistic.rank_stat_coinc"]], "rank_stat_coinc() (pycbc.events.stat.expfitcombinedsnr method)": [[57, "pycbc.events.stat.ExpFitCombinedSNR.rank_stat_coinc"]], "rank_stat_coinc() (pycbc.events.stat.expfitfgbgnormbbhstatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgNormBBHStatistic.rank_stat_coinc"]], "rank_stat_coinc() (pycbc.events.stat.expfitfgbgnormstatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgNormStatistic.rank_stat_coinc"]], "rank_stat_coinc() (pycbc.events.stat.expfitstatistic method)": [[57, "pycbc.events.stat.ExpFitStatistic.rank_stat_coinc"]], "rank_stat_coinc() (pycbc.events.stat.phasetdexpfitstatistic method)": [[57, "pycbc.events.stat.PhaseTDExpFitStatistic.rank_stat_coinc"]], "rank_stat_coinc() (pycbc.events.stat.phasetdstatistic method)": [[57, "pycbc.events.stat.PhaseTDStatistic.rank_stat_coinc"]], "rank_stat_coinc() (pycbc.events.stat.quadraturesumstatistic method)": [[57, "pycbc.events.stat.QuadratureSumStatistic.rank_stat_coinc"]], "rank_stat_coinc() (pycbc.events.stat.stat method)": [[57, "pycbc.events.stat.Stat.rank_stat_coinc"]], "rank_stat_single() (pycbc.events.stat.dqexpfitfgbgkdestatistic method)": [[57, "pycbc.events.stat.DQExpFitFgBgKDEStatistic.rank_stat_single"]], "rank_stat_single() (pycbc.events.stat.expfitcombinedsnr method)": [[57, "pycbc.events.stat.ExpFitCombinedSNR.rank_stat_single"]], "rank_stat_single() (pycbc.events.stat.expfitfgbgkdestatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgKDEStatistic.rank_stat_single"]], "rank_stat_single() (pycbc.events.stat.expfitfgbgnormbbhstatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgNormBBHStatistic.rank_stat_single"]], "rank_stat_single() (pycbc.events.stat.expfitfgbgnormstatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgNormStatistic.rank_stat_single"]], "rank_stat_single() (pycbc.events.stat.expfitstatistic method)": [[57, "pycbc.events.stat.ExpFitStatistic.rank_stat_single"]], "rank_stat_single() (pycbc.events.stat.phasetdexpfitstatistic method)": [[57, "pycbc.events.stat.PhaseTDExpFitStatistic.rank_stat_single"]], "rank_stat_single() (pycbc.events.stat.phasetdstatistic method)": [[57, "pycbc.events.stat.PhaseTDStatistic.rank_stat_single"]], "rank_stat_single() (pycbc.events.stat.quadraturesumstatistic method)": [[57, "pycbc.events.stat.QuadratureSumStatistic.rank_stat_single"]], "rank_stat_single() (pycbc.events.stat.stat method)": [[57, "pycbc.events.stat.Stat.rank_stat_single"]], "rayleigh_fitalpha() (in module pycbc.events.trigger_fits)": [[57, "pycbc.events.trigger_fits.rayleigh_fitalpha"]], "reassign_rate() (pycbc.events.stat.expfitbgratestatistic method)": [[57, "pycbc.events.stat.ExpFitBgRateStatistic.reassign_rate"]], "remove() (pycbc.events.coinc.coincexpirebuffer method)": [[57, "pycbc.events.coinc.CoincExpireBuffer.remove"]], "restore_state() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator static method)": [[57, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.restore_state"]], "restore_state() (pycbc.events.eventmgr.eventmanager static method)": [[57, "pycbc.events.eventmgr.EventManager.restore_state"]], "reweight_snr_by_null() (in module pycbc.events.coherent)": [[57, "pycbc.events.coherent.reweight_snr_by_null"]], "reweightedsnr_cut() (in module pycbc.events.coherent)": [[57, "pycbc.events.coherent.reweightedsnr_cut"]], "save_performance() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.save_performance"]], "save_state() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator method)": [[57, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.save_state"]], "save_state() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.save_state"]], "segments_to_start_end() (in module pycbc.events.veto)": [[57, "pycbc.events.veto.segments_to_start_end"]], "select_segments_by_definer() (in module pycbc.events.veto)": [[57, "pycbc.events.veto.select_segments_by_definer"]], "set_singles_buffer() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator method)": [[57, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.set_singles_buffer"]], "setup_segments() (pycbc.events.stat.dqexpfitfgbgnormstatistic method)": [[57, "pycbc.events.stat.DQExpFitFgBgNormStatistic.setup_segments"]], "sigma_multiple_cut_thresh() (in module pycbc.events.cuts)": [[57, "pycbc.events.cuts.sigma_multiple_cut_thresh"]], "single() (pycbc.events.stat.expfitcombinedsnr method)": [[57, "pycbc.events.stat.ExpFitCombinedSNR.single"]], "single() (pycbc.events.stat.expfitfgbgnormbbhstatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgNormBBHStatistic.single"]], "single() (pycbc.events.stat.expfitfgbgnormstatistic method)": [[57, "pycbc.events.stat.ExpFitFgBgNormStatistic.single"]], "single() (pycbc.events.stat.expfitstatistic method)": [[57, "pycbc.events.stat.ExpFitStatistic.single"]], "single() (pycbc.events.stat.phasetdexpfitstatistic method)": [[57, "pycbc.events.stat.PhaseTDExpFitStatistic.single"]], "single() (pycbc.events.stat.phasetdstatistic method)": [[57, "pycbc.events.stat.PhaseTDStatistic.single"]], "single() (pycbc.events.stat.quadraturesumstatistic method)": [[57, "pycbc.events.stat.QuadratureSumStatistic.single"]], "single() (pycbc.events.stat.stat method)": [[57, "pycbc.events.stat.Stat.single"]], "start_end_from_segments() (in module pycbc.events.veto)": [[57, "pycbc.events.veto.start_end_from_segments"]], "start_end_to_segments() (in module pycbc.events.veto)": [[57, "pycbc.events.veto.start_end_to_segments"]], "tail_threshold() (in module pycbc.events.trigger_fits)": [[57, "pycbc.events.trigger_fits.tail_threshold"]], "threshold() (in module pycbc.events.eventmgr)": [[57, "pycbc.events.eventmgr.threshold"]], "threshold() (in module pycbc.events.threshold_cpu)": [[57, "pycbc.events.threshold_cpu.threshold"]], "threshold_and_cluster() (in module pycbc.events.eventmgr)": [[57, "pycbc.events.eventmgr.threshold_and_cluster"]], "threshold_and_cluster() (pycbc.events.threshold_cpu.cputhresholdcluster method)": [[57, "pycbc.events.threshold_cpu.CPUThresholdCluster.threshold_and_cluster"]], "threshold_inline() (in module pycbc.events.threshold_cpu)": [[57, "pycbc.events.threshold_cpu.threshold_inline"]], "threshold_numpy() (in module pycbc.events.threshold_cpu)": [[57, "pycbc.events.threshold_cpu.threshold_numpy"]], "threshold_only() (in module pycbc.events.eventmgr)": [[57, "pycbc.events.eventmgr.threshold_only"]], "threshold_only() (in module pycbc.events.threshold_cpu)": [[57, "pycbc.events.threshold_cpu.threshold_only"]], "threshold_real_numpy() (in module pycbc.events.eventmgr)": [[57, "pycbc.events.eventmgr.threshold_real_numpy"]], "time_coincidence() (in module pycbc.events.coinc)": [[57, "pycbc.events.coinc.time_coincidence"]], "time_multi_coincidence() (in module pycbc.events.coinc)": [[57, "pycbc.events.coinc.time_multi_coincidence"]], "timecluster_cython() (in module pycbc.events.eventmgr_cython)": [[57, "pycbc.events.eventmgr_cython.timecluster_cython"]], "timecoincidence_constructfold() (in module pycbc.events.eventmgr_cython)": [[57, "pycbc.events.eventmgr_cython.timecoincidence_constructfold"]], "timecoincidence_constructidxs() (in module pycbc.events.eventmgr_cython)": [[57, "pycbc.events.eventmgr_cython.timecoincidence_constructidxs"]], "timecoincidence_findidxlen() (in module pycbc.events.eventmgr_cython)": [[57, "pycbc.events.eventmgr_cython.timecoincidence_findidxlen"]], "timecoincidence_getslideint() (in module pycbc.events.eventmgr_cython)": [[57, "pycbc.events.eventmgr_cython.timecoincidence_getslideint"]], "timeslide_durations() (in module pycbc.events.coinc)": [[57, "pycbc.events.coinc.timeslide_durations"]], "update_valid_start() (pycbc.events.coinc.multiringbuffer method)": [[57, "pycbc.events.coinc.MultiRingBuffer.update_valid_start"]], "use_alphamax() (pycbc.events.stat.expfitcombinedsnr method)": [[57, "pycbc.events.stat.ExpFitCombinedSNR.use_alphamax"]], "valid_slice() (pycbc.events.coinc.multiringbuffer method)": [[57, "pycbc.events.coinc.MultiRingBuffer.valid_slice"]], "verify_args() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator static method)": [[57, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.verify_args"]], "verify_args() (pycbc.events.single.livesingle static method)": [[57, "pycbc.events.single.LiveSingle.verify_args"]], "which_bin() (in module pycbc.events.trigger_fits)": [[57, "pycbc.events.trigger_fits.which_bin"]], "write_events() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.write_events"]], "write_to_hdf() (pycbc.events.eventmgr.eventmanager method)": [[57, "pycbc.events.eventmgr.EventManager.write_to_hdf"]], "write_to_hdf() (pycbc.events.eventmgr.eventmanagercoherent method)": [[57, "pycbc.events.eventmgr.EventManagerCoherent.write_to_hdf"]], "write_to_hdf() (pycbc.events.eventmgr.eventmanagermultidet method)": [[57, "pycbc.events.eventmgr.EventManagerMultiDet.write_to_hdf"]], "fft (class in pycbc.fft.class_api)": [[58, "pycbc.fft.class_api.FFT"]], "fft (class in pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.FFT"]], "fft (class in pycbc.fft.mkl)": [[58, "pycbc.fft.mkl.FFT"]], "fft (class in pycbc.fft.npfft)": [[58, "pycbc.fft.npfft.FFT"]], "ifft (class in pycbc.fft.class_api)": [[58, "pycbc.fft.class_api.IFFT"]], "ifft (class in pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.IFFT"]], "ifft (class in pycbc.fft.mkl)": [[58, "pycbc.fft.mkl.IFFT"]], "ifft (class in pycbc.fft.npfft)": [[58, "pycbc.fft.npfft.IFFT"]], "c2c_correlate_ifft() (in module pycbc.fft.fft_callback)": [[58, "pycbc.fft.fft_callback.c2c_correlate_ifft"]], "c2c_half_correlate_ifft() (in module pycbc.fft.fft_callback)": [[58, "pycbc.fft.fft_callback.c2c_half_correlate_ifft"]], "check_status() (in module pycbc.fft.mkl)": [[58, "pycbc.fft.mkl.check_status"]], "compile() (in module pycbc.fft.fft_callback)": [[58, "pycbc.fft.fft_callback.compile"]], "create_descriptor() (in module pycbc.fft.mkl)": [[58, "pycbc.fft.mkl.create_descriptor"]], "execute() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.execute"]], "execute() (pycbc.fft.fftw.fft method)": [[58, "pycbc.fft.fftw.FFT.execute"]], "execute() (pycbc.fft.fftw.ifft method)": [[58, "pycbc.fft.fftw.IFFT.execute"]], "execute() (pycbc.fft.mkl.fft method)": [[58, "pycbc.fft.mkl.FFT.execute"]], "execute() (pycbc.fft.mkl.ifft method)": [[58, "pycbc.fft.mkl.IFFT.execute"]], "execute() (pycbc.fft.npfft.fft method)": [[58, "pycbc.fft.npfft.FFT.execute"]], "execute() (pycbc.fft.npfft.ifft method)": [[58, "pycbc.fft.npfft.IFFT.execute"]], "export_double_wisdom_to_filename() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.export_double_wisdom_to_filename"]], "export_single_wisdom_to_filename() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.export_single_wisdom_to_filename"]], "fft() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.fft"]], "fft() (in module pycbc.fft.func_api)": [[58, "pycbc.fft.func_api.fft"]], "fft() (in module pycbc.fft.mkl)": [[58, "pycbc.fft.mkl.fft"]], "fft() (in module pycbc.fft.npfft)": [[58, "pycbc.fft.npfft.fft"]], "fft_transpose() (in module pycbc.fft.fftw_pruned)": [[58, "pycbc.fft.fftw_pruned.fft_transpose"]], "fft_transpose_fftw() (in module pycbc.fft.fftw_pruned)": [[58, "pycbc.fft.fftw_pruned.fft_transpose_fftw"]], "first_phase() (in module pycbc.fft.fftw_pruned)": [[58, "pycbc.fft.fftw_pruned.first_phase"]], "from_cli() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.from_cli"]], "from_cli() (in module pycbc.fft.parser_support)": [[58, "pycbc.fft.parser_support.from_cli"]], "get_backend() (in module pycbc.fft.backend_cpu)": [[58, "pycbc.fft.backend_cpu.get_backend"]], "get_backend() (in module pycbc.fft.backend_mkl)": [[58, "pycbc.fft.backend_mkl.get_backend"]], "get_backend() (in module pycbc.fft.backend_support)": [[58, "pycbc.fft.backend_support.get_backend"]], "get_backend_modules() (in module pycbc.fft.backend_support)": [[58, "pycbc.fft.backend_support.get_backend_modules"]], "get_backend_names() (in module pycbc.fft.backend_support)": [[58, "pycbc.fft.backend_support.get_backend_names"]], "get_flag() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.get_flag"]], "get_fn_plan() (in module pycbc.fft.fft_callback)": [[58, "pycbc.fft.fft_callback.get_fn_plan"]], "get_measure_level() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.get_measure_level"]], "htilde (pycbc.fft.fft_callback.param attribute)": [[58, "pycbc.fft.fft_callback.param.htilde"]], "htilde (pycbc.fft.fft_callback.param2 attribute)": [[58, "pycbc.fft.fft_callback.param2.htilde"]], "ifft() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.ifft"]], "ifft() (in module pycbc.fft.func_api)": [[58, "pycbc.fft.func_api.ifft"]], "ifft() (in module pycbc.fft.mkl)": [[58, "pycbc.fft.mkl.ifft"]], "ifft() (in module pycbc.fft.npfft)": [[58, "pycbc.fft.npfft.ifft"]], "import_double_wisdom_from_filename() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.import_double_wisdom_from_filename"]], "import_single_wisdom_from_filename() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.import_single_wisdom_from_filename"]], "import_sys_wisdom() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.import_sys_wisdom"]], "in_kmax (pycbc.fft.fft_callback.param2 attribute)": [[58, "pycbc.fft.fft_callback.param2.in_kmax"]], "insert_fft_option_group() (in module pycbc.fft.parser_support)": [[58, "pycbc.fft.parser_support.insert_fft_option_group"]], "insert_fft_options() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.insert_fft_options"]], "out_kmax (pycbc.fft.fft_callback.param2 attribute)": [[58, "pycbc.fft.fft_callback.param2.out_kmax"]], "out_kmin (pycbc.fft.fft_callback.param2 attribute)": [[58, "pycbc.fft.fft_callback.param2.out_kmin"]], "param (class in pycbc.fft.fft_callback)": [[58, "pycbc.fft.fft_callback.param"]], "param2 (class in pycbc.fft.fft_callback)": [[58, "pycbc.fft.fft_callback.param2"]], "plan() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.plan"]], "plan_first_phase() (in module pycbc.fft.fftw_pruned)": [[58, "pycbc.fft.fftw_pruned.plan_first_phase"]], "plan_transpose() (in module pycbc.fft.fftw_pruned)": [[58, "pycbc.fft.fftw_pruned.plan_transpose"]], "pruned_c2cifft() (in module pycbc.fft.fftw_pruned)": [[58, "pycbc.fft.fftw_pruned.pruned_c2cifft"]], "pycbc.fft": [[58, "module-pycbc.fft"]], "pycbc.fft.backend_cpu": [[58, "module-pycbc.fft.backend_cpu"]], "pycbc.fft.backend_mkl": [[58, "module-pycbc.fft.backend_mkl"]], "pycbc.fft.backend_support": [[58, "module-pycbc.fft.backend_support"]], "pycbc.fft.class_api": [[58, "module-pycbc.fft.class_api"]], "pycbc.fft.core": [[58, "module-pycbc.fft.core"]], "pycbc.fft.fft_callback": [[58, "module-pycbc.fft.fft_callback"]], "pycbc.fft.fftw": [[58, "module-pycbc.fft.fftw"]], "pycbc.fft.fftw_pruned": [[58, "module-pycbc.fft.fftw_pruned"]], "pycbc.fft.fftw_pruned_cython": [[58, "module-pycbc.fft.fftw_pruned_cython"]], "pycbc.fft.func_api": [[58, "module-pycbc.fft.func_api"]], "pycbc.fft.mkl": [[58, "module-pycbc.fft.mkl"]], "pycbc.fft.npfft": [[58, "module-pycbc.fft.npfft"]], "pycbc.fft.parser_support": [[58, "module-pycbc.fft.parser_support"]], "second_phase() (in module pycbc.fft.fftw_pruned)": [[58, "pycbc.fft.fftw_pruned.second_phase"]], "second_phase_cython() (in module pycbc.fft.fftw_pruned_cython)": [[58, "pycbc.fft.fftw_pruned_cython.second_phase_cython"]], "set_backend() (in module pycbc.fft.backend_cpu)": [[58, "pycbc.fft.backend_cpu.set_backend"]], "set_backend() (in module pycbc.fft.backend_mkl)": [[58, "pycbc.fft.backend_mkl.set_backend"]], "set_backend() (in module pycbc.fft.backend_support)": [[58, "pycbc.fft.backend_support.set_backend"]], "set_measure_level() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.set_measure_level"]], "set_planning_limit() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.set_planning_limit"]], "set_threads_backend() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.set_threads_backend"]], "splay() (in module pycbc.fft.fftw_pruned)": [[58, "pycbc.fft.fftw_pruned.splay"]], "verify_fft_options() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.verify_fft_options"]], "verify_fft_options() (in module pycbc.fft.parser_support)": [[58, "pycbc.fft.parser_support.verify_fft_options"]], "wisdom_io() (in module pycbc.fft.fftw)": [[58, "pycbc.fft.fftw.wisdom_io"]], "cpucorrelator (class in pycbc.filter.matchedfilter_cpu)": [[59, "pycbc.filter.matchedfilter_cpu.CPUCorrelator"]], "livebatchmatchedfilter (class in pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.LiveBatchMatchedFilter"]], "matchedfiltercontrol (class in pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.MatchedFilterControl"]], "matchedfilterskymaxcontrol (class in pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.MatchedFilterSkyMaxControl"]], "matchedfilterskymaxcontrolnophase (class in pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.MatchedFilterSkyMaxControlNoPhase"]], "batch_correlate_execute() (in module pycbc.filter.matchedfilter_cpu)": [[59, "pycbc.filter.matchedfilter_cpu.batch_correlate_execute"]], "calculate_acf() (in module pycbc.filter.autocorrelation)": [[59, "pycbc.filter.autocorrelation.calculate_acf"]], "calculate_acl() (in module pycbc.filter.autocorrelation)": [[59, "pycbc.filter.autocorrelation.calculate_acl"]], "ccorrf_parallel() (in module pycbc.filter.simd_correlate_cython)": [[59, "pycbc.filter.simd_correlate_cython.ccorrf_parallel"]], "ccorrf_simd() (in module pycbc.filter.simd_correlate_cython)": [[59, "pycbc.filter.simd_correlate_cython.ccorrf_simd"]], "combine_results() (pycbc.filter.matchedfilter.livebatchmatchedfilter method)": [[59, "pycbc.filter.matchedfilter.LiveBatchMatchedFilter.combine_results"]], "compute_followup_snr_series() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.compute_followup_snr_series"]], "compute_max_snr_over_sky_loc_stat() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.compute_max_snr_over_sky_loc_stat"]], "compute_max_snr_over_sky_loc_stat_no_phase() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.compute_max_snr_over_sky_loc_stat_no_phase"]], "compute_u_val_for_sky_loc_stat() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.compute_u_val_for_sky_loc_stat"]], "compute_u_val_for_sky_loc_stat_no_phase() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.compute_u_val_for_sky_loc_stat_no_phase"]], "correlate() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.correlate"]], "correlate() (in module pycbc.filter.matchedfilter_cpu)": [[59, "pycbc.filter.matchedfilter_cpu.correlate"]], "correlate() (in module pycbc.filter.matchedfilter_numpy)": [[59, "pycbc.filter.matchedfilter_numpy.correlate"]], "correlate() (pycbc.filter.matchedfilter_cpu.cpucorrelator method)": [[59, "pycbc.filter.matchedfilter_cpu.CPUCorrelator.correlate"]], "correlate_numpy() (in module pycbc.filter.matchedfilter_cpu)": [[59, "pycbc.filter.matchedfilter_cpu.correlate_numpy"]], "correlate_parallel() (in module pycbc.filter.simd_correlate)": [[59, "pycbc.filter.simd_correlate.correlate_parallel"]], "correlate_simd() (in module pycbc.filter.simd_correlate)": [[59, "pycbc.filter.simd_correlate.correlate_simd"]], "deltam_f() (in module pycbc.filter.qtransform)": [[59, "pycbc.filter.qtransform.deltam_f"]], "filter_zpk() (in module pycbc.filter.zpk)": [[59, "pycbc.filter.zpk.filter_zpk"]], "fir_zero_filter() (in module pycbc.filter.resample)": [[59, "pycbc.filter.resample.fir_zero_filter"]], "followup_event_significance() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.followup_event_significance"]], "full_matched_filter_and_cluster() (pycbc.filter.matchedfilter.matchedfilterskymaxcontrol method)": [[59, "pycbc.filter.matchedfilter.MatchedFilterSkyMaxControl.full_matched_filter_and_cluster"]], "full_matched_filter_and_cluster_fc() (pycbc.filter.matchedfilter.matchedfiltercontrol method)": [[59, "pycbc.filter.matchedfilter.MatchedFilterControl.full_matched_filter_and_cluster_fc"]], "full_matched_filter_and_cluster_symm() (pycbc.filter.matchedfilter.matchedfiltercontrol method)": [[59, "pycbc.filter.matchedfilter.MatchedFilterControl.full_matched_filter_and_cluster_symm"]], "full_matched_filter_thresh_only() (pycbc.filter.matchedfilter.matchedfiltercontrol method)": [[59, "pycbc.filter.matchedfilter.MatchedFilterControl.full_matched_filter_thresh_only"]], "get_cutoff_indices() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.get_cutoff_indices"]], "hierarchical_matched_filter_and_cluster() (pycbc.filter.matchedfilter.matchedfiltercontrol method)": [[59, "pycbc.filter.matchedfilter.MatchedFilterControl.hierarchical_matched_filter_and_cluster"]], "highpass() (in module pycbc.filter.resample)": [[59, "pycbc.filter.resample.highpass"]], "highpass_fir() (in module pycbc.filter.resample)": [[59, "pycbc.filter.resample.highpass_fir"]], "interpolate_complex_frequency() (in module pycbc.filter.resample)": [[59, "pycbc.filter.resample.interpolate_complex_frequency"]], "lowpass() (in module pycbc.filter.resample)": [[59, "pycbc.filter.resample.lowpass"]], "lowpass_fir() (in module pycbc.filter.resample)": [[59, "pycbc.filter.resample.lowpass_fir"]], "make_frequency_series() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.make_frequency_series"]], "match() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.match"]], "matched_filter() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.matched_filter"]], "matched_filter_core() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.matched_filter_core"]], "notch_fir() (in module pycbc.filter.resample)": [[59, "pycbc.filter.resample.notch_fir"]], "optimized_match() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.optimized_match"]], "overlap() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.overlap"]], "overlap_cplx() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.overlap_cplx"]], "process_all() (pycbc.filter.matchedfilter.livebatchmatchedfilter method)": [[59, "pycbc.filter.matchedfilter.LiveBatchMatchedFilter.process_all"]], "process_data() (pycbc.filter.matchedfilter.livebatchmatchedfilter method)": [[59, "pycbc.filter.matchedfilter.LiveBatchMatchedFilter.process_data"]], "pycbc.filter": [[59, "module-pycbc.filter"]], "pycbc.filter.autocorrelation": [[59, "module-pycbc.filter.autocorrelation"]], "pycbc.filter.matchedfilter": [[59, "module-pycbc.filter.matchedfilter"]], "pycbc.filter.matchedfilter_cpu": [[59, "module-pycbc.filter.matchedfilter_cpu"]], "pycbc.filter.matchedfilter_numpy": [[59, "module-pycbc.filter.matchedfilter_numpy"]], "pycbc.filter.qtransform": [[59, "module-pycbc.filter.qtransform"]], "pycbc.filter.resample": [[59, "module-pycbc.filter.resample"]], "pycbc.filter.simd_correlate": [[59, "module-pycbc.filter.simd_correlate"]], "pycbc.filter.simd_correlate_cython": [[59, "module-pycbc.filter.simd_correlate_cython"]], "pycbc.filter.zpk": [[59, "module-pycbc.filter.zpk"]], "qplane() (in module pycbc.filter.qtransform)": [[59, "pycbc.filter.qtransform.qplane"]], "qseries() (in module pycbc.filter.qtransform)": [[59, "pycbc.filter.qtransform.qseries"]], "qtiling() (in module pycbc.filter.qtransform)": [[59, "pycbc.filter.qtransform.qtiling"]], "resample_to_delta_t() (in module pycbc.filter.resample)": [[59, "pycbc.filter.resample.resample_to_delta_t"]], "set_data() (pycbc.filter.matchedfilter.livebatchmatchedfilter method)": [[59, "pycbc.filter.matchedfilter.LiveBatchMatchedFilter.set_data"]], "sigma() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.sigma"]], "sigmasq() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.sigmasq"]], "sigmasq_series() (in module pycbc.filter.matchedfilter)": [[59, "pycbc.filter.matchedfilter.sigmasq_series"]], "databuffer (class in pycbc.frame.frame)": [[60, "pycbc.frame.frame.DataBuffer"]], "statusbuffer (class in pycbc.frame.frame)": [[60, "pycbc.frame.frame.StatusBuffer"]], "advance() (pycbc.frame.frame.databuffer method)": [[60, "pycbc.frame.frame.DataBuffer.advance"]], "advance() (pycbc.frame.frame.statusbuffer method)": [[60, "pycbc.frame.frame.StatusBuffer.advance"]], "advance() (pycbc.frame.frame.idqbuffer method)": [[60, "pycbc.frame.frame.iDQBuffer.advance"]], "attempt_advance() (pycbc.frame.frame.databuffer method)": [[60, "pycbc.frame.frame.DataBuffer.attempt_advance"]], "check_valid() (pycbc.frame.frame.statusbuffer method)": [[60, "pycbc.frame.frame.StatusBuffer.check_valid"]], "flag_names_to_bitmask() (in module pycbc.frame)": [[60, "pycbc.frame.flag_names_to_bitmask"]], "frame_paths() (in module pycbc.frame.frame)": [[60, "pycbc.frame.frame.frame_paths"]], "get_run() (in module pycbc.frame.gwosc)": [[60, "pycbc.frame.gwosc.get_run"]], "gwosc_frame_json() (in module pycbc.frame.gwosc)": [[60, "pycbc.frame.gwosc.gwosc_frame_json"]], "gwosc_frame_urls() (in module pycbc.frame.gwosc)": [[60, "pycbc.frame.gwosc.gwosc_frame_urls"]], "idqbuffer (class in pycbc.frame.frame)": [[60, "pycbc.frame.frame.iDQBuffer"]], "indices_of_flag() (pycbc.frame.frame.statusbuffer method)": [[60, "pycbc.frame.frame.StatusBuffer.indices_of_flag"]], "indices_of_flag() (pycbc.frame.frame.idqbuffer method)": [[60, "pycbc.frame.frame.iDQBuffer.indices_of_flag"]], "is_extent_valid() (pycbc.frame.frame.statusbuffer method)": [[60, "pycbc.frame.frame.StatusBuffer.is_extent_valid"]], "locations_to_cache() (in module pycbc.frame.frame)": [[60, "pycbc.frame.frame.locations_to_cache"]], "null_advance() (pycbc.frame.frame.databuffer method)": [[60, "pycbc.frame.frame.DataBuffer.null_advance"]], "null_advance() (pycbc.frame.frame.idqbuffer method)": [[60, "pycbc.frame.frame.iDQBuffer.null_advance"]], "pycbc.frame": [[60, "module-pycbc.frame"]], "pycbc.frame.frame": [[60, "module-pycbc.frame.frame"]], "pycbc.frame.gwosc": [[60, "module-pycbc.frame.gwosc"]], "pycbc.frame.store": [[60, "module-pycbc.frame.store"]], "query_and_read_frame() (in module pycbc.frame.frame)": [[60, "pycbc.frame.frame.query_and_read_frame"]], "read_frame() (in module pycbc.frame.frame)": [[60, "pycbc.frame.frame.read_frame"]], "read_frame_gwosc() (in module pycbc.frame.gwosc)": [[60, "pycbc.frame.gwosc.read_frame_gwosc"]], "read_store() (in module pycbc.frame.store)": [[60, "pycbc.frame.store.read_store"]], "read_strain_gwosc() (in module pycbc.frame.gwosc)": [[60, "pycbc.frame.gwosc.read_strain_gwosc"]], "update_cache() (pycbc.frame.frame.databuffer method)": [[60, "pycbc.frame.frame.DataBuffer.update_cache"]], "update_cache_by_increment() (pycbc.frame.frame.databuffer method)": [[60, "pycbc.frame.frame.DataBuffer.update_cache_by_increment"]], "write_frame() (in module pycbc.frame.frame)": [[60, "pycbc.frame.frame.write_frame"]], "baseburnintests (class in pycbc.inference.burn_in)": [[61, "pycbc.inference.burn_in.BaseBurnInTests"]], "ensemblemcmcburnintests (class in pycbc.inference.burn_in)": [[61, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests"]], "ensemblemultitemperedmcmcburnintests (class in pycbc.inference.burn_in)": [[61, "pycbc.inference.burn_in.EnsembleMultiTemperedMCMCBurnInTests"]], "mcmcburnintests (class in pycbc.inference.burn_in)": [[61, "pycbc.inference.burn_in.MCMCBurnInTests"]], "multitemperedmcmcburnintests (class in pycbc.inference.burn_in)": [[61, "pycbc.inference.burn_in.MultiTemperedMCMCBurnInTests"]], "parselabelarg (class in pycbc.inference.option_utils)": [[61, "pycbc.inference.option_utils.ParseLabelArg"]], "parseparametersarg (class in pycbc.inference.option_utils)": [[61, "pycbc.inference.option_utils.ParseParametersArg"]], "add_density_option_group() (in module pycbc.inference.option_utils)": [[61, "pycbc.inference.option_utils.add_density_option_group"]], "add_injsamples_map_opt() (in module pycbc.inference.option_utils)": [[61, "pycbc.inference.option_utils.add_injsamples_map_opt"]], "add_plot_posterior_option_group() (in module pycbc.inference.option_utils)": [[61, "pycbc.inference.option_utils.add_plot_posterior_option_group"]], "add_scatter_option_group() (in module pycbc.inference.option_utils)": [[61, "pycbc.inference.option_utils.add_scatter_option_group"]], "arithmetic_mean_estimator() (in module pycbc.inference.evidence)": [[61, "pycbc.inference.evidence.arithmetic_mean_estimator"]], "available_tests (pycbc.inference.burn_in.baseburnintests attribute)": [[61, "pycbc.inference.burn_in.BaseBurnInTests.available_tests"]], "available_tests (pycbc.inference.burn_in.ensemblemcmcburnintests attribute)": [[61, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests.available_tests"]], "burn_in_index() (pycbc.inference.burn_in.baseburnintests method)": [[61, "pycbc.inference.burn_in.BaseBurnInTests.burn_in_index"]], "burn_in_index() (pycbc.inference.burn_in.ensemblemcmcburnintests method)": [[61, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests.burn_in_index"]], "burn_in_index() (pycbc.inference.burn_in.mcmcburnintests method)": [[61, "pycbc.inference.burn_in.MCMCBurnInTests.burn_in_index"]], "check_hist_params() (in module pycbc.inference.entropy)": [[61, "pycbc.inference.entropy.check_hist_params"]], "compute_pdf() (in module pycbc.inference.entropy)": [[61, "pycbc.inference.entropy.compute_pdf"]], "entropy() (in module pycbc.inference.entropy)": [[61, "pycbc.inference.entropy.entropy"]], "evaluate() (pycbc.inference.burn_in.baseburnintests method)": [[61, "pycbc.inference.burn_in.BaseBurnInTests.evaluate"]], "evaluate() (pycbc.inference.burn_in.ensemblemcmcburnintests method)": [[61, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests.evaluate"]], "evaluate() (pycbc.inference.burn_in.mcmcburnintests method)": [[61, "pycbc.inference.burn_in.MCMCBurnInTests.evaluate"]], "evaluate_tests() (in module pycbc.inference.burn_in)": [[61, "pycbc.inference.burn_in.evaluate_tests"]], "expected_parameters_from_cli() (in module pycbc.inference.option_utils)": [[61, "pycbc.inference.option_utils.expected_parameters_from_cli"]], "from_config() (pycbc.inference.burn_in.baseburnintests class method)": [[61, "pycbc.inference.burn_in.BaseBurnInTests.from_config"]], "gelman_rubin() (in module pycbc.inference.gelman_rubin)": [[61, "pycbc.inference.gelman_rubin.gelman_rubin"]], "geweke() (in module pycbc.inference.geweke)": [[61, "pycbc.inference.geweke.geweke"]], "halfchain() (pycbc.inference.burn_in.baseburnintests method)": [[61, "pycbc.inference.burn_in.BaseBurnInTests.halfchain"]], "harmonic_mean_estimator() (in module pycbc.inference.evidence)": [[61, "pycbc.inference.evidence.harmonic_mean_estimator"]], "js() (in module pycbc.inference.entropy)": [[61, "pycbc.inference.entropy.js"]], "kl() (in module pycbc.inference.entropy)": [[61, "pycbc.inference.entropy.kl"]], "ks_test() (in module pycbc.inference.burn_in)": [[61, "pycbc.inference.burn_in.ks_test"]], "ks_test() (pycbc.inference.burn_in.ensemblemcmcburnintests method)": [[61, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests.ks_test"]], "max_posterior() (in module pycbc.inference.burn_in)": [[61, "pycbc.inference.burn_in.max_posterior"]], "max_posterior() (pycbc.inference.burn_in.baseburnintests method)": [[61, "pycbc.inference.burn_in.BaseBurnInTests.max_posterior"]], "max_posterior() (pycbc.inference.burn_in.ensemblemcmcburnintests method)": [[61, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests.max_posterior"]], "max_posterior() (pycbc.inference.burn_in.mcmcburnintests method)": [[61, "pycbc.inference.burn_in.MCMCBurnInTests.max_posterior"]], "min_iterations() (pycbc.inference.burn_in.baseburnintests method)": [[61, "pycbc.inference.burn_in.BaseBurnInTests.min_iterations"]], "nacl() (in module pycbc.inference.burn_in)": [[61, "pycbc.inference.burn_in.nacl"]], "nacl() (pycbc.inference.burn_in.baseburnintests method)": [[61, "pycbc.inference.burn_in.BaseBurnInTests.nacl"]], "nacl() (pycbc.inference.burn_in.ensemblemcmcburnintests method)": [[61, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests.nacl"]], "nacl() (pycbc.inference.burn_in.mcmcburnintests method)": [[61, "pycbc.inference.burn_in.MCMCBurnInTests.nacl"]], "plot_ranges_from_cli() (in module pycbc.inference.option_utils)": [[61, "pycbc.inference.option_utils.plot_ranges_from_cli"]], "posterior_step() (in module pycbc.inference.burn_in)": [[61, "pycbc.inference.burn_in.posterior_step"]], "posterior_step() (pycbc.inference.burn_in.baseburnintests method)": [[61, "pycbc.inference.burn_in.BaseBurnInTests.posterior_step"]], "posterior_step() (pycbc.inference.burn_in.ensemblemcmcburnintests method)": [[61, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests.posterior_step"]], "posterior_step() (pycbc.inference.burn_in.mcmcburnintests method)": [[61, "pycbc.inference.burn_in.MCMCBurnInTests.posterior_step"]], "pycbc.inference": [[61, "module-pycbc.inference"]], "pycbc.inference.burn_in": [[61, "module-pycbc.inference.burn_in"]], "pycbc.inference.entropy": [[61, "module-pycbc.inference.entropy"]], "pycbc.inference.evidence": [[61, "module-pycbc.inference.evidence"]], "pycbc.inference.gelman_rubin": [[61, "module-pycbc.inference.gelman_rubin"]], "pycbc.inference.geweke": [[61, "module-pycbc.inference.geweke"]], "pycbc.inference.option_utils": [[61, "module-pycbc.inference.option_utils"]], "stepping_stone_algorithm() (in module pycbc.inference.evidence)": [[61, "pycbc.inference.evidence.stepping_stone_algorithm"]], "thermodynamic_integration() (in module pycbc.inference.evidence)": [[61, "pycbc.inference.evidence.thermodynamic_integration"]], "walk() (in module pycbc.inference.gelman_rubin)": [[61, "pycbc.inference.gelman_rubin.walk"]], "write() (pycbc.inference.burn_in.baseburnintests method)": [[61, "pycbc.inference.burn_in.BaseBurnInTests.write"]], "write() (pycbc.inference.burn_in.mcmcburnintests method)": [[61, "pycbc.inference.burn_in.MCMCBurnInTests.write"]], "baseinferencefile (class in pycbc.inference.io.base_hdf)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile"]], "basenestedsamplerfile (class in pycbc.inference.io.base_nested_sampler)": [[62, "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile"]], "basesamplerfile (class in pycbc.inference.io.base_sampler)": [[62, "pycbc.inference.io.base_sampler.BaseSamplerFile"]], "commonmcmcmetadataio (class in pycbc.inference.io.base_mcmc)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO"]], "commonmultitemperedmetadataio (class in pycbc.inference.io.base_multitemper)": [[62, "pycbc.inference.io.base_multitemper.CommonMultiTemperedMetadataIO"]], "commonnestedmetadataio (class in pycbc.inference.io.dynesty)": [[62, "pycbc.inference.io.dynesty.CommonNestedMetadataIO"]], "dynestyfile (class in pycbc.inference.io.dynesty)": [[62, "pycbc.inference.io.dynesty.DynestyFile"]], "emceefile (class in pycbc.inference.io.emcee)": [[62, "pycbc.inference.io.emcee.EmceeFile"]], "emceeptfile (class in pycbc.inference.io.emcee_pt)": [[62, "pycbc.inference.io.emcee_pt.EmceePTFile"]], "ensemblemcmcmetadataio (class in pycbc.inference.io.base_mcmc)": [[62, "pycbc.inference.io.base_mcmc.EnsembleMCMCMetadataIO"]], "epsiefile (class in pycbc.inference.io.epsie)": [[62, "pycbc.inference.io.epsie.EpsieFile"]], "inferencetxtfile (class in pycbc.inference.io.txt)": [[62, "pycbc.inference.io.txt.InferenceTXTFile"]], "mcmcmetadataio (class in pycbc.inference.io.base_mcmc)": [[62, "pycbc.inference.io.base_mcmc.MCMCMetadataIO"]], "multinestfile (class in pycbc.inference.io.multinest)": [[62, "pycbc.inference.io.multinest.MultinestFile"]], "nessaifile (class in pycbc.inference.io.nessai)": [[62, "pycbc.inference.io.nessai.NessaiFile"]], "noinputfileerror": [[62, "pycbc.inference.io.NoInputFileError"]], "ptemceefile (class in pycbc.inference.io.ptemcee)": [[62, "pycbc.inference.io.ptemcee.PTEmceeFile"]], "parsetempsarg (class in pycbc.inference.io.base_multitemper)": [[62, "pycbc.inference.io.base_multitemper.ParseTempsArg"]], "posteriorfile (class in pycbc.inference.io.posterior)": [[62, "pycbc.inference.io.posterior.PosteriorFile"]], "printfileparams (class in pycbc.inference.io)": [[62, "pycbc.inference.io.PrintFileParams"]], "resultsargumentparser (class in pycbc.inference.io)": [[62, "pycbc.inference.io.ResultsArgumentParser"]], "snowlinefile (class in pycbc.inference.io.snowline)": [[62, "pycbc.inference.io.snowline.SnowlineFile"]], "ultranestfile (class in pycbc.inference.io.ultranest)": [[62, "pycbc.inference.io.ultranest.UltranestFile"]], "acl (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.acl"]], "act (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.act"]], "actions (pycbc.inference.io.resultsargumentparser property)": [[62, "pycbc.inference.io.ResultsArgumentParser.actions"]], "add_results_option_group() (pycbc.inference.io.resultsargumentparser method)": [[62, "pycbc.inference.io.ResultsArgumentParser.add_results_option_group"]], "betas (pycbc.inference.io.emcee_pt.emceeptfile property)": [[62, "pycbc.inference.io.emcee_pt.EmceePTFile.betas"]], "betas (pycbc.inference.io.epsie.epsiefile property)": [[62, "pycbc.inference.io.epsie.EpsieFile.betas"]], "burn_in_index (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.burn_in_index"]], "burn_in_iteration (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.burn_in_iteration"]], "check_integrity() (in module pycbc.inference.io)": [[62, "pycbc.inference.io.check_integrity"]], "cmd (pycbc.inference.io.base_hdf.baseinferencefile property)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.cmd"]], "comments (pycbc.inference.io.txt.inferencetxtfile attribute)": [[62, "pycbc.inference.io.txt.InferenceTXTFile.comments"]], "config_group (pycbc.inference.io.base_hdf.baseinferencefile attribute)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.config_group"]], "copy() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.copy"]], "copy_info() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.copy_info"]], "copy_metadata() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.copy_metadata"]], "copy_samples() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.copy_samples"]], "data_group (pycbc.inference.io.base_hdf.baseinferencefile attribute)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.data_group"]], "delimiter (pycbc.inference.io.txt.inferencetxtfile attribute)": [[62, "pycbc.inference.io.txt.InferenceTXTFile.delimiter"]], "effective_nsamples (pycbc.inference.io.base_hdf.baseinferencefile property)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.effective_nsamples"]], "ensemble_read_raw_samples() (in module pycbc.inference.io.base_mcmc)": [[62, "pycbc.inference.io.base_mcmc.ensemble_read_raw_samples"]], "ensemble_read_raw_samples() (in module pycbc.inference.io.base_multitemper)": [[62, "pycbc.inference.io.base_multitemper.ensemble_read_raw_samples"]], "extra_args_parser() (pycbc.inference.io.base_hdf.baseinferencefile static method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.extra_args_parser"]], "extra_args_parser() (pycbc.inference.io.base_mcmc.commonmcmcmetadataio static method)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.extra_args_parser"]], "extra_args_parser() (pycbc.inference.io.base_multitemper.commonmultitemperedmetadataio static method)": [[62, "pycbc.inference.io.base_multitemper.CommonMultiTemperedMetadataIO.extra_args_parser"]], "extra_args_parser() (pycbc.inference.io.dynesty.commonnestedmetadataio static method)": [[62, "pycbc.inference.io.dynesty.CommonNestedMetadataIO.extra_args_parser"]], "format_attr() (in module pycbc.inference.io.base_hdf)": [[62, "pycbc.inference.io.base_hdf.format_attr"]], "get_common_parameters() (in module pycbc.inference.io)": [[62, "pycbc.inference.io.get_common_parameters"]], "get_file_type() (in module pycbc.inference.io)": [[62, "pycbc.inference.io.get_file_type"]], "get_slice() (pycbc.inference.io.base_hdf.baseinferencefile static method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.get_slice"]], "getattrs() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.getattrs"]], "injections_from_cli() (in module pycbc.inference.io)": [[62, "pycbc.inference.io.injections_from_cli"]], "injections_group (pycbc.inference.io.base_hdf.baseinferencefile attribute)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.injections_group"]], "is_burned_in (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.is_burned_in"]], "iterations() (pycbc.inference.io.base_mcmc.commonmcmcmetadataio method)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.iterations"]], "last_iteration() (pycbc.inference.io.base_mcmc.commonmcmcmetadataio method)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.last_iteration"]], "loadfile() (in module pycbc.inference.io)": [[62, "pycbc.inference.io.loadfile"]], "log_evidence (pycbc.inference.io.base_hdf.baseinferencefile property)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.log_evidence"]], "name (pycbc.inference.io.base_hdf.baseinferencefile attribute)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.name"]], "name (pycbc.inference.io.base_nested_sampler.basenestedsamplerfile attribute)": [[62, "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile.name"]], "name (pycbc.inference.io.dynesty.dynestyfile attribute)": [[62, "pycbc.inference.io.dynesty.DynestyFile.name"]], "name (pycbc.inference.io.emcee.emceefile attribute)": [[62, "pycbc.inference.io.emcee.EmceeFile.name"]], "name (pycbc.inference.io.emcee_pt.emceeptfile attribute)": [[62, "pycbc.inference.io.emcee_pt.EmceePTFile.name"]], "name (pycbc.inference.io.epsie.epsiefile attribute)": [[62, "pycbc.inference.io.epsie.EpsieFile.name"]], "name (pycbc.inference.io.multinest.multinestfile attribute)": [[62, "pycbc.inference.io.multinest.MultinestFile.name"]], "name (pycbc.inference.io.nessai.nessaifile attribute)": [[62, "pycbc.inference.io.nessai.NessaiFile.name"]], "name (pycbc.inference.io.posterior.posteriorfile attribute)": [[62, "pycbc.inference.io.posterior.PosteriorFile.name"]], "name (pycbc.inference.io.ptemcee.ptemceefile attribute)": [[62, "pycbc.inference.io.ptemcee.PTEmceeFile.name"]], "name (pycbc.inference.io.snowline.snowlinefile attribute)": [[62, "pycbc.inference.io.snowline.SnowlineFile.name"]], "name (pycbc.inference.io.txt.inferencetxtfile attribute)": [[62, "pycbc.inference.io.txt.InferenceTXTFile.name"]], "name (pycbc.inference.io.ultranest.ultranestfile attribute)": [[62, "pycbc.inference.io.ultranest.UltranestFile.name"]], "nchains (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.nchains"]], "nchains (pycbc.inference.io.epsie.epsiefile property)": [[62, "pycbc.inference.io.epsie.EpsieFile.nchains"]], "niterations (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.niterations"]], "niterations (pycbc.inference.io.multinest.multinestfile property)": [[62, "pycbc.inference.io.multinest.MultinestFile.niterations"]], "nsamples_in_chain() (in module pycbc.inference.io.base_mcmc)": [[62, "pycbc.inference.io.base_mcmc.nsamples_in_chain"]], "ntemps (pycbc.inference.io.base_multitemper.commonmultitemperedmetadataio property)": [[62, "pycbc.inference.io.base_multitemper.CommonMultiTemperedMetadataIO.ntemps"]], "nwalkers (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.nwalkers"]], "parse_known_args() (pycbc.inference.io.resultsargumentparser method)": [[62, "pycbc.inference.io.ResultsArgumentParser.parse_known_args"]], "parse_parameters() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.parse_parameters"]], "pycbc.inference.io": [[62, "module-pycbc.inference.io"]], "pycbc.inference.io.base_hdf": [[62, "module-pycbc.inference.io.base_hdf"]], "pycbc.inference.io.base_mcmc": [[62, "module-pycbc.inference.io.base_mcmc"]], "pycbc.inference.io.base_multitemper": [[62, "module-pycbc.inference.io.base_multitemper"]], "pycbc.inference.io.base_nested_sampler": [[62, "module-pycbc.inference.io.base_nested_sampler"]], "pycbc.inference.io.base_sampler": [[62, "module-pycbc.inference.io.base_sampler"]], "pycbc.inference.io.dynesty": [[62, "module-pycbc.inference.io.dynesty"]], "pycbc.inference.io.emcee": [[62, "module-pycbc.inference.io.emcee"]], "pycbc.inference.io.emcee_pt": [[62, "module-pycbc.inference.io.emcee_pt"]], "pycbc.inference.io.epsie": [[62, "module-pycbc.inference.io.epsie"]], "pycbc.inference.io.multinest": [[62, "module-pycbc.inference.io.multinest"]], "pycbc.inference.io.nessai": [[62, "module-pycbc.inference.io.nessai"]], "pycbc.inference.io.posterior": [[62, "module-pycbc.inference.io.posterior"]], "pycbc.inference.io.ptemcee": [[62, "module-pycbc.inference.io.ptemcee"]], "pycbc.inference.io.snowline": [[62, "module-pycbc.inference.io.snowline"]], "pycbc.inference.io.txt": [[62, "module-pycbc.inference.io.txt"]], "pycbc.inference.io.ultranest": [[62, "module-pycbc.inference.io.ultranest"]], "raw_acls (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.raw_acls"]], "raw_acts (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.raw_acts"]], "read_acceptance_fraction() (pycbc.inference.io.emcee.emceefile method)": [[62, "pycbc.inference.io.emcee.EmceeFile.read_acceptance_fraction"]], "read_acceptance_fraction() (pycbc.inference.io.emcee_pt.emceeptfile method)": [[62, "pycbc.inference.io.emcee_pt.EmceePTFile.read_acceptance_fraction"]], "read_acceptance_fraction() (pycbc.inference.io.epsie.epsiefile method)": [[62, "pycbc.inference.io.epsie.EpsieFile.read_acceptance_fraction"]], "read_acceptance_rate() (pycbc.inference.io.epsie.epsiefile method)": [[62, "pycbc.inference.io.epsie.EpsieFile.read_acceptance_rate"]], "read_acceptance_ratio() (pycbc.inference.io.epsie.epsiefile method)": [[62, "pycbc.inference.io.epsie.EpsieFile.read_acceptance_ratio"]], "read_betas() (pycbc.inference.io.ptemcee.ptemceefile method)": [[62, "pycbc.inference.io.ptemcee.PTEmceeFile.read_betas"]], "read_config_file() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.read_config_file"]], "read_data() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.read_data"]], "read_ensemble_attrs() (pycbc.inference.io.ptemcee.ptemceefile method)": [[62, "pycbc.inference.io.ptemcee.PTEmceeFile.read_ensemble_attrs"]], "read_injections() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.read_injections"]], "read_pickled_data_from_checkpoint_file() (pycbc.inference.io.dynesty.commonnestedmetadataio method)": [[62, "pycbc.inference.io.dynesty.CommonNestedMetadataIO.read_pickled_data_from_checkpoint_file"]], "read_psds() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.read_psds"]], "read_random_state() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.read_random_state"]], "read_raw_samples() (in module pycbc.inference.io.base_multitemper)": [[62, "pycbc.inference.io.base_multitemper.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.base_nested_sampler.basenestedsamplerfile method)": [[62, "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.dynesty.dynestyfile method)": [[62, "pycbc.inference.io.dynesty.DynestyFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.emcee.emceefile method)": [[62, "pycbc.inference.io.emcee.EmceeFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.emcee_pt.emceeptfile method)": [[62, "pycbc.inference.io.emcee_pt.EmceePTFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.epsie.epsiefile method)": [[62, "pycbc.inference.io.epsie.EpsieFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.multinest.multinestfile method)": [[62, "pycbc.inference.io.multinest.MultinestFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.nessai.nessaifile method)": [[62, "pycbc.inference.io.nessai.NessaiFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.posterior.posteriorfile method)": [[62, "pycbc.inference.io.posterior.PosteriorFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.ptemcee.ptemceefile method)": [[62, "pycbc.inference.io.ptemcee.PTEmceeFile.read_raw_samples"]], "read_raw_samples_from_file() (in module pycbc.inference.io.posterior)": [[62, "pycbc.inference.io.posterior.read_raw_samples_from_file"]], "read_samples() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.read_samples"]], "results_from_cli() (in module pycbc.inference.io)": [[62, "pycbc.inference.io.results_from_cli"]], "run_end_time (pycbc.inference.io.base_sampler.basesamplerfile property)": [[62, "pycbc.inference.io.base_sampler.BaseSamplerFile.run_end_time"]], "run_start_time (pycbc.inference.io.base_sampler.basesamplerfile property)": [[62, "pycbc.inference.io.base_sampler.BaseSamplerFile.run_start_time"]], "sampler_group (pycbc.inference.io.base_hdf.baseinferencefile attribute)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.sampler_group"]], "samples_from_cli() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.samples_from_cli"]], "samples_group (pycbc.inference.io.base_hdf.baseinferencefile attribute)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.samples_group"]], "seed (pycbc.inference.io.epsie.epsiefile property)": [[62, "pycbc.inference.io.epsie.EpsieFile.seed"]], "starting_betas (pycbc.inference.io.ptemcee.ptemceefile property)": [[62, "pycbc.inference.io.ptemcee.PTEmceeFile.starting_betas"]], "static_params (pycbc.inference.io.base_hdf.baseinferencefile property)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.static_params"]], "swap_interval (pycbc.inference.io.epsie.epsiefile property)": [[62, "pycbc.inference.io.epsie.EpsieFile.swap_interval"]], "thin() (pycbc.inference.io.base_mcmc.commonmcmcmetadataio method)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.thin"]], "thin() (pycbc.inference.io.epsie.epsiefile method)": [[62, "pycbc.inference.io.epsie.EpsieFile.thin"]], "thin_end (pycbc.inference.io.base_hdf.baseinferencefile property)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.thin_end"]], "thin_interval (pycbc.inference.io.base_hdf.baseinferencefile property)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.thin_interval"]], "thin_interval (pycbc.inference.io.base_mcmc.ensemblemcmcmetadataio property)": [[62, "pycbc.inference.io.base_mcmc.EnsembleMCMCMetadataIO.thin_interval"]], "thin_interval (pycbc.inference.io.base_mcmc.mcmcmetadataio property)": [[62, "pycbc.inference.io.base_mcmc.MCMCMetadataIO.thin_interval"]], "thin_samples_for_writing() (in module pycbc.inference.io.base_mcmc)": [[62, "pycbc.inference.io.base_mcmc.thin_samples_for_writing"]], "thin_start (pycbc.inference.io.base_hdf.baseinferencefile property)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.thin_start"]], "thin_start (pycbc.inference.io.base_mcmc.ensemblemcmcmetadataio property)": [[62, "pycbc.inference.io.base_mcmc.EnsembleMCMCMetadataIO.thin_start"]], "thin_start (pycbc.inference.io.base_mcmc.mcmcmetadataio property)": [[62, "pycbc.inference.io.base_mcmc.MCMCMetadataIO.thin_start"]], "thinned_by (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.thinned_by"]], "update_checkpoint_history() (pycbc.inference.io.base_sampler.basesamplerfile method)": [[62, "pycbc.inference.io.base_sampler.BaseSamplerFile.update_checkpoint_history"]], "validate() (pycbc.inference.io.base_sampler.basesamplerfile method)": [[62, "pycbc.inference.io.base_sampler.BaseSamplerFile.validate"]], "validate() (pycbc.inference.io.dynesty.commonnestedmetadataio method)": [[62, "pycbc.inference.io.dynesty.CommonNestedMetadataIO.validate"]], "validate() (pycbc.inference.io.epsie.epsiefile method)": [[62, "pycbc.inference.io.epsie.EpsieFile.validate"]], "validate_checkpoint_files() (in module pycbc.inference.io)": [[62, "pycbc.inference.io.validate_checkpoint_files"]], "write() (pycbc.inference.io.txt.inferencetxtfile class method)": [[62, "pycbc.inference.io.txt.InferenceTXTFile.write"]], "write_acceptance_fraction() (pycbc.inference.io.emcee.emceefile method)": [[62, "pycbc.inference.io.emcee.EmceeFile.write_acceptance_fraction"]], "write_acceptance_fraction() (pycbc.inference.io.emcee_pt.emceeptfile method)": [[62, "pycbc.inference.io.emcee_pt.EmceePTFile.write_acceptance_fraction"]], "write_acceptance_ratio() (pycbc.inference.io.epsie.epsiefile method)": [[62, "pycbc.inference.io.epsie.EpsieFile.write_acceptance_ratio"]], "write_betas() (pycbc.inference.io.ptemcee.ptemceefile method)": [[62, "pycbc.inference.io.ptemcee.PTEmceeFile.write_betas"]], "write_command_line() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_command_line"]], "write_config_file() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_config_file"]], "write_data() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_data"]], "write_effective_nsamples() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_effective_nsamples"]], "write_ensemble_attrs() (pycbc.inference.io.ptemcee.ptemceefile method)": [[62, "pycbc.inference.io.ptemcee.PTEmceeFile.write_ensemble_attrs"]], "write_injections() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_injections"]], "write_kwargs_to_attrs() (pycbc.inference.io.base_hdf.baseinferencefile class method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_kwargs_to_attrs"]], "write_logevidence() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_logevidence"]], "write_logevidence() (pycbc.inference.io.multinest.multinestfile method)": [[62, "pycbc.inference.io.multinest.MultinestFile.write_logevidence"]], "write_niterations() (pycbc.inference.io.base_mcmc.commonmcmcmetadataio method)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.write_niterations"]], "write_niterations() (pycbc.inference.io.base_nested_sampler.basenestedsamplerfile method)": [[62, "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile.write_niterations"]], "write_niterations() (pycbc.inference.io.multinest.multinestfile method)": [[62, "pycbc.inference.io.multinest.MultinestFile.write_niterations"]], "write_pickled_data_into_checkpoint_file() (pycbc.inference.io.dynesty.commonnestedmetadataio method)": [[62, "pycbc.inference.io.dynesty.CommonNestedMetadataIO.write_pickled_data_into_checkpoint_file"]], "write_psd() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_psd"]], "write_random_state() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_random_state"]], "write_raw_samples() (pycbc.inference.io.dynesty.commonnestedmetadataio method)": [[62, "pycbc.inference.io.dynesty.CommonNestedMetadataIO.write_raw_samples"]], "write_resume_point() (pycbc.inference.io.base_mcmc.commonmcmcmetadataio method)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.write_resume_point"]], "write_resume_point() (pycbc.inference.io.base_nested_sampler.basenestedsamplerfile method)": [[62, "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile.write_resume_point"]], "write_resume_point() (pycbc.inference.io.base_sampler.basesamplerfile method)": [[62, "pycbc.inference.io.base_sampler.BaseSamplerFile.write_resume_point"]], "write_resume_point() (pycbc.inference.io.multinest.multinestfile method)": [[62, "pycbc.inference.io.multinest.MultinestFile.write_resume_point"]], "write_resume_point() (pycbc.inference.io.posterior.posteriorfile method)": [[62, "pycbc.inference.io.posterior.PosteriorFile.write_resume_point"]], "write_run_end_time() (pycbc.inference.io.base_sampler.basesamplerfile method)": [[62, "pycbc.inference.io.base_sampler.BaseSamplerFile.write_run_end_time"]], "write_run_end_time() (pycbc.inference.io.posterior.posteriorfile method)": [[62, "pycbc.inference.io.posterior.PosteriorFile.write_run_end_time"]], "write_run_start_time() (pycbc.inference.io.base_sampler.basesamplerfile method)": [[62, "pycbc.inference.io.base_sampler.BaseSamplerFile.write_run_start_time"]], "write_run_start_time() (pycbc.inference.io.posterior.posteriorfile method)": [[62, "pycbc.inference.io.posterior.PosteriorFile.write_run_start_time"]], "write_sampler_metadata() (pycbc.inference.io.base_mcmc.commonmcmcmetadataio method)": [[62, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.base_multitemper.commonmultitemperedmetadataio method)": [[62, "pycbc.inference.io.base_multitemper.CommonMultiTemperedMetadataIO.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.base_nested_sampler.basenestedsamplerfile method)": [[62, "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.base_sampler.basesamplerfile method)": [[62, "pycbc.inference.io.base_sampler.BaseSamplerFile.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.emcee_pt.emceeptfile method)": [[62, "pycbc.inference.io.emcee_pt.EmceePTFile.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.epsie.epsiefile method)": [[62, "pycbc.inference.io.epsie.EpsieFile.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.multinest.multinestfile method)": [[62, "pycbc.inference.io.multinest.MultinestFile.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.posterior.posteriorfile method)": [[62, "pycbc.inference.io.posterior.PosteriorFile.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.ptemcee.ptemceefile method)": [[62, "pycbc.inference.io.ptemcee.PTEmceeFile.write_sampler_metadata"]], "write_samples() (in module pycbc.inference.io.base_mcmc)": [[62, "pycbc.inference.io.base_mcmc.write_samples"]], "write_samples() (in module pycbc.inference.io.base_multitemper)": [[62, "pycbc.inference.io.base_multitemper.write_samples"]], "write_samples() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_samples"]], "write_samples() (pycbc.inference.io.base_nested_sampler.basenestedsamplerfile method)": [[62, "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile.write_samples"]], "write_samples() (pycbc.inference.io.emcee.emceefile method)": [[62, "pycbc.inference.io.emcee.EmceeFile.write_samples"]], "write_samples() (pycbc.inference.io.emcee_pt.emceeptfile method)": [[62, "pycbc.inference.io.emcee_pt.EmceePTFile.write_samples"]], "write_samples() (pycbc.inference.io.epsie.epsiefile method)": [[62, "pycbc.inference.io.epsie.EpsieFile.write_samples"]], "write_samples() (pycbc.inference.io.multinest.multinestfile method)": [[62, "pycbc.inference.io.multinest.MultinestFile.write_samples"]], "write_samples() (pycbc.inference.io.posterior.posteriorfile method)": [[62, "pycbc.inference.io.posterior.PosteriorFile.write_samples"]], "write_samples() (pycbc.inference.io.ptemcee.ptemceefile method)": [[62, "pycbc.inference.io.ptemcee.PTEmceeFile.write_samples"]], "write_samples_to_file() (in module pycbc.inference.io.posterior)": [[62, "pycbc.inference.io.posterior.write_samples_to_file"]], "write_stilde() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_stilde"]], "write_strain() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[62, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_strain"]], "write_temperature_data() (pycbc.inference.io.epsie.epsiefile method)": [[62, "pycbc.inference.io.epsie.EpsieFile.write_temperature_data"]], "epsieatadaptiveangular (class in pycbc.inference.jump.angular)": [[63, "pycbc.inference.jump.angular.EpsieATAdaptiveAngular"]], "epsieatadaptiveboundednormal (class in pycbc.inference.jump.bounded_normal)": [[63, "pycbc.inference.jump.bounded_normal.EpsieATAdaptiveBoundedNormal"]], "epsieatadaptivenormal (class in pycbc.inference.jump.normal)": [[63, "pycbc.inference.jump.normal.EpsieATAdaptiveNormal"]], "epsieadaptiveangular (class in pycbc.inference.jump.angular)": [[63, "pycbc.inference.jump.angular.EpsieAdaptiveAngular"]], "epsieadaptiveboundeddiscrete (class in pycbc.inference.jump.discrete)": [[63, "pycbc.inference.jump.discrete.EpsieAdaptiveBoundedDiscrete"]], "epsieadaptiveboundednormal (class in pycbc.inference.jump.bounded_normal)": [[63, "pycbc.inference.jump.bounded_normal.EpsieAdaptiveBoundedNormal"]], "epsieadaptivenormal (class in pycbc.inference.jump.normal)": [[63, "pycbc.inference.jump.normal.EpsieAdaptiveNormal"]], "epsieadaptivenormaldiscrete (class in pycbc.inference.jump.discrete)": [[63, "pycbc.inference.jump.discrete.EpsieAdaptiveNormalDiscrete"]], "epsieangular (class in pycbc.inference.jump.angular)": [[63, "pycbc.inference.jump.angular.EpsieAngular"]], "epsieboundeddiscrete (class in pycbc.inference.jump.discrete)": [[63, "pycbc.inference.jump.discrete.EpsieBoundedDiscrete"]], "epsieboundednormal (class in pycbc.inference.jump.bounded_normal)": [[63, "pycbc.inference.jump.bounded_normal.EpsieBoundedNormal"]], "epsienormal (class in pycbc.inference.jump.normal)": [[63, "pycbc.inference.jump.normal.EpsieNormal"]], "epsienormaldiscrete (class in pycbc.inference.jump.discrete)": [[63, "pycbc.inference.jump.discrete.EpsieNormalDiscrete"]], "epsie_adaptive_from_config() (in module pycbc.inference.jump.normal)": [[63, "pycbc.inference.jump.normal.epsie_adaptive_from_config"]], "epsie_at_adaptive_from_config() (in module pycbc.inference.jump.normal)": [[63, "pycbc.inference.jump.normal.epsie_at_adaptive_from_config"]], "epsie_from_config() (in module pycbc.inference.jump.normal)": [[63, "pycbc.inference.jump.normal.epsie_from_config"]], "epsie_proposals_from_config() (in module pycbc.inference.jump)": [[63, "pycbc.inference.jump.epsie_proposals_from_config"]], "from_config() (pycbc.inference.jump.angular.epsieatadaptiveangular class method)": [[63, "pycbc.inference.jump.angular.EpsieATAdaptiveAngular.from_config"]], "from_config() (pycbc.inference.jump.angular.epsieadaptiveangular class method)": [[63, "pycbc.inference.jump.angular.EpsieAdaptiveAngular.from_config"]], "from_config() (pycbc.inference.jump.angular.epsieangular class method)": [[63, "pycbc.inference.jump.angular.EpsieAngular.from_config"]], "from_config() (pycbc.inference.jump.bounded_normal.epsieatadaptiveboundednormal class method)": [[63, "pycbc.inference.jump.bounded_normal.EpsieATAdaptiveBoundedNormal.from_config"]], "from_config() (pycbc.inference.jump.bounded_normal.epsieadaptiveboundednormal class method)": [[63, "pycbc.inference.jump.bounded_normal.EpsieAdaptiveBoundedNormal.from_config"]], "from_config() (pycbc.inference.jump.bounded_normal.epsieboundednormal class method)": [[63, "pycbc.inference.jump.bounded_normal.EpsieBoundedNormal.from_config"]], "from_config() (pycbc.inference.jump.discrete.epsieadaptiveboundeddiscrete class method)": [[63, "pycbc.inference.jump.discrete.EpsieAdaptiveBoundedDiscrete.from_config"]], "from_config() (pycbc.inference.jump.discrete.epsieadaptivenormaldiscrete class method)": [[63, "pycbc.inference.jump.discrete.EpsieAdaptiveNormalDiscrete.from_config"]], "from_config() (pycbc.inference.jump.discrete.epsieboundeddiscrete class method)": [[63, "pycbc.inference.jump.discrete.EpsieBoundedDiscrete.from_config"]], "from_config() (pycbc.inference.jump.discrete.epsienormaldiscrete class method)": [[63, "pycbc.inference.jump.discrete.EpsieNormalDiscrete.from_config"]], "from_config() (pycbc.inference.jump.normal.epsieatadaptivenormal class method)": [[63, "pycbc.inference.jump.normal.EpsieATAdaptiveNormal.from_config"]], "from_config() (pycbc.inference.jump.normal.epsieadaptivenormal class method)": [[63, "pycbc.inference.jump.normal.EpsieAdaptiveNormal.from_config"]], "from_config() (pycbc.inference.jump.normal.epsienormal class method)": [[63, "pycbc.inference.jump.normal.EpsieNormal.from_config"]], "get_epsie_adaptation_settings() (in module pycbc.inference.jump.normal)": [[63, "pycbc.inference.jump.normal.get_epsie_adaptation_settings"]], "get_epsie_discrete_successive_settings() (in module pycbc.inference.jump.normal)": [[63, "pycbc.inference.jump.normal.get_epsie_discrete_successive_settings"]], "get_param_boundaries() (in module pycbc.inference.jump.normal)": [[63, "pycbc.inference.jump.normal.get_param_boundaries"]], "get_variance() (in module pycbc.inference.jump.normal)": [[63, "pycbc.inference.jump.normal.get_variance"]], "load_opts() (in module pycbc.inference.jump.normal)": [[63, "pycbc.inference.jump.normal.load_opts"]], "pycbc.inference.jump": [[63, "module-pycbc.inference.jump"]], "pycbc.inference.jump.angular": [[63, "module-pycbc.inference.jump.angular"]], "pycbc.inference.jump.bounded_normal": [[63, "module-pycbc.inference.jump.bounded_normal"]], "pycbc.inference.jump.discrete": [[63, "module-pycbc.inference.jump.discrete"]], "pycbc.inference.jump.normal": [[63, "module-pycbc.inference.jump.normal"]], "basedatamodel (class in pycbc.inference.models.base_data)": [[64, "pycbc.inference.models.base_data.BaseDataModel"]], "basegatedgaussian (class in pycbc.inference.models.gated_gaussian_noise)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian"]], "basegaussiannoise (class in pycbc.inference.models.gaussian_noise)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise"]], "basemodel (class in pycbc.inference.models.base)": [[64, "pycbc.inference.models.base.BaseModel"]], "brutelisaskymodesmarginalize (class in pycbc.inference.models.brute_marg)": [[64, "pycbc.inference.models.brute_marg.BruteLISASkyModesMarginalize"]], "bruteparallelgaussianmarginalize (class in pycbc.inference.models.brute_marg)": [[64, "pycbc.inference.models.brute_marg.BruteParallelGaussianMarginalize"]], "callmodel (class in pycbc.inference.models)": [[64, "pycbc.inference.models.CallModel"]], "distmarg (class in pycbc.inference.models.tools)": [[64, "pycbc.inference.models.tools.DistMarg"]], "gatedgaussianmargpol (class in pycbc.inference.models.gated_gaussian_noise)": [[64, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianMargPol"]], "gatedgaussiannoise (class in pycbc.inference.models.gated_gaussian_noise)": [[64, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianNoise"]], "gaussiannoise (class in pycbc.inference.models.gaussian_noise)": [[64, "pycbc.inference.models.gaussian_noise.GaussianNoise"]], "hierarchicalmodel (class in pycbc.inference.models.hierarchical)": [[64, "pycbc.inference.models.hierarchical.HierarchicalModel"]], "hierarchicalparam (class in pycbc.inference.models.hierarchical)": [[64, "pycbc.inference.models.hierarchical.HierarchicalParam"]], "jointprimarymarginalizedmodel (class in pycbc.inference.models.hierarchical)": [[64, "pycbc.inference.models.hierarchical.JointPrimaryMarginalizedModel"]], "marginalizedhmpolphase (class in pycbc.inference.models.marginalized_gaussian_noise)": [[64, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedHMPolPhase"]], "marginalizedphasegaussiannoise (class in pycbc.inference.models.marginalized_gaussian_noise)": [[64, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedPhaseGaussianNoise"]], "marginalizedpolarization (class in pycbc.inference.models.marginalized_gaussian_noise)": [[64, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedPolarization"]], "marginalizedtime (class in pycbc.inference.models.marginalized_gaussian_noise)": [[64, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedTime"]], "modelstats (class in pycbc.inference.models.base)": [[64, "pycbc.inference.models.base.ModelStats"]], "multisignalmodel (class in pycbc.inference.models.hierarchical)": [[64, "pycbc.inference.models.hierarchical.MultiSignalModel"]], "novaliddataerror": [[64, "pycbc.inference.models.data_utils.NoValidDataError"]], "relative (class in pycbc.inference.models.relbin)": [[64, "pycbc.inference.models.relbin.Relative"]], "relativetime (class in pycbc.inference.models.relbin)": [[64, "pycbc.inference.models.relbin.RelativeTime"]], "relativetimedom (class in pycbc.inference.models.relbin)": [[64, "pycbc.inference.models.relbin.RelativeTimeDom"]], "samplingtransforms (class in pycbc.inference.models.base)": [[64, "pycbc.inference.models.base.SamplingTransforms"]], "singletemplate (class in pycbc.inference.models.single_template)": [[64, "pycbc.inference.models.single_template.SingleTemplate"]], "testeggbox (class in pycbc.inference.models.analytic)": [[64, "pycbc.inference.models.analytic.TestEggbox"]], "testnormal (class in pycbc.inference.models.analytic)": [[64, "pycbc.inference.models.analytic.TestNormal"]], "testposterior (class in pycbc.inference.models.analytic)": [[64, "pycbc.inference.models.analytic.TestPosterior"]], "testprior (class in pycbc.inference.models.analytic)": [[64, "pycbc.inference.models.analytic.TestPrior"]], "testrosenbrock (class in pycbc.inference.models.analytic)": [[64, "pycbc.inference.models.analytic.TestRosenbrock"]], "testvolcano (class in pycbc.inference.models.analytic)": [[64, "pycbc.inference.models.analytic.TestVolcano"]], "apply() (pycbc.inference.models.base.samplingtransforms method)": [[64, "pycbc.inference.models.base.SamplingTransforms.apply"]], "available_models() (in module pycbc.inference.models)": [[64, "pycbc.inference.models.available_models"]], "calculate_hihjs() (pycbc.inference.models.relbin.relative method)": [[64, "pycbc.inference.models.relbin.Relative.calculate_hihjs"]], "calculate_hihjs() (pycbc.inference.models.single_template.singletemplate method)": [[64, "pycbc.inference.models.single_template.SingleTemplate.calculate_hihjs"]], "check_for_cartesian_spins() (in module pycbc.inference.models.base)": [[64, "pycbc.inference.models.base.check_for_cartesian_spins"]], "check_for_nans() (in module pycbc.inference.models.data_utils)": [[64, "pycbc.inference.models.data_utils.check_for_nans"]], "check_validtimes() (in module pycbc.inference.models.data_utils)": [[64, "pycbc.inference.models.data_utils.check_validtimes"]], "combine_layout() (pycbc.inference.models.relbin.relative method)": [[64, "pycbc.inference.models.relbin.Relative.combine_layout"]], "create_data_parser() (in module pycbc.inference.models.data_utils)": [[64, "pycbc.inference.models.data_utils.create_data_parser"]], "create_waveform_generator() (in module pycbc.inference.models.gaussian_noise)": [[64, "pycbc.inference.models.gaussian_noise.create_waveform_generator"]], "current_params (pycbc.inference.models.base.basemodel property)": [[64, "pycbc.inference.models.base.BaseModel.current_params"]], "current_params (pycbc.inference.models.tools.distmarg property)": [[64, "pycbc.inference.models.tools.DistMarg.current_params"]], "current_stats (pycbc.inference.models.base.basemodel property)": [[64, "pycbc.inference.models.base.BaseModel.current_stats"]], "data (pycbc.inference.models.base_data.basedatamodel property)": [[64, "pycbc.inference.models.base_data.BaseDataModel.data"]], "data (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian property)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.data"]], "data_from_cli() (in module pycbc.inference.models.data_utils)": [[64, "pycbc.inference.models.data_utils.data_from_cli"]], "data_opts_from_config() (in module pycbc.inference.models.data_utils)": [[64, "pycbc.inference.models.data_utils.data_opts_from_config"]], "default_stats (pycbc.inference.models.base.basemodel property)": [[64, "pycbc.inference.models.base.BaseModel.default_stats"]], "delim (pycbc.inference.models.hierarchical.hierarchicalparam attribute)": [[64, "pycbc.inference.models.hierarchical.HierarchicalParam.delim"]], "det_cplx_loglr() (pycbc.inference.models.gaussian_noise.gaussiannoise method)": [[64, "pycbc.inference.models.gaussian_noise.GaussianNoise.det_cplx_loglr"]], "det_lognl() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.det_lognl"]], "det_lognl() (pycbc.inference.models.gaussian_noise.basegaussiannoise method)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.det_lognl"]], "det_lognorm() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.det_lognorm"]], "det_lognorm() (pycbc.inference.models.gaussian_noise.basegaussiannoise method)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.det_lognorm"]], "det_optimal_snrsq() (pycbc.inference.models.gaussian_noise.gaussiannoise method)": [[64, "pycbc.inference.models.gaussian_noise.GaussianNoise.det_optimal_snrsq"]], "detectors (pycbc.inference.models.base_data.basedatamodel property)": [[64, "pycbc.inference.models.base_data.BaseDataModel.detectors"]], "detectors_with_valid_data() (in module pycbc.inference.models.data_utils)": [[64, "pycbc.inference.models.data_utils.detectors_with_valid_data"]], "distance_interpolator (pycbc.inference.models.tools.distmarg attribute)": [[64, "pycbc.inference.models.tools.DistMarg.distance_interpolator"]], "distance_marginalization (pycbc.inference.models.tools.distmarg attribute)": [[64, "pycbc.inference.models.tools.DistMarg.distance_marginalization"]], "draw_ifos() (pycbc.inference.models.tools.distmarg method)": [[64, "pycbc.inference.models.tools.DistMarg.draw_ifos"]], "draw_sample() (in module pycbc.inference.models.tools)": [[64, "pycbc.inference.models.tools.draw_sample"]], "draw_sky_times() (pycbc.inference.models.tools.distmarg method)": [[64, "pycbc.inference.models.tools.DistMarg.draw_sky_times"]], "draw_times() (pycbc.inference.models.tools.distmarg method)": [[64, "pycbc.inference.models.tools.DistMarg.draw_times"]], "extra_args_from_config() (pycbc.inference.models.base.basemodel static method)": [[64, "pycbc.inference.models.base.BaseModel.extra_args_from_config"]], "extra_args_from_config() (pycbc.inference.models.relbin.relative static method)": [[64, "pycbc.inference.models.relbin.Relative.extra_args_from_config"]], "fd_data_from_strain_dict() (in module pycbc.inference.models.data_utils)": [[64, "pycbc.inference.models.data_utils.fd_data_from_strain_dict"]], "from_config() (pycbc.inference.models.base.basemodel class method)": [[64, "pycbc.inference.models.base.BaseModel.from_config"]], "from_config() (pycbc.inference.models.base.samplingtransforms class method)": [[64, "pycbc.inference.models.base.SamplingTransforms.from_config"]], "from_config() (pycbc.inference.models.brute_marg.brutelisaskymodesmarginalize class method)": [[64, "pycbc.inference.models.brute_marg.BruteLISASkyModesMarginalize.from_config"]], "from_config() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian class method)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.from_config"]], "from_config() (pycbc.inference.models.gaussian_noise.basegaussiannoise class method)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.from_config"]], "from_config() (pycbc.inference.models.hierarchical.hierarchicalmodel class method)": [[64, "pycbc.inference.models.hierarchical.HierarchicalModel.from_config"]], "from_config() (pycbc.inference.models.hierarchical.jointprimarymarginalizedmodel class method)": [[64, "pycbc.inference.models.hierarchical.JointPrimaryMarginalizedModel.from_config"]], "from_subname() (pycbc.inference.models.hierarchical.hierarchicalparam class method)": [[64, "pycbc.inference.models.hierarchical.HierarchicalParam.from_subname"]], "fullname (pycbc.inference.models.hierarchical.hierarchicalparam attribute)": [[64, "pycbc.inference.models.hierarchical.HierarchicalParam.fullname"]], "gate_overwhitened_data() (in module pycbc.inference.models.data_utils)": [[64, "pycbc.inference.models.data_utils.gate_overwhitened_data"]], "get_current_stats() (pycbc.inference.models.base.basemodel method)": [[64, "pycbc.inference.models.base.BaseModel.get_current_stats"]], "get_data() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.get_data"]], "get_gate_times() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.get_gate_times"]], "get_gate_times_hmeco() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.get_gate_times_hmeco"]], "get_gated_data() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.get_gated_data"]], "get_gated_residuals() (pycbc.inference.models.gated_gaussian_noise.gatedgaussiannoise method)": [[64, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianNoise.get_gated_residuals"]], "get_gated_waveforms() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.get_gated_waveforms"]], "get_gated_waveforms() (pycbc.inference.models.gated_gaussian_noise.gatedgaussianmargpol method)": [[64, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianMargPol.get_gated_waveforms"]], "get_gated_waveforms() (pycbc.inference.models.gated_gaussian_noise.gatedgaussiannoise method)": [[64, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianNoise.get_gated_waveforms"]], "get_model() (in module pycbc.inference.models)": [[64, "pycbc.inference.models.get_model"]], "get_models() (in module pycbc.inference.models)": [[64, "pycbc.inference.models.get_models"]], "get_precalc_antenna_factors() (pycbc.inference.models.tools.distmarg method)": [[64, "pycbc.inference.models.tools.DistMarg.get_precalc_antenna_factors"]], "get_residuals() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.get_residuals"]], "get_snr() (pycbc.inference.models.relbin.relativetime method)": [[64, "pycbc.inference.models.relbin.RelativeTime.get_snr"]], "get_snr() (pycbc.inference.models.relbin.relativetimedom method)": [[64, "pycbc.inference.models.relbin.RelativeTimeDom.get_snr"]], "get_values_from_injection() (in module pycbc.inference.models.gaussian_noise)": [[64, "pycbc.inference.models.gaussian_noise.get_values_from_injection"]], "get_waveforms() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.get_waveforms"]], "get_waveforms() (pycbc.inference.models.gated_gaussian_noise.gatedgaussianmargpol method)": [[64, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianMargPol.get_waveforms"]], "get_waveforms() (pycbc.inference.models.gaussian_noise.gaussiannoise method)": [[64, "pycbc.inference.models.gaussian_noise.GaussianNoise.get_waveforms"]], "get_waveforms() (pycbc.inference.models.relbin.relative method)": [[64, "pycbc.inference.models.relbin.Relative.get_waveforms"]], "getstats() (pycbc.inference.models.base.modelstats method)": [[64, "pycbc.inference.models.base.ModelStats.getstats"]], "getstatsdict() (pycbc.inference.models.base.modelstats method)": [[64, "pycbc.inference.models.base.ModelStats.getstatsdict"]], "high_frequency_cutoff (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.high_frequency_cutoff"]], "hpiter() (in module pycbc.inference.models.hierarchical)": [[64, "pycbc.inference.models.hierarchical.hpiter"]], "hstatic_params (pycbc.inference.models.hierarchical.hierarchicalmodel property)": [[64, "pycbc.inference.models.hierarchical.HierarchicalModel.hstatic_params"]], "hvariable_params (pycbc.inference.models.hierarchical.hierarchicalmodel property)": [[64, "pycbc.inference.models.hierarchical.HierarchicalModel.hvariable_params"]], "ignore_failed_waveforms (pycbc.inference.models.gaussian_noise.basegaussiannoise attribute)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.ignore_failed_waveforms"]], "init_from_frequencies() (pycbc.inference.models.relbin.relative method)": [[64, "pycbc.inference.models.relbin.Relative.init_from_frequencies"]], "kmax (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.kmax"]], "kmin (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.kmin"]], "likelihood_function (pycbc.inference.models.relbin.relative property)": [[64, "pycbc.inference.models.relbin.Relative.likelihood_function"]], "likelihood_parts() (in module pycbc.inference.models.relbin_cpu)": [[64, "pycbc.inference.models.relbin_cpu.likelihood_parts"]], "likelihood_parts_det() (in module pycbc.inference.models.relbin_cpu)": [[64, "pycbc.inference.models.relbin_cpu.likelihood_parts_det"]], "likelihood_parts_det_multi() (in module pycbc.inference.models.relbin_cpu)": [[64, "pycbc.inference.models.relbin_cpu.likelihood_parts_det_multi"]], "likelihood_parts_multi() (in module pycbc.inference.models.relbin_cpu)": [[64, "pycbc.inference.models.relbin_cpu.likelihood_parts_multi"]], "likelihood_parts_multi_v() (in module pycbc.inference.models.relbin_cpu)": [[64, "pycbc.inference.models.relbin_cpu.likelihood_parts_multi_v"]], "likelihood_parts_v() (in module pycbc.inference.models.relbin_cpu)": [[64, "pycbc.inference.models.relbin_cpu.likelihood_parts_v"]], "likelihood_parts_v_pol() (in module pycbc.inference.models.relbin_cpu)": [[64, "pycbc.inference.models.relbin_cpu.likelihood_parts_v_pol"]], "likelihood_parts_v_pol_time() (in module pycbc.inference.models.relbin_cpu)": [[64, "pycbc.inference.models.relbin_cpu.likelihood_parts_v_pol_time"]], "likelihood_parts_v_time() (in module pycbc.inference.models.relbin_cpu)": [[64, "pycbc.inference.models.relbin_cpu.likelihood_parts_v_time"]], "likelihood_parts_vector() (in module pycbc.inference.models.relbin_cpu)": [[64, "pycbc.inference.models.relbin_cpu.likelihood_parts_vector"]], "likelihood_parts_vectorp() (in module pycbc.inference.models.relbin_cpu)": [[64, "pycbc.inference.models.relbin_cpu.likelihood_parts_vectorp"]], "likelihood_parts_vectort() (in module pycbc.inference.models.relbin_cpu)": [[64, "pycbc.inference.models.relbin_cpu.likelihood_parts_vectort"]], "likelihood_wrapper (class in pycbc.inference.models.brute_marg)": [[64, "pycbc.inference.models.brute_marg.likelihood_wrapper"]], "logjacobian (pycbc.inference.models.base.basemodel property)": [[64, "pycbc.inference.models.base.BaseModel.logjacobian"]], "logjacobian() (pycbc.inference.models.base.samplingtransforms method)": [[64, "pycbc.inference.models.base.SamplingTransforms.logjacobian"]], "loglikelihood (pycbc.inference.models.base.basemodel property)": [[64, "pycbc.inference.models.base.BaseModel.loglikelihood"]], "loglr (pycbc.inference.models.base_data.basedatamodel property)": [[64, "pycbc.inference.models.base_data.BaseDataModel.loglr"]], "lognl (pycbc.inference.models.base_data.basedatamodel property)": [[64, "pycbc.inference.models.base_data.BaseDataModel.lognl"]], "lognorm (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.lognorm"]], "logplr (pycbc.inference.models.base_data.basedatamodel property)": [[64, "pycbc.inference.models.base_data.BaseDataModel.logplr"]], "logposterior (pycbc.inference.models.base.basemodel property)": [[64, "pycbc.inference.models.base.BaseModel.logposterior"]], "logprior (pycbc.inference.models.base.basemodel property)": [[64, "pycbc.inference.models.base.BaseModel.logprior"]], "low_frequency_cutoff (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.low_frequency_cutoff"]], "map_params() (in module pycbc.inference.models.hierarchical)": [[64, "pycbc.inference.models.hierarchical.map_params"]], "marginalize_likelihood() (in module pycbc.inference.models.tools)": [[64, "pycbc.inference.models.tools.marginalize_likelihood"]], "marginalize_loglr() (pycbc.inference.models.tools.distmarg method)": [[64, "pycbc.inference.models.tools.DistMarg.marginalize_loglr"]], "marginalize_phase (pycbc.inference.models.tools.distmarg attribute)": [[64, "pycbc.inference.models.tools.DistMarg.marginalize_phase"]], "max_curvature_from_reference() (pycbc.inference.models.relbin.relative method)": [[64, "pycbc.inference.models.relbin.Relative.max_curvature_from_reference"]], "model_delim (pycbc.inference.models.hierarchical.hierarchicalparam attribute)": [[64, "pycbc.inference.models.hierarchical.HierarchicalParam.model_delim"]], "models (pycbc.inference.models.hierarchical.hierarchicalparam attribute)": [[64, "pycbc.inference.models.hierarchical.HierarchicalParam.models"]], "multi_loglikelihood() (pycbc.inference.models.gaussian_noise.gaussiannoise method)": [[64, "pycbc.inference.models.gaussian_noise.GaussianNoise.multi_loglikelihood"]], "multi_loglikelihood() (pycbc.inference.models.relbin.relative method)": [[64, "pycbc.inference.models.relbin.Relative.multi_loglikelihood"]], "multi_loglikelihood() (pycbc.inference.models.single_template.singletemplate method)": [[64, "pycbc.inference.models.single_template.SingleTemplate.multi_loglikelihood"]], "multi_signal_support (pycbc.inference.models.gaussian_noise.gaussiannoise property)": [[64, "pycbc.inference.models.gaussian_noise.GaussianNoise.multi_signal_support"]], "multi_signal_support (pycbc.inference.models.relbin.relative property)": [[64, "pycbc.inference.models.relbin.Relative.multi_signal_support"]], "multi_signal_support (pycbc.inference.models.single_template.singletemplate property)": [[64, "pycbc.inference.models.single_template.SingleTemplate.multi_signal_support"]], "name (pycbc.inference.models.analytic.testeggbox attribute)": [[64, "pycbc.inference.models.analytic.TestEggbox.name"]], "name (pycbc.inference.models.analytic.testnormal attribute)": [[64, "pycbc.inference.models.analytic.TestNormal.name"]], "name (pycbc.inference.models.analytic.testposterior attribute)": [[64, "pycbc.inference.models.analytic.TestPosterior.name"]], "name (pycbc.inference.models.analytic.testprior attribute)": [[64, "pycbc.inference.models.analytic.TestPrior.name"]], "name (pycbc.inference.models.analytic.testrosenbrock attribute)": [[64, "pycbc.inference.models.analytic.TestRosenbrock.name"]], "name (pycbc.inference.models.analytic.testvolcano attribute)": [[64, "pycbc.inference.models.analytic.TestVolcano.name"]], "name (pycbc.inference.models.base.basemodel attribute)": [[64, "pycbc.inference.models.base.BaseModel.name"]], "name (pycbc.inference.models.brute_marg.brutelisaskymodesmarginalize attribute)": [[64, "pycbc.inference.models.brute_marg.BruteLISASkyModesMarginalize.name"]], "name (pycbc.inference.models.brute_marg.bruteparallelgaussianmarginalize attribute)": [[64, "pycbc.inference.models.brute_marg.BruteParallelGaussianMarginalize.name"]], "name (pycbc.inference.models.gated_gaussian_noise.gatedgaussianmargpol attribute)": [[64, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianMargPol.name"]], "name (pycbc.inference.models.gated_gaussian_noise.gatedgaussiannoise attribute)": [[64, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianNoise.name"]], "name (pycbc.inference.models.gaussian_noise.gaussiannoise attribute)": [[64, "pycbc.inference.models.gaussian_noise.GaussianNoise.name"]], "name (pycbc.inference.models.hierarchical.hierarchicalmodel attribute)": [[64, "pycbc.inference.models.hierarchical.HierarchicalModel.name"]], "name (pycbc.inference.models.hierarchical.jointprimarymarginalizedmodel attribute)": [[64, "pycbc.inference.models.hierarchical.JointPrimaryMarginalizedModel.name"]], "name (pycbc.inference.models.hierarchical.multisignalmodel attribute)": [[64, "pycbc.inference.models.hierarchical.MultiSignalModel.name"]], "name (pycbc.inference.models.marginalized_gaussian_noise.marginalizedhmpolphase attribute)": [[64, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedHMPolPhase.name"]], "name (pycbc.inference.models.marginalized_gaussian_noise.marginalizedphasegaussiannoise attribute)": [[64, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedPhaseGaussianNoise.name"]], "name (pycbc.inference.models.marginalized_gaussian_noise.marginalizedpolarization attribute)": [[64, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedPolarization.name"]], "name (pycbc.inference.models.marginalized_gaussian_noise.marginalizedtime attribute)": [[64, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedTime.name"]], "name (pycbc.inference.models.relbin.relative attribute)": [[64, "pycbc.inference.models.relbin.Relative.name"]], "name (pycbc.inference.models.relbin.relativetime attribute)": [[64, "pycbc.inference.models.relbin.RelativeTime.name"]], "name (pycbc.inference.models.relbin.relativetimedom attribute)": [[64, "pycbc.inference.models.relbin.RelativeTimeDom.name"]], "name (pycbc.inference.models.single_template.singletemplate attribute)": [[64, "pycbc.inference.models.single_template.SingleTemplate.name"]], "normalize (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian property)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.normalize"]], "normalize (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.normalize"]], "others_lognl() (pycbc.inference.models.hierarchical.jointprimarymarginalizedmodel method)": [[64, "pycbc.inference.models.hierarchical.JointPrimaryMarginalizedModel.others_lognl"]], "parse() (pycbc.inference.models.hierarchical.hierarchicalparam class method)": [[64, "pycbc.inference.models.hierarchical.HierarchicalParam.parse"]], "phase_fac() (pycbc.inference.models.marginalized_gaussian_noise.marginalizedhmpolphase method)": [[64, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedHMPolPhase.phase_fac"]], "premarg_draw() (pycbc.inference.models.tools.distmarg method)": [[64, "pycbc.inference.models.tools.DistMarg.premarg_draw"]], "prior_from_config() (pycbc.inference.models.base.basemodel static method)": [[64, "pycbc.inference.models.base.BaseModel.prior_from_config"]], "prior_rvs() (pycbc.inference.models.base.basemodel method)": [[64, "pycbc.inference.models.base.BaseModel.prior_rvs"]], "psd_segments (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.psd_segments"]], "psds (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian property)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.psds"]], "psds (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.psds"]], "pycbc.inference.models": [[64, "module-pycbc.inference.models"]], "pycbc.inference.models.analytic": [[64, "module-pycbc.inference.models.analytic"]], "pycbc.inference.models.base": [[64, "module-pycbc.inference.models.base"]], "pycbc.inference.models.base_data": [[64, "module-pycbc.inference.models.base_data"]], "pycbc.inference.models.brute_marg": [[64, "module-pycbc.inference.models.brute_marg"]], "pycbc.inference.models.data_utils": [[64, "module-pycbc.inference.models.data_utils"]], "pycbc.inference.models.gated_gaussian_noise": [[64, "module-pycbc.inference.models.gated_gaussian_noise"]], "pycbc.inference.models.gaussian_noise": [[64, "module-pycbc.inference.models.gaussian_noise"]], "pycbc.inference.models.hierarchical": [[64, "module-pycbc.inference.models.hierarchical"]], "pycbc.inference.models.marginalized_gaussian_noise": [[64, "module-pycbc.inference.models.marginalized_gaussian_noise"]], "pycbc.inference.models.relbin": [[64, "module-pycbc.inference.models.relbin"]], "pycbc.inference.models.relbin_cpu": [[64, "module-pycbc.inference.models.relbin_cpu"]], "pycbc.inference.models.single_template": [[64, "module-pycbc.inference.models.single_template"]], "pycbc.inference.models.tools": [[64, "module-pycbc.inference.models.tools"]], "read_from_config() (in module pycbc.inference.models)": [[64, "pycbc.inference.models.read_from_config"]], "read_sampling_params_from_config() (in module pycbc.inference.models.base)": [[64, "pycbc.inference.models.base.read_sampling_params_from_config"]], "reconstruct() (pycbc.inference.models.brute_marg.brutelisaskymodesmarginalize method)": [[64, "pycbc.inference.models.brute_marg.BruteLISASkyModesMarginalize.reconstruct"]], "reconstruct() (pycbc.inference.models.hierarchical.jointprimarymarginalizedmodel method)": [[64, "pycbc.inference.models.hierarchical.JointPrimaryMarginalizedModel.reconstruct"]], "reconstruct() (pycbc.inference.models.tools.distmarg method)": [[64, "pycbc.inference.models.tools.DistMarg.reconstruct"]], "ref_snr (pycbc.inference.models.relbin.relativetime property)": [[64, "pycbc.inference.models.relbin.RelativeTime.ref_snr"]], "register_model() (in module pycbc.inference.models)": [[64, "pycbc.inference.models.register_model"]], "reset_vector_params() (pycbc.inference.models.tools.distmarg method)": [[64, "pycbc.inference.models.tools.DistMarg.reset_vector_params"]], "sampling_params (pycbc.inference.models.base.basemodel property)": [[64, "pycbc.inference.models.base.BaseModel.sampling_params"]], "set_psd_segments() (pycbc.inference.models.gaussian_noise.basegaussiannoise method)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.set_psd_segments"]], "setup_antenna() (pycbc.inference.models.relbin.relative method)": [[64, "pycbc.inference.models.relbin.Relative.setup_antenna"]], "setup_bins() (in module pycbc.inference.models.relbin)": [[64, "pycbc.inference.models.relbin.setup_bins"]], "setup_distance_marg_interpolant() (in module pycbc.inference.models.tools)": [[64, "pycbc.inference.models.tools.setup_distance_marg_interpolant"]], "setup_marginalization() (pycbc.inference.models.tools.distmarg method)": [[64, "pycbc.inference.models.tools.DistMarg.setup_marginalization"]], "setup_peak_lock() (pycbc.inference.models.tools.distmarg method)": [[64, "pycbc.inference.models.tools.DistMarg.setup_peak_lock"]], "snr_draw() (pycbc.inference.models.tools.distmarg method)": [[64, "pycbc.inference.models.tools.DistMarg.snr_draw"]], "snr_predictor() (in module pycbc.inference.models.relbin_cpu)": [[64, "pycbc.inference.models.relbin_cpu.snr_predictor"]], "snr_predictor_dom() (in module pycbc.inference.models.relbin_cpu)": [[64, "pycbc.inference.models.relbin_cpu.snr_predictor_dom"]], "static_params (pycbc.inference.models.base.basemodel property)": [[64, "pycbc.inference.models.base.BaseModel.static_params"]], "static_params (pycbc.inference.models.hierarchical.hierarchicalmodel property)": [[64, "pycbc.inference.models.hierarchical.HierarchicalModel.static_params"]], "statnames (pycbc.inference.models.base.modelstats property)": [[64, "pycbc.inference.models.base.ModelStats.statnames"]], "str_to_bool() (in module pycbc.inference.models.tools)": [[64, "pycbc.inference.models.tools.str_to_bool"]], "str_to_tuple() (in module pycbc.inference.models.tools)": [[64, "pycbc.inference.models.tools.str_to_tuple"]], "strain_from_cli_multi_ifos() (in module pycbc.inference.models.data_utils)": [[64, "pycbc.inference.models.data_utils.strain_from_cli_multi_ifos"]], "subname (pycbc.inference.models.hierarchical.hierarchicalparam attribute)": [[64, "pycbc.inference.models.hierarchical.HierarchicalParam.subname"]], "summary_product() (pycbc.inference.models.relbin.relative method)": [[64, "pycbc.inference.models.relbin.Relative.summary_product"]], "td_data (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian property)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.td_data"]], "total_loglr() (pycbc.inference.models.hierarchical.jointprimarymarginalizedmodel method)": [[64, "pycbc.inference.models.hierarchical.JointPrimaryMarginalizedModel.total_loglr"]], "update() (pycbc.inference.models.base.basemodel method)": [[64, "pycbc.inference.models.base.BaseModel.update"]], "update() (pycbc.inference.models.gaussian_noise.basegaussiannoise method)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.update"]], "update_all_models() (pycbc.inference.models.hierarchical.jointprimarymarginalizedmodel method)": [[64, "pycbc.inference.models.hierarchical.JointPrimaryMarginalizedModel.update_all_models"]], "variable_params (pycbc.inference.models.base.basemodel property)": [[64, "pycbc.inference.models.base.BaseModel.variable_params"]], "variable_params (pycbc.inference.models.hierarchical.hierarchicalmodel property)": [[64, "pycbc.inference.models.hierarchical.HierarchicalModel.variable_params"]], "weight (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.weight"]], "whiten() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.whiten"]], "whitened_data (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.whitened_data"]], "write_metadata() (pycbc.inference.models.base.basemodel method)": [[64, "pycbc.inference.models.base.BaseModel.write_metadata"]], "write_metadata() (pycbc.inference.models.base_data.basedatamodel method)": [[64, "pycbc.inference.models.base_data.BaseDataModel.write_metadata"]], "write_metadata() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[64, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.write_metadata"]], "write_metadata() (pycbc.inference.models.gaussian_noise.basegaussiannoise method)": [[64, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.write_metadata"]], "write_metadata() (pycbc.inference.models.hierarchical.hierarchicalmodel method)": [[64, "pycbc.inference.models.hierarchical.HierarchicalModel.write_metadata"]], "write_metadata() (pycbc.inference.models.hierarchical.jointprimarymarginalizedmodel method)": [[64, "pycbc.inference.models.hierarchical.JointPrimaryMarginalizedModel.write_metadata"]], "write_metadata() (pycbc.inference.models.hierarchical.multisignalmodel method)": [[64, "pycbc.inference.models.hierarchical.MultiSignalModel.write_metadata"]], "write_metadata() (pycbc.inference.models.relbin.relative method)": [[64, "pycbc.inference.models.relbin.Relative.write_metadata"]], "basemcmc (class in pycbc.inference.sampler.base_mcmc)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC"]], "basesampler (class in pycbc.inference.sampler.base)": [[65, "pycbc.inference.sampler.base.BaseSampler"]], "cubemodel (class in pycbc.inference.sampler.base_cube)": [[65, "pycbc.inference.sampler.base_cube.CubeModel"]], "dummysampler (class in pycbc.inference.sampler.dummy)": [[65, "pycbc.inference.sampler.dummy.DummySampler"]], "dynestysampler (class in pycbc.inference.sampler.dynesty)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler"]], "emceeensemblesampler (class in pycbc.inference.sampler.emcee)": [[65, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler"]], "emceeptsampler (class in pycbc.inference.sampler.emcee_pt)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler"]], "ensemblesupport (class in pycbc.inference.sampler.base_mcmc)": [[65, "pycbc.inference.sampler.base_mcmc.EnsembleSupport"]], "epsiesampler (class in pycbc.inference.sampler.epsie)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler"]], "multitemperedsupport (class in pycbc.inference.sampler.base_multitemper)": [[65, "pycbc.inference.sampler.base_multitemper.MultiTemperedSupport"]], "multinestsampler (class in pycbc.inference.sampler.multinest)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler"]], "nessaimodel (class in pycbc.inference.sampler.nessai)": [[65, "pycbc.inference.sampler.nessai.NessaiModel"]], "nessaisampler (class in pycbc.inference.sampler.nessai)": [[65, "pycbc.inference.sampler.nessai.NessaiSampler"]], "ptemceesampler (class in pycbc.inference.sampler.ptemcee)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler"]], "refinesampler (class in pycbc.inference.sampler.refine)": [[65, "pycbc.inference.sampler.refine.RefineSampler"]], "snowlinesampler (class in pycbc.inference.sampler.snowline)": [[65, "pycbc.inference.sampler.snowline.SnowlineSampler"]], "ultranestsampler (class in pycbc.inference.sampler.ultranest)": [[65, "pycbc.inference.sampler.ultranest.UltranestSampler"]], "acl (pycbc.inference.sampler.base_mcmc.ensemblesupport property)": [[65, "pycbc.inference.sampler.base_mcmc.EnsembleSupport.acl"]], "acl (pycbc.inference.sampler.epsie.epsiesampler property)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.acl"]], "acl() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.acl"]], "acl_from_raw_acls() (in module pycbc.inference.sampler.base_multitemper)": [[65, "pycbc.inference.sampler.base_multitemper.acl_from_raw_acls"]], "act (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.act"]], "adaptation_lag (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.adaptation_lag"]], "adaptation_time (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.adaptation_time"]], "adaptive (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.adaptive"]], "base_shape (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.base_shape"]], "base_shape (pycbc.inference.sampler.emcee.emceeensemblesampler property)": [[65, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.base_shape"]], "base_shape (pycbc.inference.sampler.emcee_pt.emceeptsampler property)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.base_shape"]], "base_shape (pycbc.inference.sampler.epsie.epsiesampler property)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.base_shape"]], "base_shape (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.base_shape"]], "betas (pycbc.inference.sampler.emcee_pt.emceeptsampler property)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.betas"]], "betas (pycbc.inference.sampler.epsie.epsiesampler property)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.betas"]], "betas (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.betas"]], "betas_from_config() (pycbc.inference.sampler.base_multitemper.multitemperedsupport static method)": [[65, "pycbc.inference.sampler.base_multitemper.MultiTemperedSupport.betas_from_config"]], "blob_data_to_dict() (in module pycbc.inference.sampler.base_mcmc)": [[65, "pycbc.inference.sampler.base_mcmc.blob_data_to_dict"]], "burn_in (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.burn_in"]], "burn_in_class (pycbc.inference.sampler.emcee.emceeensemblesampler attribute)": [[65, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.burn_in_class"]], "burn_in_class (pycbc.inference.sampler.emcee_pt.emceeptsampler attribute)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.burn_in_class"]], "burn_in_class (pycbc.inference.sampler.epsie.epsiesampler attribute)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.burn_in_class"]], "burn_in_class (pycbc.inference.sampler.ptemcee.ptemceesampler attribute)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.burn_in_class"]], "calculate_logevidence() (pycbc.inference.sampler.emcee_pt.emceeptsampler class method)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.calculate_logevidence"]], "calculate_logevidence() (pycbc.inference.sampler.ptemcee.ptemceesampler class method)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.calculate_logevidence"]], "call_global_loglikelihood() (in module pycbc.inference.sampler.base_cube)": [[65, "pycbc.inference.sampler.base_cube.call_global_loglikelihood"]], "call_global_logprior() (in module pycbc.inference.sampler.base_cube)": [[65, "pycbc.inference.sampler.base_cube.call_global_logprior"]], "call_model() (in module pycbc.inference.sampler.refine)": [[65, "pycbc.inference.sampler.refine.call_model"]], "call_reconstruct() (in module pycbc.inference.sampler.dummy)": [[65, "pycbc.inference.sampler.dummy.call_reconstruct"]], "chain (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.chain"]], "check_if_finished() (pycbc.inference.sampler.multinest.multinestsampler method)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.check_if_finished"]], "checkpoint() (pycbc.inference.sampler.base.basesampler method)": [[65, "pycbc.inference.sampler.base.BaseSampler.checkpoint"]], "checkpoint() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.checkpoint"]], "checkpoint() (pycbc.inference.sampler.dummy.dummysampler method)": [[65, "pycbc.inference.sampler.dummy.DummySampler.checkpoint"]], "checkpoint() (pycbc.inference.sampler.dynesty.dynestysampler method)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler.checkpoint"]], "checkpoint() (pycbc.inference.sampler.multinest.multinestsampler method)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.checkpoint"]], "checkpoint() (pycbc.inference.sampler.nessai.nessaisampler method)": [[65, "pycbc.inference.sampler.nessai.NessaiSampler.checkpoint"]], "checkpoint() (pycbc.inference.sampler.snowline.snowlinesampler method)": [[65, "pycbc.inference.sampler.snowline.SnowlineSampler.checkpoint"]], "checkpoint() (pycbc.inference.sampler.ultranest.ultranestsampler method)": [[65, "pycbc.inference.sampler.ultranest.UltranestSampler.checkpoint"]], "checkpoint_callback() (pycbc.inference.sampler.nessai.nessaisampler method)": [[65, "pycbc.inference.sampler.nessai.NessaiSampler.checkpoint_callback"]], "checkpoint_from_config() (pycbc.inference.sampler.base_mcmc.basemcmc static method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.checkpoint_from_config"]], "checkpoint_interval (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.checkpoint_interval"]], "checkpoint_interval (pycbc.inference.sampler.multinest.multinestsampler property)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.checkpoint_interval"]], "checkpoint_signal (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.checkpoint_signal"]], "ckpt_signal_from_config() (pycbc.inference.sampler.base_mcmc.basemcmc static method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.ckpt_signal_from_config"]], "clear_samples() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.clear_samples"]], "clear_samples() (pycbc.inference.sampler.emcee.emceeensemblesampler method)": [[65, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.clear_samples"]], "clear_samples() (pycbc.inference.sampler.emcee_pt.emceeptsampler method)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.clear_samples"]], "clear_samples() (pycbc.inference.sampler.epsie.epsiesampler method)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.clear_samples"]], "clear_samples() (pycbc.inference.sampler.ptemcee.ptemceesampler method)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.clear_samples"]], "compare_kde() (pycbc.inference.sampler.refine.refinesampler static method)": [[65, "pycbc.inference.sampler.refine.RefineSampler.compare_kde"]], "compute_acf() (in module pycbc.inference.sampler.base_multitemper)": [[65, "pycbc.inference.sampler.base_multitemper.compute_acf"]], "compute_acf() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.compute_acf"]], "compute_acf() (pycbc.inference.sampler.emcee.emceeensemblesampler static method)": [[65, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.compute_acf"]], "compute_acf() (pycbc.inference.sampler.emcee_pt.emceeptsampler static method)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.compute_acf"]], "compute_acf() (pycbc.inference.sampler.epsie.epsiesampler static method)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.compute_acf"]], "compute_acf() (pycbc.inference.sampler.ptemcee.ptemceesampler static method)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.compute_acf"]], "compute_acl() (in module pycbc.inference.sampler.base_multitemper)": [[65, "pycbc.inference.sampler.base_multitemper.compute_acl"]], "compute_acl() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.compute_acl"]], "compute_acl() (pycbc.inference.sampler.emcee.emceeensemblesampler static method)": [[65, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.compute_acl"]], "compute_acl() (pycbc.inference.sampler.emcee_pt.emceeptsampler static method)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.compute_acl"]], "compute_acl() (pycbc.inference.sampler.epsie.epsiesampler static method)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.compute_acl"]], "compute_acl() (pycbc.inference.sampler.ptemcee.ptemceesampler static method)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.compute_acl"]], "converged() (pycbc.inference.sampler.refine.refinesampler method)": [[65, "pycbc.inference.sampler.refine.RefineSampler.converged"]], "create_new_output_file() (in module pycbc.inference.sampler.base)": [[65, "pycbc.inference.sampler.base.create_new_output_file"]], "dlogz (pycbc.inference.sampler.multinest.multinestsampler property)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.dlogz"]], "draw_samples() (pycbc.inference.sampler.refine.refinesampler method)": [[65, "pycbc.inference.sampler.refine.RefineSampler.draw_samples"]], "effective_nsamples (pycbc.inference.sampler.base_mcmc.ensemblesupport property)": [[65, "pycbc.inference.sampler.base_mcmc.EnsembleSupport.effective_nsamples"]], "effective_nsamples (pycbc.inference.sampler.epsie.epsiesampler property)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.effective_nsamples"]], "effective_nsamples() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.effective_nsamples"]], "ensemble (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.ensemble"]], "ensemble_compute_acf() (in module pycbc.inference.sampler.base_mcmc)": [[65, "pycbc.inference.sampler.base_mcmc.ensemble_compute_acf"]], "ensemble_compute_acf() (in module pycbc.inference.sampler.base_multitemper)": [[65, "pycbc.inference.sampler.base_multitemper.ensemble_compute_acf"]], "ensemble_compute_acl() (in module pycbc.inference.sampler.base_mcmc)": [[65, "pycbc.inference.sampler.base_mcmc.ensemble_compute_acl"]], "ensemble_compute_acl() (in module pycbc.inference.sampler.base_multitemper)": [[65, "pycbc.inference.sampler.base_multitemper.ensemble_compute_acl"]], "estimate_nmcmc() (in module pycbc.inference.sampler.dynesty)": [[65, "pycbc.inference.sampler.dynesty.estimate_nmcmc"]], "finalize() (pycbc.inference.sampler.base.basesampler method)": [[65, "pycbc.inference.sampler.base.BaseSampler.finalize"]], "finalize() (pycbc.inference.sampler.dummy.dummysampler method)": [[65, "pycbc.inference.sampler.dummy.DummySampler.finalize"]], "finalize() (pycbc.inference.sampler.dynesty.dynestysampler method)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler.finalize"]], "finalize() (pycbc.inference.sampler.emcee.emceeensemblesampler method)": [[65, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.finalize"]], "finalize() (pycbc.inference.sampler.emcee_pt.emceeptsampler method)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.finalize"]], "finalize() (pycbc.inference.sampler.epsie.epsiesampler method)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.finalize"]], "finalize() (pycbc.inference.sampler.multinest.multinestsampler method)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.finalize"]], "finalize() (pycbc.inference.sampler.nessai.nessaisampler method)": [[65, "pycbc.inference.sampler.nessai.NessaiSampler.finalize"]], "finalize() (pycbc.inference.sampler.ptemcee.ptemceesampler method)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.finalize"]], "finalize() (pycbc.inference.sampler.snowline.snowlinesampler method)": [[65, "pycbc.inference.sampler.snowline.SnowlineSampler.finalize"]], "finalize() (pycbc.inference.sampler.ultranest.ultranestsampler method)": [[65, "pycbc.inference.sampler.ultranest.UltranestSampler.finalize"]], "from_config() (pycbc.inference.sampler.base.basesampler method)": [[65, "pycbc.inference.sampler.base.BaseSampler.from_config"]], "from_config() (pycbc.inference.sampler.dummy.dummysampler class method)": [[65, "pycbc.inference.sampler.dummy.DummySampler.from_config"]], "from_config() (pycbc.inference.sampler.dynesty.dynestysampler class method)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler.from_config"]], "from_config() (pycbc.inference.sampler.emcee.emceeensemblesampler class method)": [[65, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.from_config"]], "from_config() (pycbc.inference.sampler.emcee_pt.emceeptsampler class method)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.from_config"]], "from_config() (pycbc.inference.sampler.epsie.epsiesampler class method)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.from_config"]], "from_config() (pycbc.inference.sampler.multinest.multinestsampler class method)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.from_config"]], "from_config() (pycbc.inference.sampler.nessai.nessaisampler class method)": [[65, "pycbc.inference.sampler.nessai.NessaiSampler.from_config"]], "from_config() (pycbc.inference.sampler.ptemcee.ptemceesampler class method)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.from_config"]], "from_config() (pycbc.inference.sampler.refine.refinesampler class method)": [[65, "pycbc.inference.sampler.refine.RefineSampler.from_config"]], "from_config() (pycbc.inference.sampler.snowline.snowlinesampler class method)": [[65, "pycbc.inference.sampler.snowline.SnowlineSampler.from_config"]], "from_config() (pycbc.inference.sampler.ultranest.ultranestsampler class method)": [[65, "pycbc.inference.sampler.ultranest.UltranestSampler.from_config"]], "from_unit_hypercube() (pycbc.inference.sampler.nessai.nessaimodel method)": [[65, "pycbc.inference.sampler.nessai.NessaiModel.from_unit_hypercube"]], "get_default_kwds() (pycbc.inference.sampler.nessai.nessaisampler static method)": [[65, "pycbc.inference.sampler.nessai.NessaiSampler.get_default_kwds"]], "get_optional_arg_from_config() (in module pycbc.inference.sampler.base_mcmc)": [[65, "pycbc.inference.sampler.base_mcmc.get_optional_arg_from_config"]], "get_posterior_samples() (pycbc.inference.sampler.multinest.multinestsampler method)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.get_posterior_samples"]], "get_thin_interval() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.get_thin_interval"]], "importance_dlogz (pycbc.inference.sampler.multinest.multinestsampler property)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.importance_dlogz"]], "importance_logz (pycbc.inference.sampler.multinest.multinestsampler property)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.importance_logz"]], "initial_dist_from_config() (in module pycbc.inference.sampler.base)": [[65, "pycbc.inference.sampler.base.initial_dist_from_config"]], "io (pycbc.inference.sampler.base.basesampler property)": [[65, "pycbc.inference.sampler.base.BaseSampler.io"]], "io (pycbc.inference.sampler.dummy.dummysampler property)": [[65, "pycbc.inference.sampler.dummy.DummySampler.io"]], "io (pycbc.inference.sampler.dynesty.dynestysampler property)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler.io"]], "io (pycbc.inference.sampler.emcee.emceeensemblesampler property)": [[65, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.io"]], "io (pycbc.inference.sampler.emcee_pt.emceeptsampler property)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.io"]], "io (pycbc.inference.sampler.epsie.epsiesampler property)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.io"]], "io (pycbc.inference.sampler.multinest.multinestsampler property)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.io"]], "io (pycbc.inference.sampler.nessai.nessaisampler property)": [[65, "pycbc.inference.sampler.nessai.NessaiSampler.io"]], "io (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.io"]], "io (pycbc.inference.sampler.snowline.snowlinesampler property)": [[65, "pycbc.inference.sampler.snowline.SnowlineSampler.io"]], "io (pycbc.inference.sampler.ultranest.ultranestsampler property)": [[65, "pycbc.inference.sampler.ultranest.UltranestSampler.io"]], "load_from_config() (in module pycbc.inference.sampler)": [[65, "pycbc.inference.sampler.load_from_config"]], "log_likelihood() (pycbc.inference.sampler.base_cube.cubemodel method)": [[65, "pycbc.inference.sampler.base_cube.CubeModel.log_likelihood"]], "log_likelihood() (pycbc.inference.sampler.nessai.nessaimodel method)": [[65, "pycbc.inference.sampler.nessai.NessaiModel.log_likelihood"]], "log_prior() (pycbc.inference.sampler.nessai.nessaimodel method)": [[65, "pycbc.inference.sampler.nessai.NessaiModel.log_prior"]], "loglikelihood() (pycbc.inference.sampler.multinest.multinestsampler method)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.loglikelihood"]], "logz (pycbc.inference.sampler.dynesty.dynestysampler property)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler.logz"]], "logz (pycbc.inference.sampler.multinest.multinestsampler property)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.logz"]], "logz (pycbc.inference.sampler.snowline.snowlinesampler property)": [[65, "pycbc.inference.sampler.snowline.SnowlineSampler.logz"]], "logz (pycbc.inference.sampler.ultranest.ultranestsampler property)": [[65, "pycbc.inference.sampler.ultranest.UltranestSampler.logz"]], "logz_err (pycbc.inference.sampler.dynesty.dynestysampler property)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler.logz_err"]], "logz_err (pycbc.inference.sampler.snowline.snowlinesampler property)": [[65, "pycbc.inference.sampler.snowline.SnowlineSampler.logz_err"]], "logz_err (pycbc.inference.sampler.ultranest.ultranestsampler property)": [[65, "pycbc.inference.sampler.ultranest.UltranestSampler.logz_err"]], "max_samples_per_chain (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.max_samples_per_chain"]], "model_stats (pycbc.inference.sampler.base.basesampler property)": [[65, "pycbc.inference.sampler.base.BaseSampler.model_stats"]], "model_stats (pycbc.inference.sampler.dummy.dummysampler property)": [[65, "pycbc.inference.sampler.dummy.DummySampler.model_stats"]], "model_stats (pycbc.inference.sampler.dynesty.dynestysampler property)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler.model_stats"]], "model_stats (pycbc.inference.sampler.emcee.emceeensemblesampler property)": [[65, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.model_stats"]], "model_stats (pycbc.inference.sampler.emcee_pt.emceeptsampler property)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.model_stats"]], "model_stats (pycbc.inference.sampler.epsie.epsiesampler property)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.model_stats"]], "model_stats (pycbc.inference.sampler.multinest.multinestsampler property)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.model_stats"]], "model_stats (pycbc.inference.sampler.nessai.nessaisampler property)": [[65, "pycbc.inference.sampler.nessai.NessaiSampler.model_stats"]], "model_stats (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.model_stats"]], "model_stats (pycbc.inference.sampler.snowline.snowlinesampler property)": [[65, "pycbc.inference.sampler.snowline.SnowlineSampler.model_stats"]], "model_stats (pycbc.inference.sampler.ultranest.ultranestsampler property)": [[65, "pycbc.inference.sampler.ultranest.UltranestSampler.model_stats"]], "name (pycbc.inference.sampler.base.basesampler attribute)": [[65, "pycbc.inference.sampler.base.BaseSampler.name"]], "name (pycbc.inference.sampler.dummy.dummysampler attribute)": [[65, "pycbc.inference.sampler.dummy.DummySampler.name"]], "name (pycbc.inference.sampler.dynesty.dynestysampler attribute)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler.name"]], "name (pycbc.inference.sampler.emcee.emceeensemblesampler attribute)": [[65, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.name"]], "name (pycbc.inference.sampler.emcee_pt.emceeptsampler attribute)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.name"]], "name (pycbc.inference.sampler.epsie.epsiesampler attribute)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.name"]], "name (pycbc.inference.sampler.multinest.multinestsampler attribute)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.name"]], "name (pycbc.inference.sampler.nessai.nessaisampler attribute)": [[65, "pycbc.inference.sampler.nessai.NessaiSampler.name"]], "name (pycbc.inference.sampler.ptemcee.ptemceesampler attribute)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.name"]], "name (pycbc.inference.sampler.refine.refinesampler attribute)": [[65, "pycbc.inference.sampler.refine.RefineSampler.name"]], "name (pycbc.inference.sampler.snowline.snowlinesampler attribute)": [[65, "pycbc.inference.sampler.snowline.SnowlineSampler.name"]], "name (pycbc.inference.sampler.ultranest.ultranestsampler attribute)": [[65, "pycbc.inference.sampler.ultranest.UltranestSampler.name"]], "nchains (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.nchains"]], "new_point() (pycbc.inference.sampler.nessai.nessaimodel method)": [[65, "pycbc.inference.sampler.nessai.NessaiModel.new_point"]], "new_point_log_prob() (pycbc.inference.sampler.nessai.nessaimodel method)": [[65, "pycbc.inference.sampler.nessai.NessaiModel.new_point_log_prob"]], "niterations (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.niterations"]], "niterations (pycbc.inference.sampler.dynesty.dynestysampler property)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler.niterations"]], "niterations (pycbc.inference.sampler.multinest.multinestsampler property)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.niterations"]], "niterations (pycbc.inference.sampler.snowline.snowlinesampler property)": [[65, "pycbc.inference.sampler.snowline.SnowlineSampler.niterations"]], "niterations (pycbc.inference.sampler.ultranest.ultranestsampler property)": [[65, "pycbc.inference.sampler.ultranest.UltranestSampler.niterations"]], "nlivepoints (pycbc.inference.sampler.multinest.multinestsampler property)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.nlivepoints"]], "ntemps (pycbc.inference.sampler.base_multitemper.multitemperedsupport property)": [[65, "pycbc.inference.sampler.base_multitemper.MultiTemperedSupport.ntemps"]], "ntemps (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.ntemps"]], "nwalkers (pycbc.inference.sampler.base_mcmc.ensemblesupport property)": [[65, "pycbc.inference.sampler.base_mcmc.EnsembleSupport.nwalkers"]], "p0 (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.p0"]], "pos (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.pos"]], "pos (pycbc.inference.sampler.epsie.epsiesampler property)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.pos"]], "prior_transform() (pycbc.inference.sampler.base_cube.cubemodel method)": [[65, "pycbc.inference.sampler.base_cube.CubeModel.prior_transform"]], "pycbc.inference.sampler": [[65, "module-pycbc.inference.sampler"]], "pycbc.inference.sampler.base": [[65, "module-pycbc.inference.sampler.base"]], "pycbc.inference.sampler.base_cube": [[65, "module-pycbc.inference.sampler.base_cube"]], "pycbc.inference.sampler.base_mcmc": [[65, "module-pycbc.inference.sampler.base_mcmc"]], "pycbc.inference.sampler.base_multitemper": [[65, "module-pycbc.inference.sampler.base_multitemper"]], "pycbc.inference.sampler.dummy": [[65, "module-pycbc.inference.sampler.dummy"]], "pycbc.inference.sampler.dynesty": [[65, "module-pycbc.inference.sampler.dynesty"]], "pycbc.inference.sampler.emcee": [[65, "module-pycbc.inference.sampler.emcee"]], "pycbc.inference.sampler.emcee_pt": [[65, "module-pycbc.inference.sampler.emcee_pt"]], "pycbc.inference.sampler.epsie": [[65, "module-pycbc.inference.sampler.epsie"]], "pycbc.inference.sampler.multinest": [[65, "module-pycbc.inference.sampler.multinest"]], "pycbc.inference.sampler.nessai": [[65, "module-pycbc.inference.sampler.nessai"]], "pycbc.inference.sampler.ptemcee": [[65, "module-pycbc.inference.sampler.ptemcee"]], "pycbc.inference.sampler.refine": [[65, "module-pycbc.inference.sampler.refine"]], "pycbc.inference.sampler.snowline": [[65, "module-pycbc.inference.sampler.snowline"]], "pycbc.inference.sampler.ultranest": [[65, "module-pycbc.inference.sampler.ultranest"]], "raw_acls (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.raw_acls"]], "raw_acts (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.raw_acts"]], "raw_samples_to_dict() (in module pycbc.inference.sampler.base_mcmc)": [[65, "pycbc.inference.sampler.base_mcmc.raw_samples_to_dict"]], "read_betas_from_hdf() (in module pycbc.inference.sampler.base_multitemper)": [[65, "pycbc.inference.sampler.base_multitemper.read_betas_from_hdf"]], "resample_equal() (in module pycbc.inference.sampler.refine)": [[65, "pycbc.inference.sampler.refine.resample_equal"]], "resume_from_checkpoint() (pycbc.inference.sampler.base.basesampler method)": [[65, "pycbc.inference.sampler.base.BaseSampler.resume_from_checkpoint"]], "resume_from_checkpoint() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.resume_from_checkpoint"]], "resume_from_checkpoint() (pycbc.inference.sampler.dummy.dummysampler method)": [[65, "pycbc.inference.sampler.dummy.DummySampler.resume_from_checkpoint"]], "resume_from_checkpoint() (pycbc.inference.sampler.dynesty.dynestysampler method)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler.resume_from_checkpoint"]], "resume_from_checkpoint() (pycbc.inference.sampler.multinest.multinestsampler method)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.resume_from_checkpoint"]], "resume_from_checkpoint() (pycbc.inference.sampler.nessai.nessaisampler method)": [[65, "pycbc.inference.sampler.nessai.NessaiSampler.resume_from_checkpoint"]], "resume_from_checkpoint() (pycbc.inference.sampler.snowline.snowlinesampler method)": [[65, "pycbc.inference.sampler.snowline.SnowlineSampler.resume_from_checkpoint"]], "resume_from_checkpoint() (pycbc.inference.sampler.ultranest.ultranestsampler method)": [[65, "pycbc.inference.sampler.ultranest.UltranestSampler.resume_from_checkpoint"]], "run() (pycbc.inference.sampler.base.basesampler method)": [[65, "pycbc.inference.sampler.base.BaseSampler.run"]], "run() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.run"]], "run() (pycbc.inference.sampler.dummy.dummysampler method)": [[65, "pycbc.inference.sampler.dummy.DummySampler.run"]], "run() (pycbc.inference.sampler.dynesty.dynestysampler method)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler.run"]], "run() (pycbc.inference.sampler.multinest.multinestsampler method)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.run"]], "run() (pycbc.inference.sampler.nessai.nessaisampler method)": [[65, "pycbc.inference.sampler.nessai.NessaiSampler.run"]], "run() (pycbc.inference.sampler.refine.refinesampler method)": [[65, "pycbc.inference.sampler.refine.RefineSampler.run"]], "run() (pycbc.inference.sampler.snowline.snowlinesampler method)": [[65, "pycbc.inference.sampler.snowline.SnowlineSampler.run"]], "run() (pycbc.inference.sampler.ultranest.ultranestsampler method)": [[65, "pycbc.inference.sampler.ultranest.UltranestSampler.run"]], "run_mcmc() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.run_mcmc"]], "run_mcmc() (pycbc.inference.sampler.emcee.emceeensemblesampler method)": [[65, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.run_mcmc"]], "run_mcmc() (pycbc.inference.sampler.emcee_pt.emceeptsampler method)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.run_mcmc"]], "run_mcmc() (pycbc.inference.sampler.epsie.epsiesampler method)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.run_mcmc"]], "run_mcmc() (pycbc.inference.sampler.ptemcee.ptemceesampler method)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.run_mcmc"]], "run_samples() (pycbc.inference.sampler.refine.refinesampler method)": [[65, "pycbc.inference.sampler.refine.RefineSampler.run_samples"]], "sample_rwalk_mod() (in module pycbc.inference.sampler.dynesty)": [[65, "pycbc.inference.sampler.dynesty.sample_rwalk_mod"]], "samples (pycbc.inference.sampler.base.basesampler property)": [[65, "pycbc.inference.sampler.base.BaseSampler.samples"]], "samples (pycbc.inference.sampler.dummy.dummysampler property)": [[65, "pycbc.inference.sampler.dummy.DummySampler.samples"]], "samples (pycbc.inference.sampler.dynesty.dynestysampler property)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler.samples"]], "samples (pycbc.inference.sampler.emcee.emceeensemblesampler property)": [[65, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.samples"]], "samples (pycbc.inference.sampler.emcee_pt.emceeptsampler property)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.samples"]], "samples (pycbc.inference.sampler.epsie.epsiesampler property)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.samples"]], "samples (pycbc.inference.sampler.multinest.multinestsampler property)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.samples"]], "samples (pycbc.inference.sampler.nessai.nessaisampler property)": [[65, "pycbc.inference.sampler.nessai.NessaiSampler.samples"]], "samples (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.samples"]], "samples (pycbc.inference.sampler.snowline.snowlinesampler property)": [[65, "pycbc.inference.sampler.snowline.SnowlineSampler.samples"]], "samples (pycbc.inference.sampler.ultranest.ultranestsampler property)": [[65, "pycbc.inference.sampler.ultranest.UltranestSampler.samples"]], "sampling_params (pycbc.inference.sampler.base.basesampler property)": [[65, "pycbc.inference.sampler.base.BaseSampler.sampling_params"]], "scale_factor (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.scale_factor"]], "seed (pycbc.inference.sampler.epsie.epsiesampler property)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.seed"]], "set_burn_in() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_burn_in"]], "set_burn_in_from_config() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_burn_in_from_config"]], "set_initial_conditions() (pycbc.inference.sampler.dynesty.dynestysampler method)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler.set_initial_conditions"]], "set_initial_conditions() (pycbc.inference.sampler.multinest.multinestsampler method)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.set_initial_conditions"]], "set_initial_conditions() (pycbc.inference.sampler.nessai.nessaisampler method)": [[65, "pycbc.inference.sampler.nessai.NessaiSampler.set_initial_conditions"]], "set_p0() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_p0"]], "set_p0() (pycbc.inference.sampler.epsie.epsiesampler method)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.set_p0"]], "set_start_from_config() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_start_from_config"]], "set_start_from_config() (pycbc.inference.sampler.refine.refinesampler method)": [[65, "pycbc.inference.sampler.refine.RefineSampler.set_start_from_config"]], "set_state_from_file() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_state_from_file"]], "set_state_from_file() (pycbc.inference.sampler.dynesty.dynestysampler method)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler.set_state_from_file"]], "set_state_from_file() (pycbc.inference.sampler.emcee.emceeensemblesampler method)": [[65, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.set_state_from_file"]], "set_state_from_file() (pycbc.inference.sampler.emcee_pt.emceeptsampler method)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.set_state_from_file"]], "set_state_from_file() (pycbc.inference.sampler.epsie.epsiesampler method)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.set_state_from_file"]], "set_state_from_file() (pycbc.inference.sampler.multinest.multinestsampler method)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.set_state_from_file"]], "set_state_from_file() (pycbc.inference.sampler.ptemcee.ptemceesampler method)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.set_state_from_file"]], "set_target() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_target"]], "set_target_from_config() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_target_from_config"]], "set_thin_interval_from_config() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_thin_interval_from_config"]], "setup_calls() (in module pycbc.inference.sampler.base_cube)": [[65, "pycbc.inference.sampler.base_cube.setup_calls"]], "setup_output() (in module pycbc.inference.sampler.base)": [[65, "pycbc.inference.sampler.base.setup_output"]], "setup_output() (pycbc.inference.sampler.multinest.multinestsampler method)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.setup_output"]], "starting_betas (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.starting_betas"]], "static_params (pycbc.inference.sampler.base.basesampler property)": [[65, "pycbc.inference.sampler.base.BaseSampler.static_params"]], "swap_interval (pycbc.inference.sampler.epsie.epsiesampler property)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.swap_interval"]], "target_eff_nsamples (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.target_eff_nsamples"]], "target_niterations (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.target_niterations"]], "thin_interval (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.thin_interval"]], "thin_safety_factor (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.thin_safety_factor"]], "to_dict() (pycbc.inference.sampler.nessai.nessaimodel method)": [[65, "pycbc.inference.sampler.nessai.NessaiModel.to_dict"]], "to_live_points() (pycbc.inference.sampler.nessai.nessaimodel method)": [[65, "pycbc.inference.sampler.nessai.NessaiModel.to_live_points"]], "to_unit_hypercube() (pycbc.inference.sampler.nessai.nessaimodel method)": [[65, "pycbc.inference.sampler.nessai.NessaiModel.to_unit_hypercube"]], "transform_prior() (pycbc.inference.sampler.multinest.multinestsampler method)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.transform_prior"]], "variable_params (pycbc.inference.sampler.base.basesampler property)": [[65, "pycbc.inference.sampler.base.BaseSampler.variable_params"]], "write_results() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[65, "pycbc.inference.sampler.base_mcmc.BaseMCMC.write_results"]], "write_results() (pycbc.inference.sampler.dynesty.dynestysampler method)": [[65, "pycbc.inference.sampler.dynesty.DynestySampler.write_results"]], "write_results() (pycbc.inference.sampler.emcee.emceeensemblesampler method)": [[65, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.write_results"]], "write_results() (pycbc.inference.sampler.emcee_pt.emceeptsampler method)": [[65, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.write_results"]], "write_results() (pycbc.inference.sampler.epsie.epsiesampler method)": [[65, "pycbc.inference.sampler.epsie.EpsieSampler.write_results"]], "write_results() (pycbc.inference.sampler.multinest.multinestsampler method)": [[65, "pycbc.inference.sampler.multinest.MultinestSampler.write_results"]], "write_results() (pycbc.inference.sampler.nessai.nessaisampler method)": [[65, "pycbc.inference.sampler.nessai.NessaiSampler.write_results"]], "write_results() (pycbc.inference.sampler.ptemcee.ptemceesampler method)": [[65, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.write_results"]], "write_results() (pycbc.inference.sampler.snowline.snowlinesampler method)": [[65, "pycbc.inference.sampler.snowline.SnowlineSampler.write_results"]], "write_results() (pycbc.inference.sampler.ultranest.ultranestsampler method)": [[65, "pycbc.inference.sampler.ultranest.UltranestSampler.write_results"]], "cbchdfinjectionset (class in pycbc.inject.inject)": [[66, "pycbc.inject.inject.CBCHDFInjectionSet"]], "incoherentfromfilehdfinjectionset (class in pycbc.inject.inject)": [[66, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet"]], "injfilterrejector (class in pycbc.inject.injfilterrejector)": [[66, "pycbc.inject.injfilterrejector.InjFilterRejector"]], "injectionset (class in pycbc.inject.inject)": [[66, "pycbc.inject.inject.InjectionSet"]], "ringdownhdfinjectionset (class in pycbc.inject.inject)": [[66, "pycbc.inject.inject.RingdownHDFInjectionSet"]], "sgburstinjectionset (class in pycbc.inject.inject)": [[66, "pycbc.inject.inject.SGBurstInjectionSet"]], "apply() (pycbc.inject.inject.cbchdfinjectionset method)": [[66, "pycbc.inject.inject.CBCHDFInjectionSet.apply"]], "apply() (pycbc.inject.inject.incoherentfromfilehdfinjectionset method)": [[66, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.apply"]], "apply() (pycbc.inject.inject.ringdownhdfinjectionset method)": [[66, "pycbc.inject.inject.RingdownHDFInjectionSet.apply"]], "apply() (pycbc.inject.inject.sgburstinjectionset method)": [[66, "pycbc.inject.inject.SGBurstInjectionSet.apply"]], "end_times() (pycbc.inject.inject.cbchdfinjectionset method)": [[66, "pycbc.inject.inject.CBCHDFInjectionSet.end_times"]], "end_times() (pycbc.inject.inject.incoherentfromfilehdfinjectionset method)": [[66, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.end_times"]], "end_times() (pycbc.inject.inject.ringdownhdfinjectionset method)": [[66, "pycbc.inject.inject.RingdownHDFInjectionSet.end_times"]], "from_cli() (pycbc.inject.inject.injectionset static method)": [[66, "pycbc.inject.inject.InjectionSet.from_cli"]], "from_cli() (pycbc.inject.injfilterrejector.injfilterrejector class method)": [[66, "pycbc.inject.injfilterrejector.InjFilterRejector.from_cli"]], "from_cli_multi_ifos() (pycbc.inject.injfilterrejector.injfilterrejector class method)": [[66, "pycbc.inject.injfilterrejector.InjFilterRejector.from_cli_multi_ifos"]], "from_cli_single_ifo() (pycbc.inject.injfilterrejector.injfilterrejector class method)": [[66, "pycbc.inject.injfilterrejector.InjFilterRejector.from_cli_single_ifo"]], "generate_short_inj_from_inj() (pycbc.inject.injfilterrejector.injfilterrejector method)": [[66, "pycbc.inject.injfilterrejector.InjFilterRejector.generate_short_inj_from_inj"]], "get_hdf_injtype() (in module pycbc.inject.inject)": [[66, "pycbc.inject.inject.get_hdf_injtype"]], "hdf_injtype_from_approximant() (in module pycbc.inject.inject)": [[66, "pycbc.inject.inject.hdf_injtype_from_approximant"]], "indoc (pycbc.inject.inject.sgburstinjectionset attribute)": [[66, "pycbc.inject.inject.SGBurstInjectionSet.indoc"]], "injtype (pycbc.inject.inject.cbchdfinjectionset attribute)": [[66, "pycbc.inject.inject.CBCHDFInjectionSet.injtype"]], "injtype (pycbc.inject.inject.incoherentfromfilehdfinjectionset attribute)": [[66, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.injtype"]], "injtype (pycbc.inject.inject.ringdownhdfinjectionset attribute)": [[66, "pycbc.inject.inject.RingdownHDFInjectionSet.injtype"]], "insert_injfilterrejector_option_group() (in module pycbc.inject.injfilterrejector)": [[66, "pycbc.inject.injfilterrejector.insert_injfilterrejector_option_group"]], "insert_injfilterrejector_option_group_multi_ifo() (in module pycbc.inject.injfilterrejector)": [[66, "pycbc.inject.injfilterrejector.insert_injfilterrejector_option_group_multi_ifo"]], "legacy_approximant_name() (in module pycbc.inject.inject)": [[66, "pycbc.inject.inject.legacy_approximant_name"]], "loadts() (pycbc.inject.inject.incoherentfromfilehdfinjectionset method)": [[66, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.loadts"]], "make_strain_from_inj_object() (pycbc.inject.inject.cbchdfinjectionset method)": [[66, "pycbc.inject.inject.CBCHDFInjectionSet.make_strain_from_inj_object"]], "make_strain_from_inj_object() (pycbc.inject.inject.incoherentfromfilehdfinjectionset method)": [[66, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.make_strain_from_inj_object"]], "make_strain_from_inj_object() (pycbc.inject.inject.ringdownhdfinjectionset method)": [[66, "pycbc.inject.inject.RingdownHDFInjectionSet.make_strain_from_inj_object"]], "projector() (in module pycbc.inject.inject)": [[66, "pycbc.inject.inject.projector"]], "pycbc.inject": [[66, "module-pycbc.inject"]], "pycbc.inject.inject": [[66, "module-pycbc.inject.inject"]], "pycbc.inject.injfilterrejector": [[66, "module-pycbc.inject.injfilterrejector"]], "required_params (pycbc.inject.inject.cbchdfinjectionset attribute)": [[66, "pycbc.inject.inject.CBCHDFInjectionSet.required_params"]], "required_params (pycbc.inject.inject.incoherentfromfilehdfinjectionset attribute)": [[66, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.required_params"]], "required_params (pycbc.inject.inject.ringdownhdfinjectionset attribute)": [[66, "pycbc.inject.inject.RingdownHDFInjectionSet.required_params"]], "set_ref_time() (pycbc.inject.inject.incoherentfromfilehdfinjectionset method)": [[66, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.set_ref_time"]], "set_sim_data() (in module pycbc.inject.inject)": [[66, "pycbc.inject.inject.set_sim_data"]], "slice_and_taper() (pycbc.inject.inject.incoherentfromfilehdfinjectionset static method)": [[66, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.slice_and_taper"]], "supported_approximants() (pycbc.inject.inject.cbchdfinjectionset static method)": [[66, "pycbc.inject.inject.CBCHDFInjectionSet.supported_approximants"]], "supported_approximants() (pycbc.inject.inject.incoherentfromfilehdfinjectionset static method)": [[66, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.supported_approximants"]], "supported_approximants() (pycbc.inject.inject.ringdownhdfinjectionset static method)": [[66, "pycbc.inject.inject.RingdownHDFInjectionSet.supported_approximants"]], "table (pycbc.inject.inject.injectionset attribute)": [[66, "pycbc.inject.inject.InjectionSet.table"]], "table (pycbc.inject.inject.sgburstinjectionset attribute)": [[66, "pycbc.inject.inject.SGBurstInjectionSet.table"]], "template_segment_checker() (pycbc.inject.injfilterrejector.injfilterrejector method)": [[66, "pycbc.inject.injfilterrejector.InjFilterRejector.template_segment_checker"]], "write() (pycbc.inject.inject.injectionset static method)": [[66, "pycbc.inject.inject.InjectionSet.write"]], "candidateforgracedb (class in pycbc.io.live)": [[67, "pycbc.io.live.CandidateForGraceDB"]], "datafromfiles (class in pycbc.io.hdf)": [[67, "pycbc.io.hdf.DataFromFiles"]], "dictarray (class in pycbc.io.hdf)": [[67, "pycbc.io.hdf.DictArray"]], "fieldarray (class in pycbc.io.record)": [[67, "pycbc.io.record.FieldArray"]], "filedata (class in pycbc.io.hdf)": [[67, "pycbc.io.hdf.FileData"]], "foregroundtriggers (class in pycbc.io.hdf)": [[67, "pycbc.io.hdf.ForegroundTriggers"]], "hfile (class in pycbc.io.hdf)": [[67, "pycbc.io.hdf.HFile"]], "ligolwcontenthandler (class in pycbc.io.ligolw)": [[67, "pycbc.io.ligolw.LIGOLWContentHandler"]], "multiifostatmapdata (class in pycbc.io.hdf)": [[67, "pycbc.io.hdf.MultiifoStatmapData"]], "readbytemplate (class in pycbc.io.hdf)": [[67, "pycbc.io.hdf.ReadByTemplate"]], "singledettriggers (class in pycbc.io.hdf)": [[67, "pycbc.io.hdf.SingleDetTriggers"]], "statmapdata (class in pycbc.io.hdf)": [[67, "pycbc.io.hdf.StatmapData"]], "waveformarray (class in pycbc.io.record)": [[67, "pycbc.io.record.WaveformArray"]], "add_fields() (pycbc.io.record.fieldarray method)": [[67, "pycbc.io.record.FieldArray.add_fields"]], "add_functions() (pycbc.io.record.fieldarray method)": [[67, "pycbc.io.record.FieldArray.add_functions"]], "add_methods() (pycbc.io.record.fieldarray method)": [[67, "pycbc.io.record.FieldArray.add_methods"]], "add_properties() (pycbc.io.record.fieldarray method)": [[67, "pycbc.io.record.FieldArray.add_properties"]], "add_virtualfields() (pycbc.io.record.fieldarray method)": [[67, "pycbc.io.record.FieldArray.add_virtualfields"]], "addattr() (pycbc.io.record.fieldarray method)": [[67, "pycbc.io.record.FieldArray.addattr"]], "aliases (pycbc.io.record.fieldarray property)": [[67, "pycbc.io.record.FieldArray.aliases"]], "and_masks() (pycbc.io.hdf.singledettriggers method)": [[67, "pycbc.io.hdf.SingleDetTriggers.and_masks"]], "append() (pycbc.io.record.fieldarray method)": [[67, "pycbc.io.record.FieldArray.append"]], "apply_mask() (pycbc.io.hdf.singledettriggers method)": [[67, "pycbc.io.hdf.SingleDetTriggers.apply_mask"]], "approximant (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.approximant"]], "checkbank() (pycbc.io.hdf.singledettriggers method)": [[67, "pycbc.io.hdf.SingleDetTriggers.checkbank"]], "chi_eff (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.chi_eff"]], "close() (pycbc.io.hdf.filedata method)": [[67, "pycbc.io.hdf.FileData.close"]], "cluster() (pycbc.io.hdf.multiifostatmapdata method)": [[67, "pycbc.io.hdf.MultiifoStatmapData.cluster"]], "cluster() (pycbc.io.hdf.statmapdata method)": [[67, "pycbc.io.hdf.StatmapData.cluster"]], "combine_and_copy() (in module pycbc.io.hdf)": [[67, "pycbc.io.hdf.combine_and_copy"]], "create_process_table() (in module pycbc.io.ligolw)": [[67, "pycbc.io.ligolw.create_process_table"]], "default_null_value() (in module pycbc.io.ligolw)": [[67, "pycbc.io.ligolw.default_null_value"]], "del_functions() (pycbc.io.record.fieldarray method)": [[67, "pycbc.io.record.FieldArray.del_functions"]], "dump_pickle_to_hdf() (in module pycbc.io.hdf)": [[67, "pycbc.io.hdf.dump_pickle_to_hdf"]], "dump_state() (in module pycbc.io.hdf)": [[67, "pycbc.io.hdf.dump_state"]], "effective_spin (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.effective_spin"]], "endelementns() (pycbc.io.ligolw.ligolwcontenthandler method)": [[67, "pycbc.io.ligolw.LIGOLWContentHandler.endElementNS"]], "end_time (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.end_time"]], "eta (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.eta"]], "eta (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.eta"]], "f_lower (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.f_lower"]], "f_seobnrv2_peak (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.f_seobnrv2_peak"]], "f_seobnrv4_peak (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.f_seobnrv4_peak"]], "fieldnames (pycbc.io.record.fieldarray property)": [[67, "pycbc.io.record.FieldArray.fieldnames"]], "fields (pycbc.io.record.fieldarray property)": [[67, "pycbc.io.record.FieldArray.fields"]], "from_arrays() (pycbc.io.record.fieldarray class method)": [[67, "pycbc.io.record.FieldArray.from_arrays"]], "from_kwargs() (pycbc.io.record.fieldarray class method)": [[67, "pycbc.io.record.FieldArray.from_kwargs"]], "from_ligolw_table() (pycbc.io.record.fieldarray class method)": [[67, "pycbc.io.record.FieldArray.from_ligolw_table"]], "from_records() (pycbc.io.record.fieldarray class method)": [[67, "pycbc.io.record.FieldArray.from_records"]], "functionlib (pycbc.io.record.fieldarray property)": [[67, "pycbc.io.record.FieldArray.functionlib"]], "get_active_segments() (pycbc.io.hdf.foregroundtriggers method)": [[67, "pycbc.io.hdf.ForegroundTriggers.get_active_segments"]], "get_all_subkeys() (in module pycbc.io.hdf)": [[67, "pycbc.io.hdf.get_all_subkeys"]], "get_bankfile_array() (pycbc.io.hdf.foregroundtriggers method)": [[67, "pycbc.io.hdf.ForegroundTriggers.get_bankfile_array"]], "get_chisq_from_file_choice() (in module pycbc.io.hdf)": [[67, "pycbc.io.hdf.get_chisq_from_file_choice"]], "get_coincfile_array() (pycbc.io.hdf.foregroundtriggers method)": [[67, "pycbc.io.hdf.ForegroundTriggers.get_coincfile_array"]], "get_column() (pycbc.io.hdf.datafromfiles method)": [[67, "pycbc.io.hdf.DataFromFiles.get_column"]], "get_column() (pycbc.io.hdf.filedata method)": [[67, "pycbc.io.hdf.FileData.get_column"]], "get_column() (pycbc.io.hdf.singledettriggers method)": [[67, "pycbc.io.hdf.SingleDetTriggers.get_column"]], "get_data() (pycbc.io.hdf.readbytemplate method)": [[67, "pycbc.io.hdf.ReadByTemplate.get_data"]], "get_end_time() (pycbc.io.hdf.foregroundtriggers method)": [[67, "pycbc.io.hdf.ForegroundTriggers.get_end_time"]], "get_file() (in module pycbc.io)": [[67, "pycbc.io.get_file"]], "get_ifos() (pycbc.io.hdf.foregroundtriggers method)": [[67, "pycbc.io.hdf.ForegroundTriggers.get_ifos"]], "get_param_names() (pycbc.io.hdf.singledettriggers class method)": [[67, "pycbc.io.hdf.SingleDetTriggers.get_param_names"]], "get_ranking() (pycbc.io.hdf.singledettriggers method)": [[67, "pycbc.io.hdf.SingleDetTriggers.get_ranking"]], "get_snglfile_array_dict() (pycbc.io.hdf.foregroundtriggers method)": [[67, "pycbc.io.hdf.ForegroundTriggers.get_snglfile_array_dict"]], "get_table_columns() (in module pycbc.io.ligolw)": [[67, "pycbc.io.ligolw.get_table_columns"]], "gracedb_tag_with_version() (in module pycbc.io.live)": [[67, "pycbc.io.live.gracedb_tag_with_version"]], "inclination (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.inclination"]], "legacy_row_id_converter() (in module pycbc.io.ligolw)": [[67, "pycbc.io.ligolw.legacy_row_id_converter"]], "load_hdf5_to_dict() (in module pycbc.io.hdf)": [[67, "pycbc.io.hdf.load_hdf5_to_dict"]], "load_state() (in module pycbc.io.hdf)": [[67, "pycbc.io.hdf.load_state"]], "mask (pycbc.io.hdf.filedata property)": [[67, "pycbc.io.hdf.FileData.mask"]], "mask_size (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.mask_size"]], "mask_to_n_loudest_clustered_events() (pycbc.io.hdf.singledettriggers method)": [[67, "pycbc.io.hdf.SingleDetTriggers.mask_to_n_loudest_clustered_events"]], "mass1 (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.mass1"]], "mass2 (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.mass2"]], "mchirp (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.mchirp"]], "mchirp (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.mchirp"]], "mtotal (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.mtotal"]], "mtotal (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.mtotal"]], "name (pycbc.io.record.fieldarray attribute)": [[67, "pycbc.io.record.FieldArray.name"]], "name_all_datasets() (in module pycbc.io.hdf)": [[67, "pycbc.io.hdf.name_all_datasets"]], "newsnr (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.newsnr"]], "newsnr_sgveto (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.newsnr_sgveto"]], "newsnr_sgveto_psdvar (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.newsnr_sgveto_psdvar"]], "newsnr_sgveto_psdvar_threshold (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.newsnr_sgveto_psdvar_threshold"]], "parse_boolargs() (pycbc.io.record.fieldarray method)": [[67, "pycbc.io.record.FieldArray.parse_boolargs"]], "parse_parameters() (pycbc.io.record.fieldarray class method)": [[67, "pycbc.io.record.FieldArray.parse_parameters"]], "primary_mass (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.primary_mass"]], "psd_var_val (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.psd_var_val"]], "pycbc.io": [[67, "module-pycbc.io"]], "pycbc.io.hdf": [[67, "module-pycbc.io.hdf"]], "pycbc.io.ligolw": [[67, "module-pycbc.io.ligolw"]], "pycbc.io.live": [[67, "module-pycbc.io.live"]], "pycbc.io.record": [[67, "module-pycbc.io.record"]], "q (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.q"]], "rchisq (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.rchisq"]], "recursively_save_dict_contents_to_group() (in module pycbc.io.hdf)": [[67, "pycbc.io.hdf.recursively_save_dict_contents_to_group"]], "remnant_mass (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.remnant_mass"]], "remove() (pycbc.io.hdf.dictarray method)": [[67, "pycbc.io.hdf.DictArray.remove"]], "return_empty_sngl() (in module pycbc.io.ligolw)": [[67, "pycbc.io.ligolw.return_empty_sngl"]], "return_search_summary() (in module pycbc.io.ligolw)": [[67, "pycbc.io.ligolw.return_search_summary"]], "save() (pycbc.io.hdf.dictarray method)": [[67, "pycbc.io.hdf.DictArray.save"]], "save() (pycbc.io.hdf.statmapdata method)": [[67, "pycbc.io.hdf.StatmapData.save"]], "save() (pycbc.io.live.candidateforgracedb method)": [[67, "pycbc.io.live.CandidateForGraceDB.save"]], "save_dict_to_hdf5() (in module pycbc.io.hdf)": [[67, "pycbc.io.hdf.save_dict_to_hdf5"]], "secondary_mass (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.secondary_mass"]], "select() (pycbc.io.hdf.dictarray method)": [[67, "pycbc.io.hdf.DictArray.select"]], "select() (pycbc.io.hdf.hfile method)": [[67, "pycbc.io.hdf.HFile.select"]], "set_template() (pycbc.io.hdf.readbytemplate method)": [[67, "pycbc.io.hdf.ReadByTemplate.set_template"]], "sgchisq (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.sgchisq"]], "snr (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.snr"]], "sort() (pycbc.io.record.fieldarray method)": [[67, "pycbc.io.record.FieldArray.sort"]], "sort_arr (pycbc.io.hdf.foregroundtriggers property)": [[67, "pycbc.io.hdf.ForegroundTriggers.sort_arr"]], "spin1_a (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.spin1_a"]], "spin1_azimuthal (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.spin1_azimuthal"]], "spin1_polar (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.spin1_polar"]], "spin1x (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.spin1x"]], "spin1y (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.spin1y"]], "spin1z (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.spin1z"]], "spin2_a (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.spin2_a"]], "spin2_azimuthal (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.spin2_azimuthal"]], "spin2_polar (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.spin2_polar"]], "spin2x (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.spin2x"]], "spin2y (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.spin2y"]], "spin2z (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.spin2z"]], "spin_px (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.spin_px"]], "spin_py (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.spin_py"]], "spin_pz (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.spin_pz"]], "spin_sx (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.spin_sx"]], "spin_sy (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.spin_sy"]], "spin_sz (pycbc.io.record.waveformarray property)": [[67, "pycbc.io.record.WaveformArray.spin_sz"]], "startcolumn() (pycbc.io.ligolw.ligolwcontenthandler method)": [[67, "pycbc.io.ligolw.LIGOLWContentHandler.startColumn"]], "startstream() (pycbc.io.ligolw.ligolwcontenthandler method)": [[67, "pycbc.io.ligolw.LIGOLWContentHandler.startStream"]], "starttable() (pycbc.io.ligolw.ligolwcontenthandler method)": [[67, "pycbc.io.ligolw.LIGOLWContentHandler.startTable"]], "template_duration (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.template_duration"]], "template_id (pycbc.io.hdf.foregroundtriggers property)": [[67, "pycbc.io.hdf.ForegroundTriggers.template_id"]], "template_id (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.template_id"]], "to_array() (pycbc.io.record.fieldarray method)": [[67, "pycbc.io.record.FieldArray.to_array"]], "to_coinc_hdf_object() (pycbc.io.hdf.foregroundtriggers method)": [[67, "pycbc.io.hdf.ForegroundTriggers.to_coinc_hdf_object"]], "to_coinc_xml_object() (pycbc.io.hdf.foregroundtriggers method)": [[67, "pycbc.io.hdf.ForegroundTriggers.to_coinc_xml_object"]], "trig_dict() (pycbc.io.hdf.singledettriggers method)": [[67, "pycbc.io.hdf.SingleDetTriggers.trig_dict"]], "trig_id (pycbc.io.hdf.foregroundtriggers property)": [[67, "pycbc.io.hdf.ForegroundTriggers.trig_id"]], "u_vals (pycbc.io.hdf.singledettriggers property)": [[67, "pycbc.io.hdf.SingleDetTriggers.u_vals"]], "upload() (pycbc.io.live.candidateforgracedb method)": [[67, "pycbc.io.live.CandidateForGraceDB.upload"]], "virtualfields (pycbc.io.record.fieldarray property)": [[67, "pycbc.io.record.FieldArray.virtualfields"]], "callback_func() (in module pycbc.live.snr_optimizer)": [[68, "pycbc.live.snr_optimizer.callback_func"]], "check_snr_optimizer_options() (in module pycbc.live.snr_optimizer)": [[68, "pycbc.live.snr_optimizer.check_snr_optimizer_options"]], "compute_minus_network_snr() (in module pycbc.live.snr_optimizer)": [[68, "pycbc.live.snr_optimizer.compute_minus_network_snr"]], "compute_minus_network_snr_pso() (in module pycbc.live.snr_optimizer)": [[68, "pycbc.live.snr_optimizer.compute_minus_network_snr_pso"]], "compute_network_snr_core() (in module pycbc.live.snr_optimizer)": [[68, "pycbc.live.snr_optimizer.compute_network_snr_core"]], "insert_snr_optimizer_options() (in module pycbc.live.snr_optimizer)": [[68, "pycbc.live.snr_optimizer.insert_snr_optimizer_options"]], "optimize_di() (in module pycbc.live.snr_optimizer)": [[68, "pycbc.live.snr_optimizer.optimize_di"]], "optimize_pso() (in module pycbc.live.snr_optimizer)": [[68, "pycbc.live.snr_optimizer.optimize_pso"]], "optimize_shgo() (in module pycbc.live.snr_optimizer)": [[68, "pycbc.live.snr_optimizer.optimize_shgo"]], "pycbc.live": [[68, "module-pycbc.live"]], "pycbc.live.snr_optimizer": [[68, "module-pycbc.live.snr_optimizer"]], "isco_solution() (in module pycbc.neutron_stars.pg_isso_solver)": [[69, "pycbc.neutron_stars.pg_isso_solver.ISCO_solution"]], "isso_eq_at_pole() (in module pycbc.neutron_stars.pg_isso_solver)": [[69, "pycbc.neutron_stars.pg_isso_solver.ISSO_eq_at_pole"]], "isso_eq_at_pole_dr() (in module pycbc.neutron_stars.pg_isso_solver)": [[69, "pycbc.neutron_stars.pg_isso_solver.ISSO_eq_at_pole_dr"]], "isso_eq_at_pole_dr2() (in module pycbc.neutron_stars.pg_isso_solver)": [[69, "pycbc.neutron_stars.pg_isso_solver.ISSO_eq_at_pole_dr2"]], "pg_isso_eq() (in module pycbc.neutron_stars.pg_isso_solver)": [[69, "pycbc.neutron_stars.pg_isso_solver.PG_ISSO_eq"]], "pg_isso_eq_dr() (in module pycbc.neutron_stars.pg_isso_solver)": [[69, "pycbc.neutron_stars.pg_isso_solver.PG_ISSO_eq_dr"]], "pg_isso_eq_dr2() (in module pycbc.neutron_stars.pg_isso_solver)": [[69, "pycbc.neutron_stars.pg_isso_solver.PG_ISSO_eq_dr2"]], "pg_isso_solver() (in module pycbc.neutron_stars.pg_isso_solver)": [[69, "pycbc.neutron_stars.pg_isso_solver.PG_ISSO_solver"]], "foucart18() (in module pycbc.neutron_stars.eos_utils)": [[69, "pycbc.neutron_stars.eos_utils.foucart18"]], "initialize_eos() (in module pycbc.neutron_stars.eos_utils)": [[69, "pycbc.neutron_stars.eos_utils.initialize_eos"]], "interp_grav_mass_to_baryon_mass() (in module pycbc.neutron_stars.eos_utils)": [[69, "pycbc.neutron_stars.eos_utils.interp_grav_mass_to_baryon_mass"]], "interp_grav_mass_to_compactness() (in module pycbc.neutron_stars.eos_utils)": [[69, "pycbc.neutron_stars.eos_utils.interp_grav_mass_to_compactness"]], "load_ns_sequence() (in module pycbc.neutron_stars.eos_utils)": [[69, "pycbc.neutron_stars.eos_utils.load_ns_sequence"]], "pycbc.neutron_stars": [[69, "module-pycbc.neutron_stars"]], "pycbc.neutron_stars.eos_utils": [[69, "module-pycbc.neutron_stars.eos_utils"]], "pycbc.neutron_stars.pg_isso_solver": [[69, "module-pycbc.neutron_stars.pg_isso_solver"]], "block() (in module pycbc.noise.reproduceable)": [[70, "pycbc.noise.reproduceable.block"]], "colored_noise() (in module pycbc.noise.reproduceable)": [[70, "pycbc.noise.reproduceable.colored_noise"]], "frequency_noise_from_psd() (in module pycbc.noise.gaussian)": [[70, "pycbc.noise.gaussian.frequency_noise_from_psd"]], "noise_from_psd() (in module pycbc.noise.gaussian)": [[70, "pycbc.noise.gaussian.noise_from_psd"]], "noise_from_string() (in module pycbc.noise.gaussian)": [[70, "pycbc.noise.gaussian.noise_from_string"]], "noise_from_string() (in module pycbc.noise.reproduceable)": [[70, "pycbc.noise.reproduceable.noise_from_string"]], "normal() (in module pycbc.noise.reproduceable)": [[70, "pycbc.noise.reproduceable.normal"]], "pycbc.noise": [[70, "module-pycbc.noise"]], "pycbc.noise.gaussian": [[70, "module-pycbc.noise.gaussian"]], "pycbc.noise.reproduceable": [[70, "module-pycbc.noise.reproduceable"]], "backgroundeventrate (class in pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.BackgroundEventRate"]], "eventrate (class in pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.EventRate"]], "foregroundevents (class in pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.ForegroundEvents"]], "pastrodata (class in pycbc.population.live_pastro_utils)": [[71, "pycbc.population.live_pastro_utils.PAstroData"]], "signaleventrate (class in pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.SignalEventRate"]], "add_background() (pycbc.population.fgmc_functions.backgroundeventrate method)": [[71, "pycbc.population.fgmc_functions.BackgroundEventRate.add_background"]], "add_bank() (pycbc.population.fgmc_functions.eventrate method)": [[71, "pycbc.population.fgmc_functions.EventRate.add_bank"]], "add_injections() (pycbc.population.fgmc_functions.signaleventrate method)": [[71, "pycbc.population.fgmc_functions.SignalEventRate.add_injections"]], "add_zerolag() (pycbc.population.fgmc_functions.foregroundevents method)": [[71, "pycbc.population.fgmc_functions.ForegroundEvents.add_zerolag"]], "alltimes() (in module pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.alltimes"]], "apply_significance_limits() (pycbc.population.live_pastro_utils.pastrodata method)": [[71, "pycbc.population.live_pastro_utils.PAstroData.apply_significance_limits"]], "astro_redshifts() (in module pycbc.population.scale_injections)": [[71, "pycbc.population.scale_injections.astro_redshifts"]], "augmented_rv_continuous (class in pycbc.population.fgmc_laguerre)": [[71, "pycbc.population.fgmc_laguerre.augmented_rv_continuous"]], "average_time_between_signals() (in module pycbc.population.population_models)": [[71, "pycbc.population.population_models.average_time_between_signals"]], "check_template_param_bin_data() (in module pycbc.population.live_pastro)": [[71, "pycbc.population.live_pastro.check_template_param_bin_data"]], "coalescence_rate() (in module pycbc.population.population_models)": [[71, "pycbc.population.population_models.coalescence_rate"]], "contracted_dvdc() (in module pycbc.population.scale_injections)": [[71, "pycbc.population.scale_injections.contracted_dVdc"]], "count_posterior (class in pycbc.population.fgmc_laguerre)": [[71, "pycbc.population.fgmc_laguerre.count_posterior"]], "diff_lookback_time() (in module pycbc.population.population_models)": [[71, "pycbc.population.population_models.diff_lookback_time"]], "dist_summary() (in module pycbc.population.fgmc_plots)": [[71, "pycbc.population.fgmc_plots.dist_summary"]], "distance_from_rate() (in module pycbc.population.population_models)": [[71, "pycbc.population.population_models.distance_from_rate"]], "dlum_to_z() (in module pycbc.population.scale_injections)": [[71, "pycbc.population.scale_injections.dlum_to_z"]], "do_pastro_calc() (pycbc.population.live_pastro_utils.pastrodata method)": [[71, "pycbc.population.live_pastro_utils.PAstroData.do_pastro_calc"]], "draw_flat_samples() (in module pycbc.population.rates_functions)": [[71, "pycbc.population.rates_functions.draw_flat_samples"]], "draw_imf_samples() (in module pycbc.population.rates_functions)": [[71, "pycbc.population.rates_functions.draw_imf_samples"]], "draw_lnm_samples() (in module pycbc.population.rates_functions)": [[71, "pycbc.population.rates_functions.draw_lnm_samples"]], "estimate_vt() (in module pycbc.population.scale_injections)": [[71, "pycbc.population.scale_injections.estimate_vt"]], "eval_pdf() (pycbc.population.fgmc_functions.backgroundeventrate method)": [[71, "pycbc.population.fgmc_functions.BackgroundEventRate.eval_pdf"]], "eval_pdf() (pycbc.population.fgmc_functions.signaleventrate method)": [[71, "pycbc.population.fgmc_functions.SignalEventRate.eval_pdf"]], "expect() (pycbc.population.fgmc_laguerre.count_posterior method)": [[71, "pycbc.population.fgmc_laguerre.count_posterior.expect"]], "fgmc() (in module pycbc.population.rates_functions)": [[71, "pycbc.population.rates_functions.fgmc"]], "filter_bin_lo_hi() (in module pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.filter_bin_lo_hi"]], "filter_templates() (pycbc.population.fgmc_functions.eventrate method)": [[71, "pycbc.population.fgmc_functions.EventRate.filter_templates"]], "filter_tmplt_mchirp() (in module pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.filter_tmplt_mchirp"]], "fit() (in module pycbc.population.rates_functions)": [[71, "pycbc.population.rates_functions.fit"]], "get_bg_pdf() (pycbc.population.fgmc_functions.foregroundevents method)": [[71, "pycbc.population.fgmc_functions.ForegroundEvents.get_bg_pdf"]], "get_ctypes() (pycbc.population.fgmc_functions.eventrate method)": [[71, "pycbc.population.fgmc_functions.EventRate.get_ctypes"]], "get_livetimes() (pycbc.population.fgmc_functions.eventrate method)": [[71, "pycbc.population.fgmc_functions.EventRate.get_livetimes"]], "get_norms() (pycbc.population.fgmc_functions.backgroundeventrate method)": [[71, "pycbc.population.fgmc_functions.BackgroundEventRate.get_norms"]], "get_norms() (pycbc.population.fgmc_functions.signaleventrate method)": [[71, "pycbc.population.fgmc_functions.SignalEventRate.get_norms"]], "get_sg_pdf() (pycbc.population.fgmc_functions.foregroundevents method)": [[71, "pycbc.population.fgmc_functions.ForegroundEvents.get_sg_pdf"]], "get_start_dur() (in module pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.get_start_dur"]], "hpd_interval() (pycbc.population.fgmc_laguerre.augmented_rv_continuous method)": [[71, "pycbc.population.fgmc_laguerre.augmented_rv_continuous.hpd_interval"]], "ifos_from_combo() (in module pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.ifos_from_combo"]], "in_coinc_time_excl() (pycbc.population.fgmc_functions.eventrate method)": [[71, "pycbc.population.fgmc_functions.EventRate.in_coinc_time_excl"]], "in_coinc_time_incl() (in module pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.in_coinc_time_incl"]], "inj_distance_pdf() (in module pycbc.population.scale_injections)": [[71, "pycbc.population.scale_injections.inj_distance_pdf"]], "inj_mass_pdf() (in module pycbc.population.scale_injections)": [[71, "pycbc.population.scale_injections.inj_mass_pdf"]], "inj_spin_pdf() (in module pycbc.population.scale_injections)": [[71, "pycbc.population.scale_injections.inj_spin_pdf"]], "insert_live_pastro_option_group() (in module pycbc.population.live_pastro_utils)": [[71, "pycbc.population.live_pastro_utils.insert_live_pastro_option_group"]], "log_rho_bg() (in module pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.log_rho_bg"]], "log_rho_fg() (in module pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.log_rho_fg"]], "log_rho_fg_analytic() (in module pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.log_rho_fg_analytic"]], "log_rho_fgmc() (in module pycbc.population.rates_functions)": [[71, "pycbc.population.rates_functions.log_rho_fgmc"]], "make_all_bins() (pycbc.population.fgmc_functions.signaleventrate method)": [[71, "pycbc.population.fgmc_functions.SignalEventRate.make_all_bins"]], "make_bins() (pycbc.population.fgmc_functions.eventrate method)": [[71, "pycbc.population.fgmc_functions.EventRate.make_bins"]], "mchirp_sampler_flat() (in module pycbc.population.rates_functions)": [[71, "pycbc.population.rates_functions.mchirp_sampler_flat"]], "mchirp_sampler_imf() (in module pycbc.population.rates_functions)": [[71, "pycbc.population.rates_functions.mchirp_sampler_imf"]], "mchirp_sampler_lnm() (in module pycbc.population.rates_functions)": [[71, "pycbc.population.rates_functions.mchirp_sampler_lnm"]], "merger_rate_density() (in module pycbc.population.population_models)": [[71, "pycbc.population.population_models.merger_rate_density"]], "moreifotimes() (pycbc.population.fgmc_functions.eventrate method)": [[71, "pycbc.population.fgmc_functions.EventRate.moreifotimes"]], "noise_density_from_far() (in module pycbc.population.live_pastro)": [[71, "pycbc.population.live_pastro.noise_density_from_far"]], "norm_redshift_distribution() (in module pycbc.population.population_models)": [[71, "pycbc.population.population_models.norm_redshift_distribution"]], "odds_summary() (in module pycbc.population.fgmc_plots)": [[71, "pycbc.population.fgmc_plots.odds_summary"]], "p_bg() (pycbc.population.fgmc_laguerre.count_posterior method)": [[71, "pycbc.population.fgmc_laguerre.count_posterior.p_bg"]], "p_tau() (in module pycbc.population.population_models)": [[71, "pycbc.population.population_models.p_tau"]], "pdf_z_astro() (in module pycbc.population.scale_injections)": [[71, "pycbc.population.scale_injections.pdf_z_astro"]], "plot_bg() (pycbc.population.fgmc_functions.backgroundeventrate method)": [[71, "pycbc.population.fgmc_functions.BackgroundEventRate.plot_bg"]], "plot_inj() (pycbc.population.fgmc_functions.signaleventrate method)": [[71, "pycbc.population.fgmc_functions.SignalEventRate.plot_inj"]], "plotdist() (in module pycbc.population.fgmc_plots)": [[71, "pycbc.population.fgmc_plots.plotdist"]], "prob_flat() (in module pycbc.population.rates_functions)": [[71, "pycbc.population.rates_functions.prob_flat"]], "prob_imf() (in module pycbc.population.rates_functions)": [[71, "pycbc.population.rates_functions.prob_imf"]], "prob_lnm() (in module pycbc.population.rates_functions)": [[71, "pycbc.population.rates_functions.prob_lnm"]], "process_full_data() (in module pycbc.population.rates_functions)": [[71, "pycbc.population.rates_functions.process_full_data"]], "process_injections() (in module pycbc.population.scale_injections)": [[71, "pycbc.population.scale_injections.process_injections"]], "pycbc.population": [[71, "module-pycbc.population"]], "pycbc.population.fgmc_functions": [[71, "module-pycbc.population.fgmc_functions"]], "pycbc.population.fgmc_laguerre": [[71, "module-pycbc.population.fgmc_laguerre"]], "pycbc.population.fgmc_plots": [[71, "module-pycbc.population.fgmc_plots"]], "pycbc.population.live_pastro": [[71, "module-pycbc.population.live_pastro"]], "pycbc.population.live_pastro_utils": [[71, "module-pycbc.population.live_pastro_utils"]], "pycbc.population.population_models": [[71, "module-pycbc.population.population_models"]], "pycbc.population.rates_functions": [[71, "module-pycbc.population.rates_functions"]], "pycbc.population.scale_injections": [[71, "module-pycbc.population.scale_injections"]], "read_full_data() (in module pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.read_full_data"]], "read_full_data_mchirp() (in module pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.read_full_data_mchirp"]], "read_injections() (in module pycbc.population.scale_injections)": [[71, "pycbc.population.scale_injections.read_injections"]], "read_template_bank_param() (in module pycbc.population.live_pastro)": [[71, "pycbc.population.live_pastro.read_template_bank_param"]], "save_bkg_falloff() (in module pycbc.population.rates_functions)": [[71, "pycbc.population.rates_functions.save_bkg_falloff"]], "sfr_grb_2008() (in module pycbc.population.population_models)": [[71, "pycbc.population.population_models.sfr_grb_2008"]], "sfr_madau_dickinson_2014() (in module pycbc.population.population_models)": [[71, "pycbc.population.population_models.sfr_madau_dickinson_2014"]], "sfr_madau_fragos_2017() (in module pycbc.population.population_models)": [[71, "pycbc.population.population_models.sfr_madau_fragos_2017"]], "signal_pdf_from_snr() (in module pycbc.population.live_pastro)": [[71, "pycbc.population.live_pastro.signal_pdf_from_snr"]], "signal_rate_rescale() (in module pycbc.population.live_pastro)": [[71, "pycbc.population.live_pastro.signal_rate_rescale"]], "signal_rate_trig_type() (in module pycbc.population.live_pastro)": [[71, "pycbc.population.live_pastro.signal_rate_trig_type"]], "skew_lognormal_samples() (in module pycbc.population.rates_functions)": [[71, "pycbc.population.rates_functions.skew_lognormal_samples"]], "template_param_bin_pa() (in module pycbc.population.live_pastro)": [[71, "pycbc.population.live_pastro.template_param_bin_pa"]], "template_param_bin_types_farlim_pa() (in module pycbc.population.live_pastro)": [[71, "pycbc.population.live_pastro.template_param_bin_types_farlim_pa"]], "template_param_bin_types_pa() (in module pycbc.population.live_pastro)": [[71, "pycbc.population.live_pastro.template_param_bin_types_pa"]], "total_rate_upto_redshift() (in module pycbc.population.population_models)": [[71, "pycbc.population.population_models.total_rate_upto_redshift"]], "type_in_time() (in module pycbc.population.fgmc_functions)": [[71, "pycbc.population.fgmc_functions.type_in_time"]], "advbnsoptimizedsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.AdVBNSOptimizedSensitivityP1200087"]], "advdesignsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.AdVDesignSensitivityP1200087"]], "advearlyhighsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.AdVEarlyHighSensitivityP1200087"]], "advearlylowsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.AdVEarlyLowSensitivityP1200087"]], "advlatehighsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.AdVLateHighSensitivityP1200087"]], "advlatelowsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.AdVLateLowSensitivityP1200087"]], "advmidhighsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.AdVMidHighSensitivityP1200087"]], "advmidlowsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.AdVMidLowSensitivityP1200087"]], "advo3lowt1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.AdVO3LowT1800545"]], "advo4intermediatet1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.AdVO4IntermediateT1800545"]], "advo4t1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.AdVO4T1800545"]], "advvirgo() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.AdvVirgo"]], "cosmicexplorerp1600143() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.CosmicExplorerP1600143"]], "cosmicexplorerpessimisticp1600143() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.CosmicExplorerPessimisticP1600143"]], "cosmicexplorerwidebandp1600143() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.CosmicExplorerWidebandP1600143"]], "einsteintelescopep1600143() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.EinsteinTelescopeP1600143"]], "geo() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.GEO"]], "geohf() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.GEOHF"]], "kagra() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.KAGRA"]], "kagra128mpct1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.KAGRA128MpcT1800545"]], "kagra25mpct1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.KAGRA25MpcT1800545"]], "kagra80mpct1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.KAGRA80MpcT1800545"]], "kagradesignsensitivityt1600593() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.KAGRADesignSensitivityT1600593"]], "kagraearlysensitivityt1600593() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.KAGRAEarlySensitivityT1600593"]], "kagralatesensitivityt1600593() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.KAGRALateSensitivityT1600593"]], "kagramidsensitivityt1600593() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.KAGRAMidSensitivityT1600593"]], "kagraopeningsensitivityt1600593() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.KAGRAOpeningSensitivityT1600593"]], "tama() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.TAMA"]], "virgo() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.Virgo"]], "aligo140mpct1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGO140MpcT1800545"]], "aligo175mpct1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGO175MpcT1800545"]], "aligoaplusdesignsensitivityt1800042() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOAPlusDesignSensitivityT1800042"]], "aligoadvo3lowt1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOAdVO3LowT1800545"]], "aligoadvo4intermediatet1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOAdVO4IntermediateT1800545"]], "aligoadvo4t1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOAdVO4T1800545"]], "aligobhbh20deg() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOBHBH20Deg"]], "aligobhbh20deggwinc() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOBHBH20DegGWINC"]], "aligobnsoptimizedsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOBNSOptimizedSensitivityP1200087"]], "aligodesignsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGODesignSensitivityP1200087"]], "aligodesignsensitivityt1800044() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGODesignSensitivityT1800044"]], "aligoearlyhighsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOEarlyHighSensitivityP1200087"]], "aligoearlylowsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOEarlyLowSensitivityP1200087"]], "aligohighfrequency() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOHighFrequency"]], "aligohighfrequencygwinc() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOHighFrequencyGWINC"]], "aligokagra128mpct1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOKAGRA128MpcT1800545"]], "aligokagra25mpct1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOKAGRA25MpcT1800545"]], "aligokagra80mpct1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOKAGRA80MpcT1800545"]], "aligolatehighsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOLateHighSensitivityP1200087"]], "aligolatelowsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOLateLowSensitivityP1200087"]], "aligomidhighsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOMidHighSensitivityP1200087"]], "aligomidlowsensitivityp1200087() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOMidLowSensitivityP1200087"]], "aligonsnsopt() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGONSNSOpt"]], "aligonsnsoptgwinc() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGONSNSOptGWINC"]], "aligonosrmhighpower() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGONoSRMHighPower"]], "aligonosrmlowpower() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGONoSRMLowPower"]], "aligonosrmlowpowergwinc() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGONoSRMLowPowerGWINC"]], "aligoo3lowt1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOO3LowT1800545"]], "aligoquantumbhbh20deg() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOQuantumBHBH20Deg"]], "aligoquantumhighfrequency() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOQuantumHighFrequency"]], "aligoquantumnsnsopt() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOQuantumNSNSOpt"]], "aligoquantumnosrmhighpower() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOQuantumNoSRMHighPower"]], "aligoquantumnosrmlowpower() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOQuantumNoSRMLowPower"]], "aligoquantumzerodethighpower() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOQuantumZeroDetHighPower"]], "aligoquantumzerodetlowpower() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOQuantumZeroDetLowPower"]], "aligothermal() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOThermal"]], "aligozerodethighpower() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOZeroDetHighPower"]], "aligozerodethighpowergwinc() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOZeroDetHighPowerGWINC"]], "aligozerodetlowpower() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOZeroDetLowPower"]], "aligozerodetlowpowergwinc() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOZeroDetLowPowerGWINC"]], "aligoaligo140mpct1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOaLIGO140MpcT1800545"]], "aligoaligo175mpct1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOaLIGO175MpcT1800545"]], "aligoaligodesignsensitivityt1800044() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOaLIGODesignSensitivityT1800044"]], "aligoaligoo3lowt1800545() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.aLIGOaLIGOO3LowT1800545"]], "analytical_csd_lisa_tdi_xy() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.analytical_csd_lisa_tdi_XY"]], "analytical_psd_lisa_tdi_ae() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.analytical_psd_lisa_tdi_AE"]], "analytical_psd_lisa_tdi_ae_confusion() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.analytical_psd_lisa_tdi_AE_confusion"]], "analytical_psd_lisa_tdi_t() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.analytical_psd_lisa_tdi_T"]], "analytical_psd_lisa_tdi_xyz() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.analytical_psd_lisa_tdi_XYZ"]], "analytical_psd_taiji_confusion_noise() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.analytical_psd_taiji_confusion_noise"]], "analytical_psd_taiji_tdi_ae() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.analytical_psd_taiji_tdi_AE"]], "analytical_psd_taiji_tdi_ae_confusion() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.analytical_psd_taiji_tdi_AE_confusion"]], "analytical_psd_taiji_tdi_t() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.analytical_psd_taiji_tdi_T"]], "analytical_psd_taiji_tdi_xyz() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.analytical_psd_taiji_tdi_XYZ"]], "analytical_psd_tianqin_confusion_noise() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.analytical_psd_tianqin_confusion_noise"]], "analytical_psd_tianqin_tdi_ae() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.analytical_psd_tianqin_tdi_AE"]], "analytical_psd_tianqin_tdi_ae_confusion() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.analytical_psd_tianqin_tdi_AE_confusion"]], "analytical_psd_tianqin_tdi_t() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.analytical_psd_tianqin_tdi_T"]], "analytical_psd_tianqin_tdi_xyz() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.analytical_psd_tianqin_tdi_XYZ"]], "associate_psds_to_multi_ifo_segments() (in module pycbc.psd)": [[72, "pycbc.psd.associate_psds_to_multi_ifo_segments"]], "associate_psds_to_segments() (in module pycbc.psd)": [[72, "pycbc.psd.associate_psds_to_segments"]], "associate_psds_to_single_ifo_segments() (in module pycbc.psd)": [[72, "pycbc.psd.associate_psds_to_single_ifo_segments"]], "averaged_fplus_sq_approximated() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.averaged_fplus_sq_approximated"]], "averaged_lisa_fplus_sq_numerical() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.averaged_lisa_fplus_sq_numerical"]], "averaged_response_lisa_tdi() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.averaged_response_lisa_tdi"]], "averaged_response_taiji_tdi() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.averaged_response_taiji_tdi"]], "averaged_response_tianqin_tdi() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.averaged_response_tianqin_tdi"]], "averaged_tianqin_fplus_sq_numerical() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.averaged_tianqin_fplus_sq_numerical"]], "bandlimited_interpolate() (in module pycbc.psd.estimate)": [[72, "pycbc.psd.estimate.bandlimited_interpolate"]], "calc_filt_psd_variation() (in module pycbc.psd.variation)": [[72, "pycbc.psd.variation.calc_filt_psd_variation"]], "confusion_fit_lisa() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.confusion_fit_lisa"]], "confusion_fit_taiji() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.confusion_fit_taiji"]], "confusion_fit_tianqin() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.confusion_fit_tianqin"]], "create_full_filt() (in module pycbc.psd.variation)": [[72, "pycbc.psd.variation.create_full_filt"]], "eligomodel() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.eLIGOModel"]], "eligoshot() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.eLIGOShot"]], "find_trigger_value() (in module pycbc.psd.variation)": [[72, "pycbc.psd.variation.find_trigger_value"]], "flat_unity() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.flat_unity"]], "from_cli() (in module pycbc.psd)": [[72, "pycbc.psd.from_cli"]], "from_cli_multi_ifos() (in module pycbc.psd)": [[72, "pycbc.psd.from_cli_multi_ifos"]], "from_cli_single_ifo() (in module pycbc.psd)": [[72, "pycbc.psd.from_cli_single_ifo"]], "from_numpy_arrays() (in module pycbc.psd.read)": [[72, "pycbc.psd.read.from_numpy_arrays"]], "from_string() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.from_string"]], "from_txt() (in module pycbc.psd.read)": [[72, "pycbc.psd.read.from_txt"]], "from_xml() (in module pycbc.psd.read)": [[72, "pycbc.psd.read.from_xml"]], "generate_overlapping_psds() (in module pycbc.psd)": [[72, "pycbc.psd.generate_overlapping_psds"]], "get_lalsim_psd_list() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.get_lalsim_psd_list"]], "get_psd_model_list() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.get_psd_model_list"]], "get_pycbc_psd_list() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.get_pycbc_psd_list"]], "iligomodel() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.iLIGOModel"]], "iligosrd() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.iLIGOSRD"]], "iligoseismic() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.iLIGOSeismic"]], "iligoshot() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.iLIGOShot"]], "iligothermal() (in module pycbc.psd.analytical)": [[72, "pycbc.psd.analytical.iLIGOThermal"]], "insert_psd_option_group() (in module pycbc.psd)": [[72, "pycbc.psd.insert_psd_option_group"]], "insert_psd_option_group_multi_ifo() (in module pycbc.psd)": [[72, "pycbc.psd.insert_psd_option_group_multi_ifo"]], "interpolate() (in module pycbc.psd.estimate)": [[72, "pycbc.psd.estimate.interpolate"]], "inverse_spectrum_truncation() (in module pycbc.psd.estimate)": [[72, "pycbc.psd.estimate.inverse_spectrum_truncation"]], "lisa_psd_components() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.lisa_psd_components"]], "live_calc_psd_variation() (in module pycbc.psd.variation)": [[72, "pycbc.psd.variation.live_calc_psd_variation"]], "live_create_filter() (in module pycbc.psd.variation)": [[72, "pycbc.psd.variation.live_create_filter"]], "live_find_var_value() (in module pycbc.psd.variation)": [[72, "pycbc.psd.variation.live_find_var_value"]], "mean_square() (in module pycbc.psd.variation)": [[72, "pycbc.psd.variation.mean_square"]], "median_bias() (in module pycbc.psd.estimate)": [[72, "pycbc.psd.estimate.median_bias"]], "omega_length() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.omega_length"]], "psd_lisa_acc_noise() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.psd_lisa_acc_noise"]], "psd_lisa_oms_noise() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.psd_lisa_oms_noise"]], "psd_taiji_acc_noise() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.psd_taiji_acc_noise"]], "psd_taiji_oms_noise() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.psd_taiji_oms_noise"]], "psd_tianqin_acc_noise() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.psd_tianqin_acc_noise"]], "psd_tianqin_oms_noise() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.psd_tianqin_oms_noise"]], "pycbc.psd": [[72, "module-pycbc.psd"]], "pycbc.psd.analytical": [[72, "module-pycbc.psd.analytical"]], "pycbc.psd.analytical_space": [[72, "module-pycbc.psd.analytical_space"]], "pycbc.psd.estimate": [[72, "module-pycbc.psd.estimate"]], "pycbc.psd.read": [[72, "module-pycbc.psd.read"]], "pycbc.psd.variation": [[72, "module-pycbc.psd.variation"]], "semi_analytical_psd_lisa_confusion_noise() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.semi_analytical_psd_lisa_confusion_noise"]], "sensitivity_curve_lisa_scird() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.sensitivity_curve_lisa_SciRD"]], "sensitivity_curve_lisa_confusion() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.sensitivity_curve_lisa_confusion"]], "sensitivity_curve_lisa_semi_analytical() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.sensitivity_curve_lisa_semi_analytical"]], "sensitivity_curve_taiji_analytical() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.sensitivity_curve_taiji_analytical"]], "sensitivity_curve_taiji_confusion() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.sensitivity_curve_taiji_confusion"]], "sensitivity_curve_tianqin_analytical() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.sensitivity_curve_tianqin_analytical"]], "sensitivity_curve_tianqin_confusion() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.sensitivity_curve_tianqin_confusion"]], "sh_transformed_psd_lisa_tdi_xyz() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.sh_transformed_psd_lisa_tdi_XYZ"]], "taiji_psd_components() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.taiji_psd_components"]], "tianqin_psd_components() (in module pycbc.psd.analytical_space)": [[72, "pycbc.psd.analytical_space.tianqin_psd_components"]], "verify_psd_options() (in module pycbc.psd)": [[72, "pycbc.psd.verify_psd_options"]], "verify_psd_options_multi_ifo() (in module pycbc.psd)": [[72, "pycbc.psd.verify_psd_options_multi_ifo"]], "welch() (in module pycbc.psd.estimate)": [[72, "pycbc.psd.estimate.welch"]], "clicklink (class in pycbc.results.mpld3_utils)": [[73, "pycbc.results.mpld3_utils.ClickLink"]], "javascript (pycbc.results.mpld3_utils.clicklink attribute)": [[73, "pycbc.results.mpld3_utils.ClickLink.JAVASCRIPT"]], "javascript (pycbc.results.mpld3_utils.linetooltip attribute)": [[73, "pycbc.results.mpld3_utils.LineTooltip.JAVASCRIPT"]], "javascript (pycbc.results.mpld3_utils.mplslide attribute)": [[73, "pycbc.results.mpld3_utils.MPLSlide.JAVASCRIPT"]], "javascript (pycbc.results.mpld3_utils.tooltip attribute)": [[73, "pycbc.results.mpld3_utils.Tooltip.JAVASCRIPT"]], "linetooltip (class in pycbc.results.mpld3_utils)": [[73, "pycbc.results.mpld3_utils.LineTooltip"]], "mplslide (class in pycbc.results.mpld3_utils)": [[73, "pycbc.results.mpld3_utils.MPLSlide"]], "metaparser (class in pycbc.results.metadata)": [[73, "pycbc.results.metadata.MetaParser"]], "sectionnumber (class in pycbc.results.layout)": [[73, "pycbc.results.layout.SectionNumber"]], "tooltip (class in pycbc.results.mpld3_utils)": [[73, "pycbc.results.mpld3_utils.Tooltip"]], "add_style_opt_to_parser() (in module pycbc.results.plot)": [[73, "pycbc.results.plot.add_style_opt_to_parser"]], "axis_max_value() (in module pycbc.results.pygrb_plotting_utils)": [[73, "pycbc.results.pygrb_plotting_utils.axis_max_value"]], "coinc_timeseries_plot() (in module pycbc.results.followup)": [[73, "pycbc.results.followup.coinc_timeseries_plot"]], "columns_from_file_list() (in module pycbc.results.followup)": [[73, "pycbc.results.followup.columns_from_file_list"]], "construct_kde() (in module pycbc.results.scatter_histograms)": [[73, "pycbc.results.scatter_histograms.construct_kde"]], "construct_trials() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.construct_trials"]], "contour_plotter() (in module pycbc.results.pygrb_plotting_utils)": [[73, "pycbc.results.pygrb_plotting_utils.contour_plotter"]], "create_axes_grid() (in module pycbc.results.scatter_histograms)": [[73, "pycbc.results.scatter_histograms.create_axes_grid"]], "create_density_plot() (in module pycbc.results.scatter_histograms)": [[73, "pycbc.results.scatter_histograms.create_density_plot"]], "create_marginalized_hist() (in module pycbc.results.scatter_histograms)": [[73, "pycbc.results.scatter_histograms.create_marginalized_hist"]], "create_multidim_plot() (in module pycbc.results.scatter_histograms)": [[73, "pycbc.results.scatter_histograms.create_multidim_plot"]], "dataset_iterator() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.dataset_iterator"]], "drop_trailing_zeros() (in module pycbc.results.str_utils)": [[73, "pycbc.results.str_utils.drop_trailing_zeros"]], "extract_basic_trig_properties() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.extract_basic_trig_properties"]], "extract_ifos() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.extract_ifos"]], "extract_ifos_and_vetoes() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.extract_ifos_and_vetoes"]], "format_value() (in module pycbc.results.str_utils)": [[73, "pycbc.results.str_utils.format_value"]], "generate_asd_plot() (in module pycbc.results.psd)": [[73, "pycbc.results.psd.generate_asd_plot"]], "generate_snr_plot() (in module pycbc.results.snr)": [[73, "pycbc.results.snr.generate_snr_plot"]], "get_antenna_dist_factor() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.get_antenna_dist_factor"]], "get_code_version_numbers() (in module pycbc.results.versioning)": [[73, "pycbc.results.versioning.get_code_version_numbers"]], "get_coinc_snr() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.get_coinc_snr"]], "get_embedded_config() (in module pycbc.results.render)": [[73, "pycbc.results.render.get_embedded_config"]], "get_gracedb_search_link() (in module pycbc.results.followup)": [[73, "pycbc.results.followup.get_gracedb_search_link"]], "get_library_version_info() (in module pycbc.results.versioning)": [[73, "pycbc.results.versioning.get_library_version_info"]], "get_scale_fac() (in module pycbc.results.scatter_histograms)": [[73, "pycbc.results.scatter_histograms.get_scale_fac"]], "get_signum() (in module pycbc.results.str_utils)": [[73, "pycbc.results.str_utils.get_signum"]], "get_summary_page_link() (in module pycbc.results.dq)": [[73, "pycbc.results.dq.get_summary_page_link"]], "group_layout() (in module pycbc.results.layout)": [[73, "pycbc.results.layout.group_layout"]], "grouper() (in module pycbc.results.layout)": [[73, "pycbc.results.layout.grouper"]], "handle_data() (pycbc.results.metadata.metaparser method)": [[73, "pycbc.results.metadata.MetaParser.handle_data"]], "handle_starttag() (pycbc.results.metadata.metaparser method)": [[73, "pycbc.results.metadata.MetaParser.handle_starttag"]], "hist_overflow() (in module pycbc.results.plot)": [[73, "pycbc.results.plot.hist_overflow"]], "html_escape() (in module pycbc.results.metadata)": [[73, "pycbc.results.metadata.html_escape"]], "html_table() (in module pycbc.results.table_utils)": [[73, "pycbc.results.table_utils.html_table"]], "ifo_color() (in module pycbc.results.color)": [[73, "pycbc.results.color.ifo_color"]], "load_html_metadata() (in module pycbc.results.metadata)": [[73, "pycbc.results.metadata.load_html_metadata"]], "load_metadata_from_file() (in module pycbc.results.metadata)": [[73, "pycbc.results.metadata.load_metadata_from_file"]], "load_png_metadata() (in module pycbc.results.metadata)": [[73, "pycbc.results.metadata.load_png_metadata"]], "load_segment_dict() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.load_segment_dict"]], "load_time_slides() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.load_time_slides"]], "load_triggers() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.load_triggers"]], "load_xml_table() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.load_xml_table"]], "make_grb_segments_plot() (in module pycbc.results.pygrb_plotting_utils)": [[73, "pycbc.results.pygrb_plotting_utils.make_grb_segments_plot"]], "mathjax_html_header() (in module pycbc.results.str_utils)": [[73, "pycbc.results.str_utils.mathjax_html_header"]], "max_median_stat() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.max_median_stat"]], "mc_cal_wf_errs() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.mc_cal_wf_errs"]], "pycbc.results": [[73, "module-pycbc.results"]], "pycbc.results.color": [[73, "module-pycbc.results.color"]], "pycbc.results.dq": [[73, "module-pycbc.results.dq"]], "pycbc.results.followup": [[73, "module-pycbc.results.followup"]], "pycbc.results.layout": [[73, "module-pycbc.results.layout"]], "pycbc.results.metadata": [[73, "module-pycbc.results.metadata"]], "pycbc.results.mpld3_utils": [[73, "module-pycbc.results.mpld3_utils"]], "pycbc.results.plot": [[73, "module-pycbc.results.plot"]], "pycbc.results.psd": [[73, "module-pycbc.results.psd"]], "pycbc.results.pygrb_plotting_utils": [[73, "module-pycbc.results.pygrb_plotting_utils"]], "pycbc.results.pygrb_postprocessing_utils": [[73, "module-pycbc.results.pygrb_postprocessing_utils"]], "pycbc.results.render": [[73, "module-pycbc.results.render"]], "pycbc.results.scatter_histograms": [[73, "module-pycbc.results.scatter_histograms"]], "pycbc.results.snr": [[73, "module-pycbc.results.snr"]], "pycbc.results.str_utils": [[73, "module-pycbc.results.str_utils"]], "pycbc.results.table_utils": [[73, "module-pycbc.results.table_utils"]], "pycbc.results.versioning": [[73, "module-pycbc.results.versioning"]], "pygrb_add_bestnr_cut_opt() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.pygrb_add_bestnr_cut_opt"]], "pygrb_add_bestnr_opts() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.pygrb_add_bestnr_opts"]], "pygrb_add_injmc_opts() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.pygrb_add_injmc_opts"]], "pygrb_add_null_snr_opts() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.pygrb_add_null_snr_opts"]], "pygrb_add_single_snr_cut_opt() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.pygrb_add_single_snr_cut_opt"]], "pygrb_initialize_plot_parser() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.pygrb_initialize_plot_parser"]], "pygrb_plotter() (in module pycbc.results.pygrb_plotting_utils)": [[73, "pycbc.results.pygrb_plotting_utils.pygrb_plotter"]], "reduce_ticks() (in module pycbc.results.scatter_histograms)": [[73, "pycbc.results.scatter_histograms.reduce_ticks"]], "remove_common_offset() (in module pycbc.results.scatter_histograms)": [[73, "pycbc.results.scatter_histograms.remove_common_offset"]], "render_default() (in module pycbc.results.render)": [[73, "pycbc.results.render.render_default"]], "render_glitchgram() (in module pycbc.results.render)": [[73, "pycbc.results.render.render_glitchgram"]], "render_ignore() (in module pycbc.results.render)": [[73, "pycbc.results.render.render_ignore"]], "render_text() (in module pycbc.results.render)": [[73, "pycbc.results.render.render_text"]], "render_tmplt() (in module pycbc.results.render)": [[73, "pycbc.results.render.render_tmplt"]], "render_workflow_html_template() (in module pycbc.results.render)": [[73, "pycbc.results.render.render_workflow_html_template"]], "save_fig_with_metadata() (in module pycbc.results.metadata)": [[73, "pycbc.results.metadata.save_fig_with_metadata"]], "save_html_with_metadata() (in module pycbc.results.metadata)": [[73, "pycbc.results.metadata.save_html_with_metadata"]], "save_pdf_with_metadata() (in module pycbc.results.metadata)": [[73, "pycbc.results.metadata.save_pdf_with_metadata"]], "save_png_with_metadata() (in module pycbc.results.metadata)": [[73, "pycbc.results.metadata.save_png_with_metadata"]], "set_marginal_histogram_title() (in module pycbc.results.scatter_histograms)": [[73, "pycbc.results.scatter_histograms.set_marginal_histogram_title"]], "set_style_from_cli() (in module pycbc.results.plot)": [[73, "pycbc.results.plot.set_style_from_cli"]], "setup_template_render() (in module pycbc.results.render)": [[73, "pycbc.results.render.setup_template_render"]], "single_layout() (in module pycbc.results.layout)": [[73, "pycbc.results.layout.single_layout"]], "sort_stat() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.sort_stat"]], "sort_trigs() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.sort_trigs"]], "source_color() (in module pycbc.results.color)": [[73, "pycbc.results.color.source_color"]], "static_table() (in module pycbc.results.table_utils)": [[73, "pycbc.results.table_utils.static_table"]], "template_hash_to_id() (in module pycbc.results.pygrb_postprocessing_utils)": [[73, "pycbc.results.pygrb_postprocessing_utils.template_hash_to_id"]], "times_to_links() (in module pycbc.results.followup)": [[73, "pycbc.results.followup.times_to_links"]], "times_to_urls() (in module pycbc.results.followup)": [[73, "pycbc.results.followup.times_to_urls"]], "trigger_timeseries_plot() (in module pycbc.results.followup)": [[73, "pycbc.results.followup.trigger_timeseries_plot"]], "two_column_layout() (in module pycbc.results.layout)": [[73, "pycbc.results.layout.two_column_layout"]], "cubicspline (class in pycbc.strain.calibration)": [[74, "pycbc.strain.calibration.CubicSpline"]], "cubicspline (class in pycbc.strain.recalibrate)": [[74, "pycbc.strain.recalibrate.CubicSpline"]], "physicalmodel (class in pycbc.strain.recalibrate)": [[74, "pycbc.strain.recalibrate.PhysicalModel"]], "recalibrate (class in pycbc.strain.calibration)": [[74, "pycbc.strain.calibration.Recalibrate"]], "recalibrate (class in pycbc.strain.recalibrate)": [[74, "pycbc.strain.recalibrate.Recalibrate"]], "strainbuffer (class in pycbc.strain.strain)": [[74, "pycbc.strain.strain.StrainBuffer"]], "strainsegments (class in pycbc.strain.strain)": [[74, "pycbc.strain.strain.StrainSegments"]], "add_gate_option_group() (in module pycbc.strain.gate)": [[74, "pycbc.strain.gate.add_gate_option_group"]], "add_hard_count() (pycbc.strain.strain.strainbuffer method)": [[74, "pycbc.strain.strain.StrainBuffer.add_hard_count"]], "adjust_strain() (pycbc.strain.recalibrate.physicalmodel method)": [[74, "pycbc.strain.recalibrate.PhysicalModel.adjust_strain"]], "advance() (pycbc.strain.strain.strainbuffer method)": [[74, "pycbc.strain.strain.StrainBuffer.advance"]], "apply_calibration() (pycbc.strain.calibration.cubicspline method)": [[74, "pycbc.strain.calibration.CubicSpline.apply_calibration"]], "apply_calibration() (pycbc.strain.calibration.recalibrate method)": [[74, "pycbc.strain.calibration.Recalibrate.apply_calibration"]], "apply_calibration() (pycbc.strain.recalibrate.cubicspline method)": [[74, "pycbc.strain.recalibrate.CubicSpline.apply_calibration"]], "apply_calibration() (pycbc.strain.recalibrate.recalibrate method)": [[74, "pycbc.strain.recalibrate.Recalibrate.apply_calibration"]], "apply_gates_to_fd() (in module pycbc.strain.gate)": [[74, "pycbc.strain.gate.apply_gates_to_fd"]], "apply_gates_to_td() (in module pycbc.strain.gate)": [[74, "pycbc.strain.gate.apply_gates_to_td"]], "avg_inner_product() (in module pycbc.strain.lines)": [[74, "pycbc.strain.lines.avg_inner_product"]], "calibration_lines() (in module pycbc.strain.lines)": [[74, "pycbc.strain.lines.calibration_lines"]], "check_psd_dist() (pycbc.strain.strain.strainbuffer method)": [[74, "pycbc.strain.strain.StrainBuffer.check_psd_dist"]], "clean_data() (in module pycbc.strain.lines)": [[74, "pycbc.strain.lines.clean_data"]], "complex_median() (in module pycbc.strain.lines)": [[74, "pycbc.strain.lines.complex_median"]], "create_memory_and_engine_for_class_based_fft() (in module pycbc.strain.strain)": [[74, "pycbc.strain.strain.create_memory_and_engine_for_class_based_fft"]], "detect_loud_glitches() (in module pycbc.strain.strain)": [[74, "pycbc.strain.strain.detect_loud_glitches"]], "end_time (pycbc.strain.strain.strainbuffer property)": [[74, "pycbc.strain.strain.StrainBuffer.end_time"]], "execute_cached_fft() (in module pycbc.strain.strain)": [[74, "pycbc.strain.strain.execute_cached_fft"]], "execute_cached_ifft() (in module pycbc.strain.strain)": [[74, "pycbc.strain.strain.execute_cached_ifft"]], "fourier_segments() (pycbc.strain.strain.strainsegments method)": [[74, "pycbc.strain.strain.StrainSegments.fourier_segments"]], "from_cli() (in module pycbc.strain.strain)": [[74, "pycbc.strain.strain.from_cli"]], "from_cli() (pycbc.strain.strain.strainbuffer class method)": [[74, "pycbc.strain.strain.StrainBuffer.from_cli"]], "from_cli() (pycbc.strain.strain.strainsegments class method)": [[74, "pycbc.strain.strain.StrainSegments.from_cli"]], "from_cli_multi_ifos() (in module pycbc.strain.strain)": [[74, "pycbc.strain.strain.from_cli_multi_ifos"]], "from_cli_multi_ifos() (pycbc.strain.strain.strainsegments class method)": [[74, "pycbc.strain.strain.StrainSegments.from_cli_multi_ifos"]], "from_cli_single_ifo() (in module pycbc.strain.strain)": [[74, "pycbc.strain.strain.from_cli_single_ifo"]], "from_cli_single_ifo() (pycbc.strain.strain.strainsegments class method)": [[74, "pycbc.strain.strain.StrainSegments.from_cli_single_ifo"]], "from_config() (pycbc.strain.calibration.recalibrate class method)": [[74, "pycbc.strain.calibration.Recalibrate.from_config"]], "from_config() (pycbc.strain.recalibrate.physicalmodel class method)": [[74, "pycbc.strain.recalibrate.PhysicalModel.from_config"]], "from_config() (pycbc.strain.recalibrate.recalibrate class method)": [[74, "pycbc.strain.recalibrate.Recalibrate.from_config"]], "gate_and_paint() (in module pycbc.strain.gate)": [[74, "pycbc.strain.gate.gate_and_paint"]], "gate_data() (in module pycbc.strain.strain)": [[74, "pycbc.strain.strain.gate_data"]], "gates_from_cli() (in module pycbc.strain.gate)": [[74, "pycbc.strain.gate.gates_from_cli"]], "insert_segment_option_group() (pycbc.strain.strain.strainsegments class method)": [[74, "pycbc.strain.strain.StrainSegments.insert_segment_option_group"]], "insert_segment_option_group_multi_ifo() (pycbc.strain.strain.strainsegments class method)": [[74, "pycbc.strain.strain.StrainSegments.insert_segment_option_group_multi_ifo"]], "insert_strain_option_group() (in module pycbc.strain.strain)": [[74, "pycbc.strain.strain.insert_strain_option_group"]], "insert_strain_option_group_multi_ifo() (in module pycbc.strain.strain)": [[74, "pycbc.strain.strain.insert_strain_option_group_multi_ifo"]], "invalidate_psd() (pycbc.strain.strain.strainbuffer method)": [[74, "pycbc.strain.strain.StrainBuffer.invalidate_psd"]], "line_model() (in module pycbc.strain.lines)": [[74, "pycbc.strain.lines.line_model"]], "map_to_adjust() (pycbc.strain.calibration.recalibrate method)": [[74, "pycbc.strain.calibration.Recalibrate.map_to_adjust"]], "map_to_adjust() (pycbc.strain.recalibrate.physicalmodel method)": [[74, "pycbc.strain.recalibrate.PhysicalModel.map_to_adjust"]], "map_to_adjust() (pycbc.strain.recalibrate.recalibrate method)": [[74, "pycbc.strain.recalibrate.Recalibrate.map_to_adjust"]], "matching_line() (in module pycbc.strain.lines)": [[74, "pycbc.strain.lines.matching_line"]], "name (pycbc.strain.calibration.cubicspline attribute)": [[74, "pycbc.strain.calibration.CubicSpline.name"]], "name (pycbc.strain.calibration.recalibrate attribute)": [[74, "pycbc.strain.calibration.Recalibrate.name"]], "name (pycbc.strain.recalibrate.cubicspline attribute)": [[74, "pycbc.strain.recalibrate.CubicSpline.name"]], "name (pycbc.strain.recalibrate.physicalmodel attribute)": [[74, "pycbc.strain.recalibrate.PhysicalModel.name"]], "name (pycbc.strain.recalibrate.recalibrate attribute)": [[74, "pycbc.strain.recalibrate.Recalibrate.name"]], "near_hwinj() (pycbc.strain.strain.strainbuffer method)": [[74, "pycbc.strain.strain.StrainBuffer.near_hwinj"]], "next_power_of_2() (in module pycbc.strain.strain)": [[74, "pycbc.strain.strain.next_power_of_2"]], "null_advance_strain() (pycbc.strain.strain.strainbuffer method)": [[74, "pycbc.strain.strain.StrainBuffer.null_advance_strain"]], "overwhitened_data() (pycbc.strain.strain.strainbuffer method)": [[74, "pycbc.strain.strain.StrainBuffer.overwhitened_data"]], "psd_gates_from_cli() (in module pycbc.strain.gate)": [[74, "pycbc.strain.gate.psd_gates_from_cli"]], "pycbc.strain": [[74, "module-pycbc.strain"]], "pycbc.strain.calibration": [[74, "module-pycbc.strain.calibration"]], "pycbc.strain.gate": [[74, "module-pycbc.strain.gate"]], "pycbc.strain.lines": [[74, "module-pycbc.strain.lines"]], "pycbc.strain.recalibrate": [[74, "module-pycbc.strain.recalibrate"]], "pycbc.strain.strain": [[74, "module-pycbc.strain.strain"]], "read_model_from_config() (in module pycbc.strain)": [[74, "pycbc.strain.read_model_from_config"]], "recalculate_psd() (pycbc.strain.strain.strainbuffer method)": [[74, "pycbc.strain.strain.StrainBuffer.recalculate_psd"]], "required_opts_list (pycbc.strain.strain.strainsegments attribute)": [[74, "pycbc.strain.strain.StrainSegments.required_opts_list"]], "start_time (pycbc.strain.strain.strainbuffer property)": [[74, "pycbc.strain.strain.StrainBuffer.start_time"]], "tf_from_file() (pycbc.strain.recalibrate.physicalmodel class method)": [[74, "pycbc.strain.recalibrate.PhysicalModel.tf_from_file"]], "update_c() (pycbc.strain.recalibrate.physicalmodel method)": [[74, "pycbc.strain.recalibrate.PhysicalModel.update_c"]], "update_g() (pycbc.strain.recalibrate.physicalmodel method)": [[74, "pycbc.strain.recalibrate.PhysicalModel.update_g"]], "update_r() (pycbc.strain.recalibrate.physicalmodel method)": [[74, "pycbc.strain.recalibrate.PhysicalModel.update_r"]], "verify_segment_options() (pycbc.strain.strain.strainsegments class method)": [[74, "pycbc.strain.strain.StrainSegments.verify_segment_options"]], "verify_segment_options_multi_ifo() (pycbc.strain.strain.strainsegments class method)": [[74, "pycbc.strain.strain.StrainSegments.verify_segment_options_multi_ifo"]], "verify_strain_options() (in module pycbc.strain.strain)": [[74, "pycbc.strain.strain.verify_strain_options"]], "verify_strain_options_multi_ifo() (in module pycbc.strain.strain)": [[74, "pycbc.strain.strain.verify_strain_options_multi_ifo"]], "indentedhelpformatterwithnl (class in pycbc.tmpltbank.option_utils)": [[75, "pycbc.tmpltbank.option_utils.IndentedHelpFormatterWithNL"]], "partitionedtmpltbank (class in pycbc.tmpltbank.partitioned_bank)": [[75, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank"]], "add_point_by_chi_coords() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[75, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.add_point_by_chi_coords"]], "add_point_by_masses() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[75, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.add_point_by_masses"]], "add_tmpltbank_from_hdf_file() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[75, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.add_tmpltbank_from_hdf_file"]], "add_tmpltbank_from_xml_table() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[75, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.add_tmpltbank_from_xml_table"]], "calc_point_dist() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.calc_point_dist"]], "calc_point_dist_vary() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.calc_point_dist_vary"]], "calc_point_distance() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[75, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.calc_point_distance"]], "calc_point_distance_vary() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[75, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.calc_point_distance_vary"]], "calculate_ethinca_metric_comps() (in module pycbc.tmpltbank.bank_output_utils)": [[75, "pycbc.tmpltbank.bank_output_utils.calculate_ethinca_metric_comps"]], "calculate_metric() (in module pycbc.tmpltbank.calc_moments)": [[75, "pycbc.tmpltbank.calc_moments.calculate_metric"]], "calculate_metric_comp() (in module pycbc.tmpltbank.calc_moments)": [[75, "pycbc.tmpltbank.calc_moments.calculate_metric_comp"]], "calculate_moment() (in module pycbc.tmpltbank.calc_moments)": [[75, "pycbc.tmpltbank.calc_moments.calculate_moment"]], "check_bin_existence() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[75, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.check_bin_existence"]], "check_ethinca_against_bank_params() (in module pycbc.tmpltbank.option_utils)": [[75, "pycbc.tmpltbank.option_utils.check_ethinca_against_bank_params"]], "convert_to_sngl_inspiral_table() (in module pycbc.tmpltbank.bank_output_utils)": [[75, "pycbc.tmpltbank.bank_output_utils.convert_to_sngl_inspiral_table"]], "default_delta_bh_spin (pycbc.tmpltbank.option_utils.massrangeparameters attribute)": [[75, "pycbc.tmpltbank.option_utils.massRangeParameters.default_delta_bh_spin"]], "default_delta_ns_mass (pycbc.tmpltbank.option_utils.massrangeparameters attribute)": [[75, "pycbc.tmpltbank.option_utils.massRangeParameters.default_delta_ns_mass"]], "default_ns_eos (pycbc.tmpltbank.option_utils.massrangeparameters attribute)": [[75, "pycbc.tmpltbank.option_utils.massRangeParameters.default_ns_eos"]], "default_nsbh_boundary_mass (pycbc.tmpltbank.option_utils.massrangeparameters attribute)": [[75, "pycbc.tmpltbank.option_utils.massRangeParameters.default_nsbh_boundary_mass"]], "determine_eigen_directions() (in module pycbc.tmpltbank.calc_moments)": [[75, "pycbc.tmpltbank.calc_moments.determine_eigen_directions"]], "estimate_mass_range() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.estimate_mass_range"]], "ethincaparameters (class in pycbc.tmpltbank.option_utils)": [[75, "pycbc.tmpltbank.option_utils.ethincaParameters"]], "ethinca_order_from_string() (in module pycbc.tmpltbank.lambda_mapping)": [[75, "pycbc.tmpltbank.lambda_mapping.ethinca_order_from_string"]], "evals (pycbc.tmpltbank.option_utils.metricparameters property)": [[75, "pycbc.tmpltbank.option_utils.metricParameters.evals"]], "evecs (pycbc.tmpltbank.option_utils.metricparameters property)": [[75, "pycbc.tmpltbank.option_utils.metricParameters.evecs"]], "evecscv (pycbc.tmpltbank.option_utils.metricparameters property)": [[75, "pycbc.tmpltbank.option_utils.metricParameters.evecsCV"]], "find_closest_calculated_frequencies() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.find_closest_calculated_frequencies"]], "find_max_and_min_frequencies() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.find_max_and_min_frequencies"]], "find_point_bin() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[75, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.find_point_bin"]], "find_xi_extrema_brute() (in module pycbc.tmpltbank.brute_force_methods)": [[75, "pycbc.tmpltbank.brute_force_methods.find_xi_extrema_brute"]], "format_description() (pycbc.tmpltbank.option_utils.indentedhelpformatterwithnl method)": [[75, "pycbc.tmpltbank.option_utils.IndentedHelpFormatterWithNL.format_description"]], "format_option() (pycbc.tmpltbank.option_utils.indentedhelpformatterwithnl method)": [[75, "pycbc.tmpltbank.option_utils.IndentedHelpFormatterWithNL.format_option"]], "from_argparse() (pycbc.tmpltbank.option_utils.ethincaparameters class method)": [[75, "pycbc.tmpltbank.option_utils.ethincaParameters.from_argparse"]], "from_argparse() (pycbc.tmpltbank.option_utils.massrangeparameters class method)": [[75, "pycbc.tmpltbank.option_utils.massRangeParameters.from_argparse"]], "from_argparse() (pycbc.tmpltbank.option_utils.metricparameters class method)": [[75, "pycbc.tmpltbank.option_utils.metricParameters.from_argparse"]], "generate_anstar_3d_lattice() (in module pycbc.tmpltbank.lattice_utils)": [[75, "pycbc.tmpltbank.lattice_utils.generate_anstar_3d_lattice"]], "generate_hexagonal_lattice() (in module pycbc.tmpltbank.lattice_utils)": [[75, "pycbc.tmpltbank.lattice_utils.generate_hexagonal_lattice"]], "generate_inverse_mapping() (in module pycbc.tmpltbank.lambda_mapping)": [[75, "pycbc.tmpltbank.lambda_mapping.generate_inverse_mapping"]], "generate_mapping() (in module pycbc.tmpltbank.lambda_mapping)": [[75, "pycbc.tmpltbank.lambda_mapping.generate_mapping"]], "get_bank_property() (in module pycbc.tmpltbank.bank_conversions)": [[75, "pycbc.tmpltbank.bank_conversions.get_bank_property"]], "get_chirp_params() (in module pycbc.tmpltbank.lambda_mapping)": [[75, "pycbc.tmpltbank.lambda_mapping.get_chirp_params"]], "get_conv_params() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.get_conv_params"]], "get_cov_params() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.get_cov_params"]], "get_covaried_params() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.get_covaried_params"]], "get_ethinca_orders() (in module pycbc.tmpltbank.lambda_mapping)": [[75, "pycbc.tmpltbank.lambda_mapping.get_ethinca_orders"]], "get_freq_map_and_normalizations() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[75, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.get_freq_map_and_normalizations"]], "get_mass_distribution() (in module pycbc.tmpltbank.brute_force_methods)": [[75, "pycbc.tmpltbank.brute_force_methods.get_mass_distribution"]], "get_moments() (in module pycbc.tmpltbank.calc_moments)": [[75, "pycbc.tmpltbank.calc_moments.get_moments"]], "get_mu_params() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.get_mu_params"]], "get_options_from_group() (in module pycbc.tmpltbank.option_utils)": [[75, "pycbc.tmpltbank.option_utils.get_options_from_group"]], "get_physical_covaried_masses() (in module pycbc.tmpltbank.brute_force_methods)": [[75, "pycbc.tmpltbank.brute_force_methods.get_physical_covaried_masses"]], "get_point_distance() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.get_point_distance"]], "get_point_from_bins_and_idx() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[75, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.get_point_from_bins_and_idx"]], "get_random_mass() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.get_random_mass"]], "get_random_mass_point_particles() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.get_random_mass_point_particles"]], "insert_base_bank_options() (in module pycbc.tmpltbank.option_utils)": [[75, "pycbc.tmpltbank.option_utils.insert_base_bank_options"]], "insert_ethinca_metric_options() (in module pycbc.tmpltbank.option_utils)": [[75, "pycbc.tmpltbank.option_utils.insert_ethinca_metric_options"]], "insert_mass_range_option_group() (in module pycbc.tmpltbank.option_utils)": [[75, "pycbc.tmpltbank.option_utils.insert_mass_range_option_group"]], "insert_metric_calculation_options() (in module pycbc.tmpltbank.option_utils)": [[75, "pycbc.tmpltbank.option_utils.insert_metric_calculation_options"]], "interpolate_psd() (in module pycbc.tmpltbank.calc_moments)": [[75, "pycbc.tmpltbank.calc_moments.interpolate_psd"]], "is_outside_range() (pycbc.tmpltbank.option_utils.massrangeparameters method)": [[75, "pycbc.tmpltbank.option_utils.massRangeParameters.is_outside_range"]], "massrangeparameters (class in pycbc.tmpltbank.option_utils)": [[75, "pycbc.tmpltbank.option_utils.massRangeParameters"]], "metric (pycbc.tmpltbank.option_utils.metricparameters property)": [[75, "pycbc.tmpltbank.option_utils.metricParameters.metric"]], "metricparameters (class in pycbc.tmpltbank.option_utils)": [[75, "pycbc.tmpltbank.option_utils.metricParameters"]], "moments (pycbc.tmpltbank.option_utils.metricparameters property)": [[75, "pycbc.tmpltbank.option_utils.metricParameters.moments"]], "output_all_points() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[75, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.output_all_points"]], "output_bank_to_file() (in module pycbc.tmpltbank.bank_output_utils)": [[75, "pycbc.tmpltbank.bank_output_utils.output_bank_to_file"]], "output_bank_to_hdf() (in module pycbc.tmpltbank.bank_output_utils)": [[75, "pycbc.tmpltbank.bank_output_utils.output_bank_to_hdf"]], "output_sngl_inspiral_table() (in module pycbc.tmpltbank.bank_output_utils)": [[75, "pycbc.tmpltbank.bank_output_utils.output_sngl_inspiral_table"]], "outspiral_loop() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.outspiral_loop"]], "psd (pycbc.tmpltbank.option_utils.metricparameters property)": [[75, "pycbc.tmpltbank.option_utils.metricParameters.psd"]], "pycbc.tmpltbank": [[75, "module-pycbc.tmpltbank"]], "pycbc.tmpltbank.bank_conversions": [[75, "module-pycbc.tmpltbank.bank_conversions"]], "pycbc.tmpltbank.bank_output_utils": [[75, "module-pycbc.tmpltbank.bank_output_utils"]], "pycbc.tmpltbank.brute_force_methods": [[75, "module-pycbc.tmpltbank.brute_force_methods"]], "pycbc.tmpltbank.calc_moments": [[75, "module-pycbc.tmpltbank.calc_moments"]], "pycbc.tmpltbank.coord_utils": [[75, "module-pycbc.tmpltbank.coord_utils"]], "pycbc.tmpltbank.lambda_mapping": [[75, "module-pycbc.tmpltbank.lambda_mapping"]], "pycbc.tmpltbank.lattice_utils": [[75, "module-pycbc.tmpltbank.lattice_utils"]], "pycbc.tmpltbank.option_utils": [[75, "module-pycbc.tmpltbank.option_utils"]], "pycbc.tmpltbank.partitioned_bank": [[75, "module-pycbc.tmpltbank.partitioned_bank"]], "return_nearest_cutoff() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.return_nearest_cutoff"]], "rotate_vector() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.rotate_vector"]], "stack_xi_direction_brute() (in module pycbc.tmpltbank.brute_force_methods)": [[75, "pycbc.tmpltbank.brute_force_methods.stack_xi_direction_brute"]], "test_point_dist() (in module pycbc.tmpltbank.coord_utils)": [[75, "pycbc.tmpltbank.coord_utils.test_point_dist"]], "test_point_distance() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[75, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.test_point_distance"]], "test_point_distance_vary() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[75, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.test_point_distance_vary"]], "time_unprojected_metric (pycbc.tmpltbank.option_utils.metricparameters property)": [[75, "pycbc.tmpltbank.option_utils.metricParameters.time_unprojected_metric"]], "verify_ethinca_metric_options() (in module pycbc.tmpltbank.option_utils)": [[75, "pycbc.tmpltbank.option_utils.verify_ethinca_metric_options"]], "verify_mass_range_options() (in module pycbc.tmpltbank.option_utils)": [[75, "pycbc.tmpltbank.option_utils.verify_mass_range_options"]], "verify_metric_calculation_options() (in module pycbc.tmpltbank.option_utils)": [[75, "pycbc.tmpltbank.option_utils.verify_metric_calculation_options"]], "array (class in pycbc.types.array)": [[76, "pycbc.types.array.Array"]], "deepcopyableconfigparser (class in pycbc.types.config)": [[76, "pycbc.types.config.DeepCopyableConfigParser"]], "dictoptionaction (class in pycbc.types.optparse)": [[76, "pycbc.types.optparse.DictOptionAction"]], "dictwithdefaultreturn (class in pycbc.types.optparse)": [[76, "pycbc.types.optparse.DictWithDefaultReturn"]], "frequencyseries (class in pycbc.types.frequencyseries)": [[76, "pycbc.types.frequencyseries.FrequencySeries"]], "interpolatingconfigparser (class in pycbc.types.config)": [[76, "pycbc.types.config.InterpolatingConfigParser"]], "multidetdictoptionaction (class in pycbc.types.optparse)": [[76, "pycbc.types.optparse.MultiDetDictOptionAction"]], "multidetmulticolonoptionaction (class in pycbc.types.optparse)": [[76, "pycbc.types.optparse.MultiDetMultiColonOptionAction"]], "multidetoptionaction (class in pycbc.types.optparse)": [[76, "pycbc.types.optparse.MultiDetOptionAction"]], "multidetoptionactionspecial (class in pycbc.types.optparse)": [[76, "pycbc.types.optparse.MultiDetOptionActionSpecial"]], "multidetoptionappendaction (class in pycbc.types.optparse)": [[76, "pycbc.types.optparse.MultiDetOptionAppendAction"]], "timeseries (class in pycbc.types.timeseries)": [[76, "pycbc.types.timeseries.TimeSeries"]], "abs_arg_max() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.abs_arg_max"]], "abs_arg_max() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.abs_arg_max"]], "abs_arg_max_complex() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.abs_arg_max_complex"]], "abs_max_loc() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.abs_max_loc"]], "abs_max_loc() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.abs_max_loc"]], "add_into() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.add_into"]], "add_options_to_section() (pycbc.types.config.interpolatingconfigparser method)": [[76, "pycbc.types.config.InterpolatingConfigParser.add_options_to_section"]], "almost_equal_elem() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.almost_equal_elem"]], "almost_equal_elem() (pycbc.types.frequencyseries.frequencyseries method)": [[76, "pycbc.types.frequencyseries.FrequencySeries.almost_equal_elem"]], "almost_equal_elem() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.almost_equal_elem"]], "almost_equal_norm() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.almost_equal_norm"]], "almost_equal_norm() (pycbc.types.frequencyseries.frequencyseries method)": [[76, "pycbc.types.frequencyseries.FrequencySeries.almost_equal_norm"]], "almost_equal_norm() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.almost_equal_norm"]], "append_zeros() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.append_zeros"]], "astype() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.astype"]], "at_frequency() (pycbc.types.frequencyseries.frequencyseries method)": [[76, "pycbc.types.frequencyseries.FrequencySeries.at_frequency"]], "at_time() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.at_time"]], "at_times() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.at_times"]], "check_aligned() (in module pycbc.types.aligned)": [[76, "pycbc.types.aligned.check_aligned"]], "check_duplicate_options() (pycbc.types.config.interpolatingconfigparser method)": [[76, "pycbc.types.config.InterpolatingConfigParser.check_duplicate_options"]], "check_same_len_precision() (in module pycbc.types.array)": [[76, "pycbc.types.array.check_same_len_precision"]], "clear() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.clear"]], "clear() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.clear"]], "common_kind() (in module pycbc.types.array)": [[76, "pycbc.types.array.common_kind"]], "complex_same_precision_as() (in module pycbc.types.array)": [[76, "pycbc.types.array.complex_same_precision_as"]], "conj() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.conj"]], "convert_to_process_params_dict() (in module pycbc.types.optparse)": [[76, "pycbc.types.optparse.convert_to_process_params_dict"]], "copy() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.copy"]], "copy_opts_for_single_ifo() (in module pycbc.types.optparse)": [[76, "pycbc.types.optparse.copy_opts_for_single_ifo"]], "crop() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.crop"]], "cumsum() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.cumsum"]], "cumsum() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.cumsum"]], "cyclic_time_shift() (pycbc.types.frequencyseries.frequencyseries method)": [[76, "pycbc.types.frequencyseries.FrequencySeries.cyclic_time_shift"]], "cyclic_time_shift() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.cyclic_time_shift"]], "data (pycbc.types.array.array property)": [[76, "pycbc.types.array.Array.data"]], "default_set (pycbc.types.optparse.dictwithdefaultreturn attribute)": [[76, "pycbc.types.optparse.DictWithDefaultReturn.default_set"]], "delta_f (pycbc.types.frequencyseries.frequencyseries property)": [[76, "pycbc.types.frequencyseries.FrequencySeries.delta_f"]], "delta_f (pycbc.types.timeseries.timeseries property)": [[76, "pycbc.types.timeseries.TimeSeries.delta_f"]], "delta_t (pycbc.types.frequencyseries.frequencyseries property)": [[76, "pycbc.types.frequencyseries.FrequencySeries.delta_t"]], "delta_t (pycbc.types.timeseries.timeseries property)": [[76, "pycbc.types.timeseries.TimeSeries.delta_t"]], "detrend() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.detrend"]], "dot() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.dot"]], "dot() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.dot"]], "dtype (pycbc.types.array.array property)": [[76, "pycbc.types.array.Array.dtype"]], "duration (pycbc.types.frequencyseries.frequencyseries property)": [[76, "pycbc.types.frequencyseries.FrequencySeries.duration"]], "duration (pycbc.types.timeseries.timeseries property)": [[76, "pycbc.types.timeseries.TimeSeries.duration"]], "empty() (in module pycbc.types.aligned)": [[76, "pycbc.types.aligned.empty"]], "empty() (in module pycbc.types.array)": [[76, "pycbc.types.array.empty"]], "empty() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.empty"]], "end_time (pycbc.types.frequencyseries.frequencyseries property)": [[76, "pycbc.types.frequencyseries.FrequencySeries.end_time"]], "end_time (pycbc.types.timeseries.timeseries property)": [[76, "pycbc.types.timeseries.TimeSeries.end_time"]], "ensure_one_opt() (in module pycbc.types.optparse)": [[76, "pycbc.types.optparse.ensure_one_opt"]], "ensure_one_opt_multi_ifo() (in module pycbc.types.optparse)": [[76, "pycbc.types.optparse.ensure_one_opt_multi_ifo"]], "epoch (pycbc.types.frequencyseries.frequencyseries property)": [[76, "pycbc.types.frequencyseries.FrequencySeries.epoch"]], "epoch_close() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.epoch_close"]], "fill() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.fill"]], "filter_psd() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.filter_psd"]], "fir_zero_filter() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.fir_zero_filter"]], "force_precision_to_match() (in module pycbc.types.array)": [[76, "pycbc.types.array.force_precision_to_match"]], "from_cli() (pycbc.types.config.interpolatingconfigparser class method)": [[76, "pycbc.types.config.InterpolatingConfigParser.from_cli"]], "gate() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.gate"]], "get_delta_f() (pycbc.types.frequencyseries.frequencyseries method)": [[76, "pycbc.types.frequencyseries.FrequencySeries.get_delta_f"]], "get_delta_t() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.get_delta_t"]], "get_duration() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.get_duration"]], "get_end_time() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.get_end_time"]], "get_epoch() (pycbc.types.frequencyseries.frequencyseries method)": [[76, "pycbc.types.frequencyseries.FrequencySeries.get_epoch"]], "get_opt_tag() (pycbc.types.config.interpolatingconfigparser method)": [[76, "pycbc.types.config.InterpolatingConfigParser.get_opt_tag"]], "get_opt_tags() (pycbc.types.config.interpolatingconfigparser method)": [[76, "pycbc.types.config.InterpolatingConfigParser.get_opt_tags"]], "get_sample_frequencies() (pycbc.types.frequencyseries.frequencyseries method)": [[76, "pycbc.types.frequencyseries.FrequencySeries.get_sample_frequencies"]], "get_sample_rate() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.get_sample_rate"]], "get_sample_times() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.get_sample_times"]], "get_subsections() (pycbc.types.config.interpolatingconfigparser method)": [[76, "pycbc.types.config.InterpolatingConfigParser.get_subsections"]], "has_option_tag() (pycbc.types.config.interpolatingconfigparser method)": [[76, "pycbc.types.config.InterpolatingConfigParser.has_option_tag"]], "has_option_tags() (pycbc.types.config.interpolatingconfigparser method)": [[76, "pycbc.types.config.InterpolatingConfigParser.has_option_tags"]], "highpass_fir() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.highpass_fir"]], "ifo_set (pycbc.types.optparse.dictwithdefaultreturn attribute)": [[76, "pycbc.types.optparse.DictWithDefaultReturn.ifo_set"]], "imag() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.imag"]], "inject() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.inject"]], "inner() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.inner"]], "inner() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.inner"]], "inner_real() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.inner_real"]], "interpolate_string() (pycbc.types.config.interpolatingconfigparser method)": [[76, "pycbc.types.config.InterpolatingConfigParser.interpolate_string"]], "itemsize (pycbc.types.array.array property)": [[76, "pycbc.types.array.Array.itemsize"]], "kind (pycbc.types.array.array property)": [[76, "pycbc.types.array.Array.kind"]], "lal() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.lal"]], "lal() (pycbc.types.frequencyseries.frequencyseries method)": [[76, "pycbc.types.frequencyseries.FrequencySeries.lal"]], "lal() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.lal"]], "load_array() (in module pycbc.types.array)": [[76, "pycbc.types.array.load_array"]], "load_frequencyseries() (in module pycbc.types.frequencyseries)": [[76, "pycbc.types.frequencyseries.load_frequencyseries"]], "load_timeseries() (in module pycbc.types.timeseries)": [[76, "pycbc.types.timeseries.load_timeseries"]], "lowpass_fir() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.lowpass_fir"]], "match() (pycbc.types.frequencyseries.frequencyseries method)": [[76, "pycbc.types.frequencyseries.FrequencySeries.match"]], "match() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.match"]], "max() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.max"]], "max() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.max"]], "max_loc() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.max_loc"]], "max_loc() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.max_loc"]], "min() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.min"]], "min() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.min"]], "multiply_and_add() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.multiply_and_add"]], "multiply_and_add() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.multiply_and_add"]], "nbytes (pycbc.types.array.array property)": [[76, "pycbc.types.array.Array.nbytes"]], "ndim (pycbc.types.array.array property)": [[76, "pycbc.types.array.Array.ndim"]], "nonnegative_float() (in module pycbc.types.optparse)": [[76, "pycbc.types.optparse.nonnegative_float"]], "nonnegative_int() (in module pycbc.types.optparse)": [[76, "pycbc.types.optparse.nonnegative_int"]], "notch_fir() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.notch_fir"]], "numpy() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.numpy"]], "numpy() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.numpy"]], "perform_extended_interpolation() (pycbc.types.config.interpolatingconfigparser method)": [[76, "pycbc.types.config.InterpolatingConfigParser.perform_extended_interpolation"]], "plot() (pycbc.types.frequencyseries.frequencyseries method)": [[76, "pycbc.types.frequencyseries.FrequencySeries.plot"]], "plot() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.plot"]], "populate_shared_sections() (pycbc.types.config.interpolatingconfigparser method)": [[76, "pycbc.types.config.InterpolatingConfigParser.populate_shared_sections"]], "positive_float() (in module pycbc.types.optparse)": [[76, "pycbc.types.optparse.positive_float"]], "positive_int() (in module pycbc.types.optparse)": [[76, "pycbc.types.optparse.positive_int"]], "precision (pycbc.types.array.array property)": [[76, "pycbc.types.array.Array.precision"]], "prepend_zeros() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.prepend_zeros"]], "psd() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.psd"]], "ptr (pycbc.types.array.array property)": [[76, "pycbc.types.array.Array.ptr"]], "ptr() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.ptr"]], "pycbc.types": [[76, "module-pycbc.types"]], "pycbc.types.aligned": [[76, "module-pycbc.types.aligned"]], "pycbc.types.array": [[76, "module-pycbc.types.array"]], "pycbc.types.array_cpu": [[76, "module-pycbc.types.array_cpu"]], "pycbc.types.config": [[76, "module-pycbc.types.config"]], "pycbc.types.frequencyseries": [[76, "module-pycbc.types.frequencyseries"]], "pycbc.types.optparse": [[76, "module-pycbc.types.optparse"]], "pycbc.types.timeseries": [[76, "module-pycbc.types.timeseries"]], "qtransform() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.qtransform"]], "read_ini_file() (pycbc.types.config.interpolatingconfigparser method)": [[76, "pycbc.types.config.InterpolatingConfigParser.read_ini_file"]], "real() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.real"]], "real_same_precision_as() (in module pycbc.types.array)": [[76, "pycbc.types.array.real_same_precision_as"]], "required_opts() (in module pycbc.types.optparse)": [[76, "pycbc.types.optparse.required_opts"]], "required_opts_multi_ifo() (in module pycbc.types.optparse)": [[76, "pycbc.types.optparse.required_opts_multi_ifo"]], "resample() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.resample"]], "resize() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.resize"]], "roll() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.roll"]], "sample_frequencies (pycbc.types.frequencyseries.frequencyseries property)": [[76, "pycbc.types.frequencyseries.FrequencySeries.sample_frequencies"]], "sample_rate (pycbc.types.frequencyseries.frequencyseries property)": [[76, "pycbc.types.frequencyseries.FrequencySeries.sample_rate"]], "sample_rate (pycbc.types.timeseries.timeseries property)": [[76, "pycbc.types.timeseries.TimeSeries.sample_rate"]], "sample_rate_close() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.sample_rate_close"]], "sample_times (pycbc.types.timeseries.timeseries property)": [[76, "pycbc.types.timeseries.TimeSeries.sample_times"]], "sanitize_newline() (pycbc.types.config.interpolatingconfigparser method)": [[76, "pycbc.types.config.InterpolatingConfigParser.sanitize_newline"]], "sanity_check_subsections() (pycbc.types.config.interpolatingconfigparser method)": [[76, "pycbc.types.config.InterpolatingConfigParser.sanity_check_subsections"]], "save() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.save"]], "save() (pycbc.types.frequencyseries.frequencyseries method)": [[76, "pycbc.types.frequencyseries.FrequencySeries.save"]], "save() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.save"]], "save_to_wav() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.save_to_wav"]], "shape (pycbc.types.array.array property)": [[76, "pycbc.types.array.Array.shape"]], "split_multi_sections() (pycbc.types.config.interpolatingconfigparser method)": [[76, "pycbc.types.config.InterpolatingConfigParser.split_multi_sections"]], "squared_norm() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.squared_norm"]], "squared_norm() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.squared_norm"]], "start_time (pycbc.types.frequencyseries.frequencyseries property)": [[76, "pycbc.types.frequencyseries.FrequencySeries.start_time"]], "start_time (pycbc.types.timeseries.timeseries property)": [[76, "pycbc.types.timeseries.TimeSeries.start_time"]], "sum() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.sum"]], "sum() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.sum"]], "take() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.take"]], "take() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.take"]], "time_slice() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.time_slice"]], "to_astropy() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.to_astropy"]], "to_frequencyseries() (pycbc.types.frequencyseries.frequencyseries method)": [[76, "pycbc.types.frequencyseries.FrequencySeries.to_frequencyseries"]], "to_frequencyseries() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.to_frequencyseries"]], "to_timeseries() (pycbc.types.frequencyseries.frequencyseries method)": [[76, "pycbc.types.frequencyseries.FrequencySeries.to_timeseries"]], "to_timeseries() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.to_timeseries"]], "trim_zeros() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.trim_zeros"]], "vdot() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.vdot"]], "vdot() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.vdot"]], "view() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.view"]], "weighted_inner() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.weighted_inner"]], "weighted_inner() (pycbc.types.array.array method)": [[76, "pycbc.types.array.Array.weighted_inner"]], "whiten() (pycbc.types.timeseries.timeseries method)": [[76, "pycbc.types.timeseries.TimeSeries.whiten"]], "zeros() (in module pycbc.types.aligned)": [[76, "pycbc.types.aligned.zeros"]], "zeros() (in module pycbc.types.array)": [[76, "pycbc.types.array.zeros"]], "zeros() (in module pycbc.types.array_cpu)": [[76, "pycbc.types.array_cpu.zeros"]], "singledetautochisq (class in pycbc.vetoes.autochisq)": [[77, "pycbc.vetoes.autochisq.SingleDetAutoChisq"]], "singledetbankveto (class in pycbc.vetoes.bank_chisq)": [[77, "pycbc.vetoes.bank_chisq.SingleDetBankVeto"]], "singledetpowerchisq (class in pycbc.vetoes.chisq)": [[77, "pycbc.vetoes.chisq.SingleDetPowerChisq"]], "singledetsgchisq (class in pycbc.vetoes.sgchisq)": [[77, "pycbc.vetoes.sgchisq.SingleDetSGChisq"]], "singledetskymaxautochisq (class in pycbc.vetoes.autochisq)": [[77, "pycbc.vetoes.autochisq.SingleDetSkyMaxAutoChisq"]], "singledetskymaxbankveto (class in pycbc.vetoes.bank_chisq)": [[77, "pycbc.vetoes.bank_chisq.SingleDetSkyMaxBankVeto"]], "singledetskymaxpowerchisq (class in pycbc.vetoes.chisq)": [[77, "pycbc.vetoes.chisq.SingleDetSkyMaxPowerChisq"]], "autochisq_from_precomputed() (in module pycbc.vetoes.autochisq)": [[77, "pycbc.vetoes.autochisq.autochisq_from_precomputed"]], "bank_chisq_from_filters() (in module pycbc.vetoes.bank_chisq)": [[77, "pycbc.vetoes.bank_chisq.bank_chisq_from_filters"]], "cache_overlaps() (pycbc.vetoes.bank_chisq.singledetbankveto method)": [[77, "pycbc.vetoes.bank_chisq.SingleDetBankVeto.cache_overlaps"]], "cache_segment_snrs() (pycbc.vetoes.bank_chisq.singledetbankveto method)": [[77, "pycbc.vetoes.bank_chisq.SingleDetBankVeto.cache_segment_snrs"]], "cached_chisq_bins() (pycbc.vetoes.chisq.singledetpowerchisq method)": [[77, "pycbc.vetoes.chisq.SingleDetPowerChisq.cached_chisq_bins"]], "calculate_chisq_bins() (pycbc.vetoes.chisq.singledetskymaxpowerchisq method)": [[77, "pycbc.vetoes.chisq.SingleDetSkyMaxPowerChisq.calculate_chisq_bins"]], "chisq_accum_bin() (in module pycbc.vetoes.chisq)": [[77, "pycbc.vetoes.chisq.chisq_accum_bin"]], "chisq_accum_bin() (in module pycbc.vetoes.chisq_cpu)": [[77, "pycbc.vetoes.chisq_cpu.chisq_accum_bin"]], "chisq_accum_bin_cython() (in module pycbc.vetoes.chisq_cpu)": [[77, "pycbc.vetoes.chisq_cpu.chisq_accum_bin_cython"]], "chisq_accum_bin_numpy() (in module pycbc.vetoes.chisq_cpu)": [[77, "pycbc.vetoes.chisq_cpu.chisq_accum_bin_numpy"]], "fastest_power_chisq_at_points() (in module pycbc.vetoes.chisq)": [[77, "pycbc.vetoes.chisq.fastest_power_chisq_at_points"]], "from_cli() (pycbc.vetoes.sgchisq.singledetsgchisq class method)": [[77, "pycbc.vetoes.sgchisq.SingleDetSGChisq.from_cli"]], "insert_option_group() (pycbc.vetoes.sgchisq.singledetsgchisq static method)": [[77, "pycbc.vetoes.sgchisq.SingleDetSGChisq.insert_option_group"]], "parse_option() (pycbc.vetoes.chisq.singledetpowerchisq static method)": [[77, "pycbc.vetoes.chisq.SingleDetPowerChisq.parse_option"]], "point_chisq_code() (in module pycbc.vetoes.chisq_cpu)": [[77, "pycbc.vetoes.chisq_cpu.point_chisq_code"]], "power_chisq() (in module pycbc.vetoes.chisq)": [[77, "pycbc.vetoes.chisq.power_chisq"]], "power_chisq_at_points_from_precomputed() (in module pycbc.vetoes.chisq)": [[77, "pycbc.vetoes.chisq.power_chisq_at_points_from_precomputed"]], "power_chisq_bins() (in module pycbc.vetoes.chisq)": [[77, "pycbc.vetoes.chisq.power_chisq_bins"]], "power_chisq_bins_from_sigmasq_series() (in module pycbc.vetoes.chisq)": [[77, "pycbc.vetoes.chisq.power_chisq_bins_from_sigmasq_series"]], "power_chisq_from_precomputed() (in module pycbc.vetoes.chisq)": [[77, "pycbc.vetoes.chisq.power_chisq_from_precomputed"]], "pycbc.vetoes": [[77, "module-pycbc.vetoes"]], "pycbc.vetoes.autochisq": [[77, "module-pycbc.vetoes.autochisq"]], "pycbc.vetoes.bank_chisq": [[77, "module-pycbc.vetoes.bank_chisq"]], "pycbc.vetoes.chisq": [[77, "module-pycbc.vetoes.chisq"]], "pycbc.vetoes.chisq_cpu": [[77, "module-pycbc.vetoes.chisq_cpu"]], "pycbc.vetoes.sgchisq": [[77, "module-pycbc.vetoes.sgchisq"]], "returns (pycbc.vetoes.sgchisq.singledetsgchisq attribute)": [[77, "pycbc.vetoes.sgchisq.SingleDetSGChisq.returns"]], "segment_snrs() (in module pycbc.vetoes.bank_chisq)": [[77, "pycbc.vetoes.bank_chisq.segment_snrs"]], "shift_sum() (in module pycbc.vetoes.chisq)": [[77, "pycbc.vetoes.chisq.shift_sum"]], "shift_sum() (in module pycbc.vetoes.chisq_cpu)": [[77, "pycbc.vetoes.chisq_cpu.shift_sum"]], "template_overlaps() (in module pycbc.vetoes.bank_chisq)": [[77, "pycbc.vetoes.bank_chisq.template_overlaps"]], "values() (pycbc.vetoes.autochisq.singledetautochisq method)": [[77, "pycbc.vetoes.autochisq.SingleDetAutoChisq.values"]], "values() (pycbc.vetoes.autochisq.singledetskymaxautochisq method)": [[77, "pycbc.vetoes.autochisq.SingleDetSkyMaxAutoChisq.values"]], "values() (pycbc.vetoes.bank_chisq.singledetbankveto method)": [[77, "pycbc.vetoes.bank_chisq.SingleDetBankVeto.values"]], "values() (pycbc.vetoes.bank_chisq.singledetskymaxbankveto method)": [[77, "pycbc.vetoes.bank_chisq.SingleDetSkyMaxBankVeto.values"]], "values() (pycbc.vetoes.chisq.singledetpowerchisq method)": [[77, "pycbc.vetoes.chisq.SingleDetPowerChisq.values"]], "values() (pycbc.vetoes.chisq.singledetskymaxpowerchisq method)": [[77, "pycbc.vetoes.chisq.SingleDetSkyMaxPowerChisq.values"]], "values() (pycbc.vetoes.sgchisq.singledetsgchisq method)": [[77, "pycbc.vetoes.sgchisq.SingleDetSGChisq.values"]], "basecbcgenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.BaseCBCGenerator"]], "basefdomaindetframegenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator"]], "basegenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.BaseGenerator"]], "compressedwaveform (class in pycbc.waveform.compress)": [[78, "pycbc.waveform.compress.CompressedWaveform"]], "fdomaincbcgenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.FDomainCBCGenerator"]], "fdomaincbcmodesgenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.FDomainCBCModesGenerator"]], "fdomaindetframegenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.FDomainDetFrameGenerator"]], "fdomaindetframemodesgenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.FDomainDetFrameModesGenerator"]], "fdomaindetframetwopolgenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator"]], "fdomaindetframetwopolnorespgenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator"]], "fdomaindirectdetframegenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.FDomainDirectDetFrameGenerator"]], "fdomainfreqtauringdowngenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.FDomainFreqTauRingdownGenerator"]], "fdomainmassspinringdowngenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.FDomainMassSpinRingdownGenerator"]], "failedwaveformerror": [[78, "pycbc.waveform.waveform.FailedWaveformError"]], "filterbank (class in pycbc.waveform.bank)": [[78, "pycbc.waveform.bank.FilterBank"]], "filterbankskymax (class in pycbc.waveform.bank)": [[78, "pycbc.waveform.bank.FilterBankSkyMax"]], "kerr_factor() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.Kerr_factor"]], "livefilterbank (class in pycbc.waveform.bank)": [[78, "pycbc.waveform.bank.LiveFilterBank"]], "nowaveformerror": [[78, "pycbc.waveform.waveform.NoWaveformError"]], "parameter (class in pycbc.waveform.parameters)": [[78, "pycbc.waveform.parameters.Parameter"]], "parameterlist (class in pycbc.waveform.parameters)": [[78, "pycbc.waveform.parameters.ParameterList"]], "tdomaincbcgenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.TDomainCBCGenerator"]], "tdomaincbcmodesgenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.TDomainCBCModesGenerator"]], "tdomainfreqtauringdowngenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.TDomainFreqTauRingdownGenerator"]], "tdomainmassspinringdowngenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.TDomainMassSpinRingdownGenerator"]], "tdomainsupernovaegenerator (class in pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.TDomainSupernovaeGenerator"]], "templatebank (class in pycbc.waveform.bank)": [[78, "pycbc.waveform.bank.TemplateBank"]], "add_approximant_arg() (in module pycbc.waveform.bank)": [[78, "pycbc.waveform.bank.add_approximant_arg"]], "add_custom_waveform() (in module pycbc.waveform.plugin)": [[78, "pycbc.waveform.plugin.add_custom_waveform"]], "add_length_estimator() (in module pycbc.waveform.plugin)": [[78, "pycbc.waveform.plugin.add_length_estimator"]], "amplitude (pycbc.waveform.compress.compressedwaveform property)": [[78, "pycbc.waveform.compress.CompressedWaveform.amplitude"]], "amplitude_from_frequencyseries() (in module pycbc.waveform.utils)": [[78, "pycbc.waveform.utils.amplitude_from_frequencyseries"]], "amplitude_from_polarizations() (in module pycbc.waveform.utils)": [[78, "pycbc.waveform.utils.amplitude_from_polarizations"]], "apply_fd_time_shift() (in module pycbc.waveform.utils)": [[78, "pycbc.waveform.utils.apply_fd_time_shift"]], "apply_fseries_time_shift() (in module pycbc.waveform.utils)": [[78, "pycbc.waveform.utils.apply_fseries_time_shift"]], "apply_fseries_time_shift() (in module pycbc.waveform.utils_cpu)": [[78, "pycbc.waveform.utils_cpu.apply_fseries_time_shift"]], "approximant() (pycbc.waveform.bank.templatebank method)": [[78, "pycbc.waveform.bank.TemplateBank.approximant"]], "asdict (pycbc.waveform.parameters.parameterlist property)": [[78, "pycbc.waveform.parameters.ParameterList.asdict"]], "aslist (pycbc.waveform.parameters.parameterlist property)": [[78, "pycbc.waveform.parameters.ParameterList.aslist"]], "boolargs_from_apprxstr() (in module pycbc.waveform.bank)": [[78, "pycbc.waveform.bank.boolargs_from_apprxstr"]], "cbrt_lookup() (in module pycbc.waveform.spa_tmplt_cpu)": [[78, "pycbc.waveform.spa_tmplt_cpu.cbrt_lookup"]], "ceilpow2() (in module pycbc.waveform.utils)": [[78, "pycbc.waveform.utils.ceilpow2"]], "clear_cache() (pycbc.waveform.compress.compressedwaveform method)": [[78, "pycbc.waveform.compress.CompressedWaveform.clear_cache"]], "coalign_waveforms() (in module pycbc.waveform.utils)": [[78, "pycbc.waveform.utils.coalign_waveforms"]], "compress_waveform() (in module pycbc.waveform.compress)": [[78, "pycbc.waveform.compress.compress_waveform"]], "current_params (pycbc.waveform.generator.basefdomaindetframegenerator attribute)": [[78, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.current_params"]], "current_params (pycbc.waveform.generator.basegenerator attribute)": [[78, "pycbc.waveform.generator.BaseGenerator.current_params"]], "current_params (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameGenerator.current_params"]], "current_params (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.current_params"]], "current_params (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.current_params"]], "current_params (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.current_params"]], "decomp_ccode_double() (in module pycbc.waveform.decompress_cpu_cython)": [[78, "pycbc.waveform.decompress_cpu_cython.decomp_ccode_double"]], "decomp_ccode_float() (in module pycbc.waveform.decompress_cpu_cython)": [[78, "pycbc.waveform.decompress_cpu_cython.decomp_ccode_float"]], "decompress() (pycbc.waveform.compress.compressedwaveform method)": [[78, "pycbc.waveform.compress.CompressedWaveform.decompress"]], "default_dict() (pycbc.waveform.parameters.parameterlist method)": [[78, "pycbc.waveform.parameters.ParameterList.default_dict"]], "default_modes() (in module pycbc.waveform.waveform_modes)": [[78, "pycbc.waveform.waveform_modes.default_modes"]], "defaults() (pycbc.waveform.parameters.parameterlist method)": [[78, "pycbc.waveform.parameters.ParameterList.defaults"]], "description_dict (pycbc.waveform.parameters.parameterlist property)": [[78, "pycbc.waveform.parameters.ParameterList.description_dict"]], "descriptions (pycbc.waveform.parameters.parameterlist property)": [[78, "pycbc.waveform.parameters.ParameterList.descriptions"]], "detector_names (pycbc.waveform.generator.basefdomaindetframegenerator attribute)": [[78, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.detector_names"]], "detector_names (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameGenerator.detector_names"]], "detector_names (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.detector_names"]], "detector_names (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.detector_names"]], "detector_names (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.detector_names"]], "detectors (pycbc.waveform.generator.basefdomaindetframegenerator attribute)": [[78, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.detectors"]], "detectors (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameGenerator.detectors"]], "detectors (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.detectors"]], "detectors (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.detectors"]], "detectors (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.detectors"]], "docstr() (pycbc.waveform.parameters.parameter method)": [[78, "pycbc.waveform.parameters.Parameter.docstr"]], "docstr() (pycbc.waveform.parameters.parameterlist method)": [[78, "pycbc.waveform.parameters.ParameterList.docstr"]], "dtype_dict (pycbc.waveform.parameters.parameterlist property)": [[78, "pycbc.waveform.parameters.ParameterList.dtype_dict"]], "dtypes (pycbc.waveform.parameters.parameterlist property)": [[78, "pycbc.waveform.parameters.ParameterList.dtypes"]], "end_frequency() (pycbc.waveform.bank.templatebank method)": [[78, "pycbc.waveform.bank.TemplateBank.end_frequency"]], "ensure_hash() (pycbc.waveform.bank.templatebank method)": [[78, "pycbc.waveform.bank.TemplateBank.ensure_hash"]], "ensure_standard_filter_columns() (pycbc.waveform.bank.templatebank method)": [[78, "pycbc.waveform.bank.TemplateBank.ensure_standard_filter_columns"]], "epoch (pycbc.waveform.generator.basefdomaindetframegenerator property)": [[78, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.epoch"]], "epoch (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameGenerator.epoch"]], "epoch (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.epoch"]], "epoch (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.epoch"]], "epoch (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.epoch"]], "epoch (pycbc.waveform.generator.fdomaindirectdetframegenerator property)": [[78, "pycbc.waveform.generator.FDomainDirectDetFrameGenerator.epoch"]], "extra_args (pycbc.waveform.bank.templatebank attribute)": [[78, "pycbc.waveform.bank.TemplateBank.extra_args"]], "fd_approximants() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.fd_approximants"]], "fd_damped_sinusoid() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.fd_damped_sinusoid"]], "fd_decompress() (in module pycbc.waveform.compress)": [[78, "pycbc.waveform.compress.fd_decompress"]], "fd_output_vector() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.fd_output_vector"]], "fd_sine_gaussian() (in module pycbc.waveform.sinegauss)": [[78, "pycbc.waveform.sinegauss.fd_sine_gaussian"]], "fd_taper() (in module pycbc.waveform.utils)": [[78, "pycbc.waveform.utils.fd_taper"]], "fd_to_td() (in module pycbc.waveform.utils)": [[78, "pycbc.waveform.utils.fd_to_td"]], "fd_waveform_mode_approximants() (in module pycbc.waveform.waveform_modes)": [[78, "pycbc.waveform.waveform_modes.fd_waveform_mode_approximants"]], "filehandler (pycbc.waveform.bank.templatebank attribute)": [[78, "pycbc.waveform.bank.TemplateBank.filehandler"]], "filter_approximants() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.filter_approximants"]], "find_variable_start_frequency() (in module pycbc.waveform.bank)": [[78, "pycbc.waveform.bank.find_variable_start_frequency"]], "findchirp_chirptime() (in module pycbc.waveform.spa_tmplt)": [[78, "pycbc.waveform.spa_tmplt.findchirp_chirptime"]], "format_lmns() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.format_lmns"]], "freq_resolution_for_template() (pycbc.waveform.bank.livefilterbank method)": [[78, "pycbc.waveform.bank.LiveFilterBank.freq_resolution_for_template"]], "frequency_from_polarizations() (in module pycbc.waveform.utils)": [[78, "pycbc.waveform.utils.frequency_from_polarizations"]], "from_hdf() (pycbc.waveform.compress.compressedwaveform class method)": [[78, "pycbc.waveform.compress.CompressedWaveform.from_hdf"]], "frozen_location_args (pycbc.waveform.generator.basefdomaindetframegenerator attribute)": [[78, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.frozen_location_args"]], "frozen_location_args (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameGenerator.frozen_location_args"]], "frozen_location_args (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.frozen_location_args"]], "frozen_location_args (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.frozen_location_args"]], "frozen_location_args (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.frozen_location_args"]], "frozen_params (pycbc.waveform.generator.basegenerator attribute)": [[78, "pycbc.waveform.generator.BaseGenerator.frozen_params"]], "fstimeshift() (in module pycbc.waveform.utils_cpu)": [[78, "pycbc.waveform.utils_cpu.fstimeshift"]], "fstimeshift32() (in module pycbc.waveform.utils_cpu)": [[78, "pycbc.waveform.utils_cpu.fstimeshift32"]], "generate() (pycbc.waveform.generator.basefdomaindetframegenerator method)": [[78, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.generate"]], "generate() (pycbc.waveform.generator.basegenerator method)": [[78, "pycbc.waveform.generator.BaseGenerator.generate"]], "generate() (pycbc.waveform.generator.fdomaindetframegenerator method)": [[78, "pycbc.waveform.generator.FDomainDetFrameGenerator.generate"]], "generate() (pycbc.waveform.generator.fdomaindetframemodesgenerator method)": [[78, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.generate"]], "generate() (pycbc.waveform.generator.fdomaindetframetwopolgenerator method)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.generate"]], "generate() (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator method)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.generate"]], "generate() (pycbc.waveform.generator.fdomaindirectdetframegenerator method)": [[78, "pycbc.waveform.generator.FDomainDirectDetFrameGenerator.generate"]], "generate_with_delta_f_and_max_freq() (pycbc.waveform.bank.filterbank method)": [[78, "pycbc.waveform.bank.FilterBank.generate_with_delta_f_and_max_freq"]], "generator (pycbc.waveform.generator.basegenerator attribute)": [[78, "pycbc.waveform.generator.BaseGenerator.generator"]], "get_cbrt() (in module pycbc.waveform.spa_tmplt_cpu)": [[78, "pycbc.waveform.spa_tmplt_cpu.get_cbrt"]], "get_corecollapse_bounce() (in module pycbc.waveform.supernovae)": [[78, "pycbc.waveform.supernovae.get_corecollapse_bounce"]], "get_decompressed_waveform() (pycbc.waveform.bank.filterbank method)": [[78, "pycbc.waveform.bank.FilterBank.get_decompressed_waveform"]], "get_fd_det_waveform() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.get_fd_det_waveform"]], "get_fd_det_waveform_sequence() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.get_fd_det_waveform_sequence"]], "get_fd_from_final_mass_spin() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.get_fd_from_final_mass_spin"]], "get_fd_from_freqtau() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.get_fd_from_freqtau"]], "get_fd_waveform() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.get_fd_waveform"]], "get_fd_waveform_from_td() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.get_fd_waveform_from_td"]], "get_fd_waveform_modes() (in module pycbc.waveform.waveform_modes)": [[78, "pycbc.waveform.waveform_modes.get_fd_waveform_modes"]], "get_fd_waveform_sequence() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.get_fd_waveform_sequence"]], "get_glm() (in module pycbc.waveform.waveform_modes)": [[78, "pycbc.waveform.waveform_modes.get_glm"]], "get_imrphenomxh_modes() (in module pycbc.waveform.waveform_modes)": [[78, "pycbc.waveform.waveform_modes.get_imrphenomxh_modes"]], "get_log() (in module pycbc.waveform.spa_tmplt_cpu)": [[78, "pycbc.waveform.spa_tmplt_cpu.get_log"]], "get_nrhybsur_modes() (in module pycbc.waveform.waveform_modes)": [[78, "pycbc.waveform.waveform_modes.get_nrhybsur_modes"]], "get_nrsur_modes() (in module pycbc.waveform.waveform_modes)": [[78, "pycbc.waveform.waveform_modes.get_nrsur_modes"]], "get_sgburst_waveform() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.get_sgburst_waveform"]], "get_td_det_waveform_from_fd_det() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.get_td_det_waveform_from_fd_det"]], "get_td_from_final_mass_spin() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.get_td_from_final_mass_spin"]], "get_td_from_freqtau() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.get_td_from_freqtau"]], "get_td_waveform() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.get_td_waveform"]], "get_td_waveform_from_fd() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.get_td_waveform_from_fd"]], "get_td_waveform_modes() (in module pycbc.waveform.waveform_modes)": [[78, "pycbc.waveform.waveform_modes.get_td_waveform_modes"]], "get_template() (pycbc.waveform.bank.livefilterbank method)": [[78, "pycbc.waveform.bank.LiveFilterBank.get_template"]], "get_template_amplitude_norm() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.get_template_amplitude_norm"]], "get_two_pol_waveform_filter() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.get_two_pol_waveform_filter"]], "get_waveform_end_frequency() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.get_waveform_end_frequency"]], "get_waveform_filter() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.get_waveform_filter"]], "get_waveform_filter_length_in_time() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.get_waveform_filter_length_in_time"]], "get_waveform_filter_norm() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.get_waveform_filter_norm"]], "getslice() (pycbc.waveform.bank.livefilterbank method)": [[78, "pycbc.waveform.bank.LiveFilterBank.getslice"]], "has_compressed_waveforms (pycbc.waveform.bank.templatebank attribute)": [[78, "pycbc.waveform.bank.TemplateBank.has_compressed_waveforms"]], "id_from_param() (pycbc.waveform.bank.livefilterbank method)": [[78, "pycbc.waveform.bank.LiveFilterBank.id_from_param"]], "indoc (pycbc.waveform.bank.templatebank attribute)": [[78, "pycbc.waveform.bank.TemplateBank.indoc"]], "inline_linear_interp() (in module pycbc.waveform.compress)": [[78, "pycbc.waveform.compress.inline_linear_interp"]], "inline_linear_interp() (in module pycbc.waveform.decompress_cpu)": [[78, "pycbc.waveform.decompress_cpu.inline_linear_interp"]], "interpolation (pycbc.waveform.compress.compressedwaveform attribute)": [[78, "pycbc.waveform.compress.CompressedWaveform.interpolation"]], "label_dict (pycbc.waveform.parameters.parameterlist property)": [[78, "pycbc.waveform.parameters.ParameterList.label_dict"]], "labels (pycbc.waveform.parameters.parameterlist property)": [[78, "pycbc.waveform.parameters.ParameterList.labels"]], "lm_amps_phases() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.lm_amps_phases"]], "lm_arbitrary_harmonics() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.lm_arbitrary_harmonics"]], "lm_deltaf() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.lm_deltaf"]], "lm_deltat() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.lm_deltat"]], "lm_ffinal() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.lm_ffinal"]], "lm_freqs_taus() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.lm_freqs_taus"]], "lm_tfinal() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.lm_tfinal"]], "load_to_memory (pycbc.waveform.compress.compressedwaveform attribute)": [[78, "pycbc.waveform.compress.CompressedWaveform.load_to_memory"]], "location_args (pycbc.waveform.generator.basefdomaindetframegenerator attribute)": [[78, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.location_args"]], "location_args (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameGenerator.location_args"]], "location_args (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.location_args"]], "location_args (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.location_args"]], "logv_lookup() (in module pycbc.waveform.spa_tmplt_cpu)": [[78, "pycbc.waveform.spa_tmplt_cpu.logv_lookup"]], "mchirp_compression() (in module pycbc.waveform.compress)": [[78, "pycbc.waveform.compress.mchirp_compression"]], "mismatch (pycbc.waveform.compress.compressedwaveform attribute)": [[78, "pycbc.waveform.compress.CompressedWaveform.mismatch"]], "multiband_fd_waveform() (in module pycbc.waveform.multiband)": [[78, "pycbc.waveform.multiband.multiband_fd_waveform"]], "multimode_base() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.multimode_base"]], "names (pycbc.waveform.parameters.parameterlist property)": [[78, "pycbc.waveform.parameters.ParameterList.names"]], "nltides_fourier_phase_difference() (in module pycbc.waveform.nltides)": [[78, "pycbc.waveform.nltides.nltides_fourier_phase_difference"]], "nodefaults (pycbc.waveform.parameters.parameterlist property)": [[78, "pycbc.waveform.parameters.ParameterList.nodefaults"]], "nonlinear_tidal_spa() (in module pycbc.waveform.nltides)": [[78, "pycbc.waveform.nltides.nonlinear_tidal_spa"]], "parameters (pycbc.waveform.bank.templatebank property)": [[78, "pycbc.waveform.bank.TemplateBank.parameters"]], "parse_approximant() (pycbc.waveform.bank.templatebank method)": [[78, "pycbc.waveform.bank.TemplateBank.parse_approximant"]], "parse_approximant_arg() (in module pycbc.waveform.bank)": [[78, "pycbc.waveform.bank.parse_approximant_arg"]], "parse_mode() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.parse_mode"]], "phase (pycbc.waveform.compress.compressedwaveform property)": [[78, "pycbc.waveform.compress.CompressedWaveform.phase"]], "phase_from_frequencyseries() (in module pycbc.waveform.utils)": [[78, "pycbc.waveform.utils.phase_from_frequencyseries"]], "phase_from_polarizations() (in module pycbc.waveform.utils)": [[78, "pycbc.waveform.utils.phase_from_polarizations"]], "possible_args (pycbc.waveform.generator.basecbcgenerator attribute)": [[78, "pycbc.waveform.generator.BaseCBCGenerator.possible_args"]], "precision (pycbc.waveform.compress.compressedwaveform attribute)": [[78, "pycbc.waveform.compress.CompressedWaveform.precision"]], "premerger_taylorf2() (in module pycbc.waveform.premerger)": [[78, "pycbc.waveform.premerger.premerger_taylorf2"]], "print_fd_approximants() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.print_fd_approximants"]], "print_sgburst_approximants() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.print_sgburst_approximants"]], "print_td_approximants() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.print_td_approximants"]], "props() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.props"]], "pycbc.waveform": [[78, "module-pycbc.waveform"]], "pycbc.waveform.bank": [[78, "module-pycbc.waveform.bank"]], "pycbc.waveform.compress": [[78, "module-pycbc.waveform.compress"]], "pycbc.waveform.decompress_cpu": [[78, "module-pycbc.waveform.decompress_cpu"]], "pycbc.waveform.decompress_cpu_cython": [[78, "module-pycbc.waveform.decompress_cpu_cython"]], "pycbc.waveform.generator": [[78, "module-pycbc.waveform.generator"]], "pycbc.waveform.multiband": [[78, "module-pycbc.waveform.multiband"]], "pycbc.waveform.nltides": [[78, "module-pycbc.waveform.nltides"]], "pycbc.waveform.parameters": [[78, "module-pycbc.waveform.parameters"]], "pycbc.waveform.plugin": [[78, "module-pycbc.waveform.plugin"]], "pycbc.waveform.premerger": [[78, "module-pycbc.waveform.premerger"]], "pycbc.waveform.ringdown": [[78, "module-pycbc.waveform.ringdown"]], "pycbc.waveform.sinegauss": [[78, "module-pycbc.waveform.sinegauss"]], "pycbc.waveform.spa_tmplt": [[78, "module-pycbc.waveform.spa_tmplt"]], "pycbc.waveform.spa_tmplt_cpu": [[78, "module-pycbc.waveform.spa_tmplt_cpu"]], "pycbc.waveform.supernovae": [[78, "module-pycbc.waveform.supernovae"]], "pycbc.waveform.utils": [[78, "module-pycbc.waveform.utils"]], "pycbc.waveform.utils_cpu": [[78, "module-pycbc.waveform.utils_cpu"]], "pycbc.waveform.waveform": [[78, "module-pycbc.waveform.waveform"]], "pycbc.waveform.waveform_modes": [[78, "module-pycbc.waveform.waveform_modes"]], "qnm_freq_decay() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.qnm_freq_decay"]], "qnm_time_decay() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.qnm_time_decay"]], "retrieve_waveform_plugins() (in module pycbc.waveform.plugin)": [[78, "pycbc.waveform.plugin.retrieve_waveform_plugins"]], "rframe_generator (pycbc.waveform.generator.basefdomaindetframegenerator attribute)": [[78, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.rframe_generator"]], "rframe_generator (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameGenerator.rframe_generator"]], "rframe_generator (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.rframe_generator"]], "rframe_generator (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.rframe_generator"]], "rframe_generator (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.rframe_generator"]], "rough_time_estimate() (in module pycbc.waveform.compress)": [[78, "pycbc.waveform.compress.rough_time_estimate"]], "round_up() (pycbc.waveform.bank.livefilterbank method)": [[78, "pycbc.waveform.bank.LiveFilterBank.round_up"]], "sample_points (pycbc.waveform.compress.compressedwaveform property)": [[78, "pycbc.waveform.compress.CompressedWaveform.sample_points"]], "select_rframe_generator() (pycbc.waveform.generator.basefdomaindetframegenerator method)": [[78, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.select_rframe_generator"]], "select_rframe_generator() (pycbc.waveform.generator.fdomaindetframegenerator static method)": [[78, "pycbc.waveform.generator.FDomainDetFrameGenerator.select_rframe_generator"]], "select_rframe_generator() (pycbc.waveform.generator.fdomaindetframemodesgenerator static method)": [[78, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.select_rframe_generator"]], "select_rframe_generator() (pycbc.waveform.generator.fdomaindetframetwopolgenerator static method)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.select_rframe_generator"]], "select_rframe_generator() (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator static method)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.select_rframe_generator"]], "select_rframe_generator() (pycbc.waveform.generator.fdomaindirectdetframegenerator static method)": [[78, "pycbc.waveform.generator.FDomainDirectDetFrameGenerator.select_rframe_generator"]], "select_waveform_generator() (in module pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.select_waveform_generator"]], "select_waveform_modes_generator() (in module pycbc.waveform.generator)": [[78, "pycbc.waveform.generator.select_waveform_modes_generator"]], "set_epoch() (pycbc.waveform.generator.basefdomaindetframegenerator method)": [[78, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.set_epoch"]], "set_epoch() (pycbc.waveform.generator.fdomaindirectdetframegenerator method)": [[78, "pycbc.waveform.generator.FDomainDirectDetFrameGenerator.set_epoch"]], "sgburst_approximants() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.sgburst_approximants"]], "sigma_cached() (in module pycbc.waveform.bank)": [[78, "pycbc.waveform.bank.sigma_cached"]], "spa_amplitude_factor() (in module pycbc.waveform.spa_tmplt)": [[78, "pycbc.waveform.spa_tmplt.spa_amplitude_factor"]], "spa_compression() (in module pycbc.waveform.compress)": [[78, "pycbc.waveform.compress.spa_compression"]], "spa_distance() (in module pycbc.waveform.spa_tmplt)": [[78, "pycbc.waveform.spa_tmplt.spa_distance"]], "spa_length_in_time() (in module pycbc.waveform.spa_tmplt)": [[78, "pycbc.waveform.spa_tmplt.spa_length_in_time"]], "spa_tmplt() (in module pycbc.waveform.spa_tmplt)": [[78, "pycbc.waveform.spa_tmplt.spa_tmplt"]], "spa_tmplt_end() (in module pycbc.waveform.spa_tmplt)": [[78, "pycbc.waveform.spa_tmplt.spa_tmplt_end"]], "spa_tmplt_engine() (in module pycbc.waveform.spa_tmplt)": [[78, "pycbc.waveform.spa_tmplt.spa_tmplt_engine"]], "spa_tmplt_engine() (in module pycbc.waveform.spa_tmplt_cpu)": [[78, "pycbc.waveform.spa_tmplt_cpu.spa_tmplt_engine"]], "spa_tmplt_inline_sequence() (in module pycbc.waveform.spa_tmplt_cpu)": [[78, "pycbc.waveform.spa_tmplt_cpu.spa_tmplt_inline_sequence"]], "spa_tmplt_norm() (in module pycbc.waveform.spa_tmplt)": [[78, "pycbc.waveform.spa_tmplt.spa_tmplt_norm"]], "spa_tmplt_precondition() (in module pycbc.waveform.spa_tmplt)": [[78, "pycbc.waveform.spa_tmplt.spa_tmplt_precondition"]], "spher_harms() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.spher_harms"]], "static_args (pycbc.waveform.generator.basefdomaindetframegenerator property)": [[78, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.static_args"]], "static_args (pycbc.waveform.generator.basegenerator property)": [[78, "pycbc.waveform.generator.BaseGenerator.static_args"]], "sum_modes() (in module pycbc.waveform.waveform_modes)": [[78, "pycbc.waveform.waveform_modes.sum_modes"]], "table (pycbc.waveform.bank.templatebank attribute)": [[78, "pycbc.waveform.bank.TemplateBank.table"]], "taper_timeseries() (in module pycbc.waveform.utils)": [[78, "pycbc.waveform.utils.taper_timeseries"]], "td_approximants() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.td_approximants"]], "td_damped_sinusoid() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.td_damped_sinusoid"]], "td_output_vector() (in module pycbc.waveform.ringdown)": [[78, "pycbc.waveform.ringdown.td_output_vector"]], "td_taper() (in module pycbc.waveform.utils)": [[78, "pycbc.waveform.utils.td_taper"]], "td_waveform_mode_approximants() (in module pycbc.waveform.waveform_modes)": [[78, "pycbc.waveform.waveform_modes.td_waveform_mode_approximants"]], "td_waveform_to_fd_waveform() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.td_waveform_to_fd_waveform"]], "template_thinning() (pycbc.waveform.bank.templatebank method)": [[78, "pycbc.waveform.bank.TemplateBank.template_thinning"]], "time_from_frequencyseries() (in module pycbc.waveform.utils)": [[78, "pycbc.waveform.utils.time_from_frequencyseries"]], "tolerance (pycbc.waveform.compress.compressedwaveform attribute)": [[78, "pycbc.waveform.compress.CompressedWaveform.tolerance"]], "tuple_to_hash() (in module pycbc.waveform.bank)": [[78, "pycbc.waveform.bank.tuple_to_hash"]], "variable_args (pycbc.waveform.generator.basefdomaindetframegenerator attribute)": [[78, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.variable_args"]], "variable_args (pycbc.waveform.generator.basegenerator attribute)": [[78, "pycbc.waveform.generator.BaseGenerator.variable_args"]], "variable_args (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameGenerator.variable_args"]], "variable_args (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.variable_args"]], "variable_args (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.variable_args"]], "variable_args (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator attribute)": [[78, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.variable_args"]], "vecdiff() (in module pycbc.waveform.compress)": [[78, "pycbc.waveform.compress.vecdiff"]], "waveform_norm_exists() (in module pycbc.waveform.waveform)": [[78, "pycbc.waveform.waveform.waveform_norm_exists"]], "write_to_hdf() (pycbc.waveform.bank.templatebank method)": [[78, "pycbc.waveform.bank.TemplateBank.write_to_hdf"]], "write_to_hdf() (pycbc.waveform.compress.compressedwaveform method)": [[78, "pycbc.waveform.compress.CompressedWaveform.write_to_hdf"]], "all_triggers (pycbc.workflow.core.executable attribute)": [[79, "pycbc.workflow.core.Executable.ALL_TRIGGERS"]], "calledprocesserrormod": [[79, "pycbc.workflow.core.CalledProcessErrorMod"]], "censorforeground (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.CensorForeground"]], "do_not_keep (pycbc.workflow.core.executable attribute)": [[79, "pycbc.workflow.core.Executable.DO_NOT_KEEP"]], "executable (class in pycbc.workflow.core)": [[79, "pycbc.workflow.core.Executable"]], "executable (class in pycbc.workflow.pegasus_workflow)": [[79, "pycbc.workflow.pegasus_workflow.Executable"]], "final_result (pycbc.workflow.core.executable attribute)": [[79, "pycbc.workflow.core.Executable.FINAL_RESULT"]], "file (class in pycbc.workflow.core)": [[79, "pycbc.workflow.core.File"]], "file (class in pycbc.workflow.pegasus_workflow)": [[79, "pycbc.workflow.pegasus_workflow.File"]], "filelist (class in pycbc.workflow.core)": [[79, "pycbc.workflow.core.FileList"]], "intermediate_product (pycbc.workflow.core.executable attribute)": [[79, "pycbc.workflow.core.Executable.INTERMEDIATE_PRODUCT"]], "jobsegmenter (class in pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.JobSegmenter"]], "keep_but_raise_warning (pycbc.workflow.core.executable attribute)": [[79, "pycbc.workflow.core.Executable.KEEP_BUT_RAISE_WARNING"]], "lalappsinspinjexecutable (class in pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.LalappsInspinjExecutable"]], "ligolwaddexecutable (class in pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.LigolwAddExecutable"]], "merged_triggers (pycbc.workflow.core.executable attribute)": [[79, "pycbc.workflow.core.Executable.MERGED_TRIGGERS"]], "mergeexecutable (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.MergeExecutable"]], "node (class in pycbc.workflow.core)": [[79, "pycbc.workflow.core.Node"]], "node (class in pycbc.workflow.pegasus_workflow)": [[79, "pycbc.workflow.pegasus_workflow.Node"]], "plotexecutable (class in pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.PlotExecutable"]], "plotqscanexecutable (class in pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.PlotQScanExecutable"]], "profileshortcuts (class in pycbc.workflow.pegasus_workflow)": [[79, "pycbc.workflow.pegasus_workflow.ProfileShortcuts"]], "pycbcaddstatmap (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.PyCBCAddStatmap"]], "pycbcbank2hdfexecutable (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.PyCBCBank2HDFExecutable"]], "pycbcbintemplatesdqexecutable (class in pycbc.workflow.dq)": [[79, "pycbc.workflow.dq.PyCBCBinTemplatesDQExecutable"]], "pycbcbintriggerratesdqexecutable (class in pycbc.workflow.dq)": [[79, "pycbc.workflow.dq.PyCBCBinTriggerRatesDQExecutable"]], "pycbccombinestatmap (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.PyCBCCombineStatmap"]], "pycbcdistributebackgroundbins (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.PyCBCDistributeBackgroundBins"]], "pycbcexcludezerolag (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.PyCBCExcludeZerolag"]], "pycbcfindcoincexecutable (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.PyCBCFindCoincExecutable"]], "pycbcfindsnglsexecutable (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.PyCBCFindSnglsExecutable"]], "pycbcfitbytemplateexecutable (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.PyCBCFitByTemplateExecutable"]], "pycbcfitoverparamexecutable (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.PyCBCFitOverParamExecutable"]], "pycbchdfinjfindexecutable (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.PyCBCHDFInjFindExecutable"]], "pycbcinspiralexecutable (class in pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.PyCBCInspiralExecutable"]], "pycbcmergehdfexecutable (class in pycbc.workflow.injection)": [[79, "pycbc.workflow.injection.PyCBCMergeHDFExecutable"]], "pycbcmultiinspiralexecutable (class in pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.PyCBCMultiInspiralExecutable"]], "pycbcoptimalsnrexecutable (class in pycbc.workflow.injection)": [[79, "pycbc.workflow.injection.PyCBCOptimalSNRExecutable"]], "pycbcsnglsstatmapexecutable (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.PyCBCSnglsStatMapExecutable"]], "pycbcsnglsstatmapinjexecutable (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.PyCBCSnglsStatMapInjExecutable"]], "pycbcstatmapexecutable (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.PyCBCStatMapExecutable"]], "pycbcstatmapinjexecutable (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.PyCBCStatMapInjExecutable"]], "pycbctmpltbankexecutable (class in pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.PyCBCTmpltbankExecutable"]], "pycbctrig2hdfexecutable (class in pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.PyCBCTrig2HDFExecutable"]], "pycbcconditionstrainexecutable (class in pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.PycbcConditionStrainExecutable"]], "pycbccreateinjectionsexecutable (class in pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.PycbcCreateInjectionsExecutable"]], "pycbcgrbinjcombinerexecutable (class in pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.PycbcGrbInjCombinerExecutable"]], "pycbcgrbinjfinderexecutable (class in pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.PycbcGrbInjFinderExecutable"]], "pycbcgrbtrigclusterexecutable (class in pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.PycbcGrbTrigClusterExecutable"]], "pycbcgrbtrigcombinerexecutable (class in pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.PycbcGrbTrigCombinerExecutable"]], "pycbchdfsplitinjexecutable (class in pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.PycbcHDFSplitInjExecutable"]], "pycbcinferenceexecutable (class in pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.PycbcInferenceExecutable"]], "pycbcsplitbankexecutable (class in pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.PycbcSplitBankExecutable"]], "pycbcsplitbankxmlexecutable (class in pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.PycbcSplitBankXmlExecutable"]], "pycbcsplitinspinjexecutable (class in pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.PycbcSplitInspinjExecutable"]], "segfile (class in pycbc.workflow.core)": [[79, "pycbc.workflow.core.SegFile"]], "singletemplateexecutable (class in pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.SingleTemplateExecutable"]], "singletimefreqexecutable (class in pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.SingleTimeFreqExecutable"]], "subworkflow (class in pycbc.workflow.pegasus_workflow)": [[79, "pycbc.workflow.pegasus_workflow.SubWorkflow"]], "transformation (class in pycbc.workflow.pegasus_workflow)": [[79, "pycbc.workflow.pegasus_workflow.Transformation"]], "versioningexecutable (class in pycbc.workflow.versioning)": [[79, "pycbc.workflow.versioning.VersioningExecutable"]], "workflow (class in pycbc.workflow.core)": [[79, "pycbc.workflow.core.Workflow"]], "workflow (class in pycbc.workflow.pegasus_workflow)": [[79, "pycbc.workflow.pegasus_workflow.Workflow"]], "workflowconfigparser (class in pycbc.workflow.configuration)": [[79, "pycbc.workflow.configuration.WorkflowConfigParser"]], "add_arg() (pycbc.workflow.pegasus_workflow.node method)": [[79, "pycbc.workflow.pegasus_workflow.Node.add_arg"]], "add_condorpool_copy_site() (in module pycbc.workflow.pegasus_sites)": [[79, "pycbc.workflow.pegasus_sites.add_condorpool_copy_site"]], "add_condorpool_shared_site() (in module pycbc.workflow.pegasus_sites)": [[79, "pycbc.workflow.pegasus_sites.add_condorpool_shared_site"]], "add_condorpool_symlink_site() (in module pycbc.workflow.pegasus_sites)": [[79, "pycbc.workflow.pegasus_sites.add_condorpool_symlink_site"]], "add_container() (pycbc.workflow.pegasus_workflow.workflow method)": [[79, "pycbc.workflow.pegasus_workflow.Workflow.add_container"]], "add_explicit_dependancy() (pycbc.workflow.pegasus_workflow.workflow method)": [[79, "pycbc.workflow.pegasus_workflow.Workflow.add_explicit_dependancy"]], "add_ini_profile() (pycbc.workflow.core.executable method)": [[79, "pycbc.workflow.core.Executable.add_ini_profile"]], "add_ini_site_profile() (in module pycbc.workflow.pegasus_sites)": [[79, "pycbc.workflow.pegasus_sites.add_ini_site_profile"]], "add_input() (pycbc.workflow.pegasus_workflow.node method)": [[79, "pycbc.workflow.pegasus_workflow.Node.add_input"]], "add_input_arg() (pycbc.workflow.pegasus_workflow.node method)": [[79, "pycbc.workflow.pegasus_workflow.Node.add_input_arg"]], "add_input_list_opt() (pycbc.workflow.pegasus_workflow.node method)": [[79, "pycbc.workflow.pegasus_workflow.Node.add_input_list_opt"]], "add_input_opt() (pycbc.workflow.pegasus_workflow.node method)": [[79, "pycbc.workflow.pegasus_workflow.Node.add_input_opt"]], "add_into_workflow() (pycbc.workflow.pegasus_workflow.subworkflow method)": [[79, "pycbc.workflow.pegasus_workflow.SubWorkflow.add_into_workflow"]], "add_list_opt() (pycbc.workflow.pegasus_workflow.node method)": [[79, "pycbc.workflow.pegasus_workflow.Node.add_list_opt"]], "add_local_site() (in module pycbc.workflow.pegasus_sites)": [[79, "pycbc.workflow.pegasus_sites.add_local_site"]], "add_metadata() (pycbc.workflow.core.file method)": [[79, "pycbc.workflow.core.File.add_metadata"]], "add_multiifo_input_list_opt() (pycbc.workflow.core.node method)": [[79, "pycbc.workflow.core.Node.add_multiifo_input_list_opt"]], "add_multiifo_output_list_opt() (pycbc.workflow.core.node method)": [[79, "pycbc.workflow.core.Node.add_multiifo_output_list_opt"]], "add_node() (pycbc.workflow.pegasus_workflow.workflow method)": [[79, "pycbc.workflow.pegasus_workflow.Workflow.add_node"]], "add_opt() (pycbc.workflow.core.executable method)": [[79, "pycbc.workflow.core.Executable.add_opt"]], "add_opt() (pycbc.workflow.pegasus_workflow.node method)": [[79, "pycbc.workflow.pegasus_workflow.Node.add_opt"]], "add_options_to_section() (in module pycbc.workflow.configparser_test)": [[79, "pycbc.workflow.configparser_test.add_options_to_section"]], "add_osg_site() (in module pycbc.workflow.pegasus_sites)": [[79, "pycbc.workflow.pegasus_sites.add_osg_site"]], "add_output() (pycbc.workflow.pegasus_workflow.node method)": [[79, "pycbc.workflow.pegasus_workflow.Node.add_output"]], "add_output_arg() (pycbc.workflow.pegasus_workflow.node method)": [[79, "pycbc.workflow.pegasus_workflow.Node.add_output_arg"]], "add_output_list_opt() (pycbc.workflow.pegasus_workflow.node method)": [[79, "pycbc.workflow.pegasus_workflow.Node.add_output_list_opt"]], "add_output_opt() (pycbc.workflow.pegasus_workflow.node method)": [[79, "pycbc.workflow.pegasus_workflow.Node.add_output_opt"]], "add_pfn() (pycbc.workflow.pegasus_workflow.file method)": [[79, "pycbc.workflow.pegasus_workflow.File.add_pfn"]], "add_planner_arg() (pycbc.workflow.pegasus_workflow.subworkflow method)": [[79, "pycbc.workflow.pegasus_workflow.SubWorkflow.add_planner_arg"]], "add_profile() (pycbc.workflow.pegasus_workflow.executable method)": [[79, "pycbc.workflow.pegasus_workflow.Executable.add_profile"]], "add_profile() (pycbc.workflow.pegasus_workflow.node method)": [[79, "pycbc.workflow.pegasus_workflow.Node.add_profile"]], "add_raw_arg() (pycbc.workflow.pegasus_workflow.node method)": [[79, "pycbc.workflow.pegasus_workflow.Node.add_raw_arg"]], "add_site() (in module pycbc.workflow.pegasus_sites)": [[79, "pycbc.workflow.pegasus_sites.add_site"]], "add_site_pegasus_profile() (in module pycbc.workflow.pegasus_sites)": [[79, "pycbc.workflow.pegasus_sites.add_site_pegasus_profile"]], "add_subworkflow_dependancy() (pycbc.workflow.pegasus_workflow.workflow method)": [[79, "pycbc.workflow.pegasus_workflow.Workflow.add_subworkflow_dependancy"]], "add_transformation() (pycbc.workflow.pegasus_workflow.workflow method)": [[79, "pycbc.workflow.pegasus_workflow.Workflow.add_transformation"]], "add_workflow() (pycbc.workflow.pegasus_workflow.workflow method)": [[79, "pycbc.workflow.pegasus_workflow.Workflow.add_workflow"]], "add_workflow_command_line_group() (in module pycbc.workflow.configuration)": [[79, "pycbc.workflow.configuration.add_workflow_command_line_group"]], "add_workflow_settings_cli() (in module pycbc.workflow.core)": [[79, "pycbc.workflow.core.add_workflow_settings_cli"]], "build_segment_filelist() (in module pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.build_segment_filelist"]], "build_veto_filelist() (in module pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.build_veto_filelist"]], "cache_entry (pycbc.workflow.core.file property)": [[79, "pycbc.workflow.core.File.cache_entry"]], "categorize_by_attr() (pycbc.workflow.core.filelist method)": [[79, "pycbc.workflow.core.FileList.categorize_by_attr"]], "check_duplicate_options() (in module pycbc.workflow.configparser_test)": [[79, "pycbc.workflow.configparser_test.check_duplicate_options"]], "compute_inj_optimal_snr() (in module pycbc.workflow.injection)": [[79, "pycbc.workflow.injection.compute_inj_optimal_snr"]], "configparser_value_to_file() (in module pycbc.workflow.core)": [[79, "pycbc.workflow.core.configparser_value_to_file"]], "convert_bank_to_hdf() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.convert_bank_to_hdf"]], "convert_cachelist_to_filelist() (in module pycbc.workflow.datafind)": [[79, "pycbc.workflow.datafind.convert_cachelist_to_filelist"]], "convert_to_lal_cache() (pycbc.workflow.core.filelist method)": [[79, "pycbc.workflow.core.FileList.convert_to_lal_cache"]], "convert_trig_to_hdf() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.convert_trig_to_hdf"]], "create_fits_file() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.create_fits_file"]], "create_nodata_node() (pycbc.workflow.jobsetup.pycbctmpltbankexecutable method)": [[79, "pycbc.workflow.jobsetup.PyCBCTmpltbankExecutable.create_nodata_node"]], "create_node() (pycbc.workflow.coincidence.pycbcaddstatmap method)": [[79, "pycbc.workflow.coincidence.PyCBCAddStatmap.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcbank2hdfexecutable method)": [[79, "pycbc.workflow.coincidence.PyCBCBank2HDFExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbccombinestatmap method)": [[79, "pycbc.workflow.coincidence.PyCBCCombineStatmap.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcdistributebackgroundbins method)": [[79, "pycbc.workflow.coincidence.PyCBCDistributeBackgroundBins.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcexcludezerolag method)": [[79, "pycbc.workflow.coincidence.PyCBCExcludeZerolag.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcfindcoincexecutable method)": [[79, "pycbc.workflow.coincidence.PyCBCFindCoincExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcfindsnglsexecutable method)": [[79, "pycbc.workflow.coincidence.PyCBCFindSnglsExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcfitbytemplateexecutable method)": [[79, "pycbc.workflow.coincidence.PyCBCFitByTemplateExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcfitoverparamexecutable method)": [[79, "pycbc.workflow.coincidence.PyCBCFitOverParamExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbchdfinjfindexecutable method)": [[79, "pycbc.workflow.coincidence.PyCBCHDFInjFindExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcsnglsstatmapexecutable method)": [[79, "pycbc.workflow.coincidence.PyCBCSnglsStatMapExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcsnglsstatmapinjexecutable method)": [[79, "pycbc.workflow.coincidence.PyCBCSnglsStatMapInjExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcstatmapexecutable method)": [[79, "pycbc.workflow.coincidence.PyCBCStatMapExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcstatmapinjexecutable method)": [[79, "pycbc.workflow.coincidence.PyCBCStatMapInjExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbctrig2hdfexecutable method)": [[79, "pycbc.workflow.coincidence.PyCBCTrig2HDFExecutable.create_node"]], "create_node() (pycbc.workflow.core.executable method)": [[79, "pycbc.workflow.core.Executable.create_node"]], "create_node() (pycbc.workflow.dq.pycbcbintemplatesdqexecutable method)": [[79, "pycbc.workflow.dq.PyCBCBinTemplatesDQExecutable.create_node"]], "create_node() (pycbc.workflow.dq.pycbcbintriggerratesdqexecutable method)": [[79, "pycbc.workflow.dq.PyCBCBinTriggerRatesDQExecutable.create_node"]], "create_node() (pycbc.workflow.grb_utils.pycbcgrbinjcombinerexecutable method)": [[79, "pycbc.workflow.grb_utils.PycbcGrbInjCombinerExecutable.create_node"]], "create_node() (pycbc.workflow.grb_utils.pycbcgrbinjfinderexecutable method)": [[79, "pycbc.workflow.grb_utils.PycbcGrbInjFinderExecutable.create_node"]], "create_node() (pycbc.workflow.grb_utils.pycbcgrbtrigclusterexecutable method)": [[79, "pycbc.workflow.grb_utils.PycbcGrbTrigClusterExecutable.create_node"]], "create_node() (pycbc.workflow.grb_utils.pycbcgrbtrigcombinerexecutable method)": [[79, "pycbc.workflow.grb_utils.PycbcGrbTrigCombinerExecutable.create_node"]], "create_node() (pycbc.workflow.injection.pycbcmergehdfexecutable method)": [[79, "pycbc.workflow.injection.PyCBCMergeHDFExecutable.create_node"]], "create_node() (pycbc.workflow.injection.pycbcoptimalsnrexecutable method)": [[79, "pycbc.workflow.injection.PyCBCOptimalSNRExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.lalappsinspinjexecutable method)": [[79, "pycbc.workflow.jobsetup.LalappsInspinjExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.ligolwaddexecutable method)": [[79, "pycbc.workflow.jobsetup.LigolwAddExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbcinspiralexecutable method)": [[79, "pycbc.workflow.jobsetup.PyCBCInspiralExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbcmultiinspiralexecutable method)": [[79, "pycbc.workflow.jobsetup.PyCBCMultiInspiralExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbctmpltbankexecutable method)": [[79, "pycbc.workflow.jobsetup.PyCBCTmpltbankExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbcconditionstrainexecutable method)": [[79, "pycbc.workflow.jobsetup.PycbcConditionStrainExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbccreateinjectionsexecutable method)": [[79, "pycbc.workflow.jobsetup.PycbcCreateInjectionsExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbchdfsplitinjexecutable method)": [[79, "pycbc.workflow.jobsetup.PycbcHDFSplitInjExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbcinferenceexecutable method)": [[79, "pycbc.workflow.jobsetup.PycbcInferenceExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbcsplitbankexecutable method)": [[79, "pycbc.workflow.jobsetup.PycbcSplitBankExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbcsplitinspinjexecutable method)": [[79, "pycbc.workflow.jobsetup.PycbcSplitInspinjExecutable.create_node"]], "create_node() (pycbc.workflow.plotting.plotexecutable method)": [[79, "pycbc.workflow.plotting.PlotExecutable.create_node"]], "create_posterior_files() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.create_posterior_files"]], "create_transformation() (pycbc.workflow.pegasus_workflow.executable method)": [[79, "pycbc.workflow.pegasus_workflow.Executable.create_transformation"]], "current_retention_level (pycbc.workflow.coincidence.censorforeground attribute)": [[79, "pycbc.workflow.coincidence.CensorForeground.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.mergeexecutable attribute)": [[79, "pycbc.workflow.coincidence.MergeExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcaddstatmap attribute)": [[79, "pycbc.workflow.coincidence.PyCBCAddStatmap.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcbank2hdfexecutable attribute)": [[79, "pycbc.workflow.coincidence.PyCBCBank2HDFExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbccombinestatmap attribute)": [[79, "pycbc.workflow.coincidence.PyCBCCombineStatmap.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcdistributebackgroundbins attribute)": [[79, "pycbc.workflow.coincidence.PyCBCDistributeBackgroundBins.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcexcludezerolag attribute)": [[79, "pycbc.workflow.coincidence.PyCBCExcludeZerolag.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcfindcoincexecutable attribute)": [[79, "pycbc.workflow.coincidence.PyCBCFindCoincExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcfindsnglsexecutable attribute)": [[79, "pycbc.workflow.coincidence.PyCBCFindSnglsExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcfitbytemplateexecutable attribute)": [[79, "pycbc.workflow.coincidence.PyCBCFitByTemplateExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcfitoverparamexecutable attribute)": [[79, "pycbc.workflow.coincidence.PyCBCFitOverParamExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbchdfinjfindexecutable attribute)": [[79, "pycbc.workflow.coincidence.PyCBCHDFInjFindExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcsnglsstatmapexecutable attribute)": [[79, "pycbc.workflow.coincidence.PyCBCSnglsStatMapExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcsnglsstatmapinjexecutable attribute)": [[79, "pycbc.workflow.coincidence.PyCBCSnglsStatMapInjExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcstatmapexecutable attribute)": [[79, "pycbc.workflow.coincidence.PyCBCStatMapExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcstatmapinjexecutable attribute)": [[79, "pycbc.workflow.coincidence.PyCBCStatMapInjExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbctrig2hdfexecutable attribute)": [[79, "pycbc.workflow.coincidence.PyCBCTrig2HDFExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.core.executable attribute)": [[79, "pycbc.workflow.core.Executable.current_retention_level"]], "current_retention_level (pycbc.workflow.dq.pycbcbintemplatesdqexecutable attribute)": [[79, "pycbc.workflow.dq.PyCBCBinTemplatesDQExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.dq.pycbcbintriggerratesdqexecutable attribute)": [[79, "pycbc.workflow.dq.PyCBCBinTriggerRatesDQExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.grb_utils.pycbcgrbinjcombinerexecutable attribute)": [[79, "pycbc.workflow.grb_utils.PycbcGrbInjCombinerExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.grb_utils.pycbcgrbinjfinderexecutable attribute)": [[79, "pycbc.workflow.grb_utils.PycbcGrbInjFinderExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.grb_utils.pycbcgrbtrigclusterexecutable attribute)": [[79, "pycbc.workflow.grb_utils.PycbcGrbTrigClusterExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.grb_utils.pycbcgrbtrigcombinerexecutable attribute)": [[79, "pycbc.workflow.grb_utils.PycbcGrbTrigCombinerExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.injection.pycbcmergehdfexecutable attribute)": [[79, "pycbc.workflow.injection.PyCBCMergeHDFExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.injection.pycbcoptimalsnrexecutable attribute)": [[79, "pycbc.workflow.injection.PyCBCOptimalSNRExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.lalappsinspinjexecutable attribute)": [[79, "pycbc.workflow.jobsetup.LalappsInspinjExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.ligolwaddexecutable attribute)": [[79, "pycbc.workflow.jobsetup.LigolwAddExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbcinspiralexecutable attribute)": [[79, "pycbc.workflow.jobsetup.PyCBCInspiralExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbcmultiinspiralexecutable attribute)": [[79, "pycbc.workflow.jobsetup.PyCBCMultiInspiralExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbctmpltbankexecutable attribute)": [[79, "pycbc.workflow.jobsetup.PyCBCTmpltbankExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbcconditionstrainexecutable attribute)": [[79, "pycbc.workflow.jobsetup.PycbcConditionStrainExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbccreateinjectionsexecutable attribute)": [[79, "pycbc.workflow.jobsetup.PycbcCreateInjectionsExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbchdfsplitinjexecutable attribute)": [[79, "pycbc.workflow.jobsetup.PycbcHDFSplitInjExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbcinferenceexecutable attribute)": [[79, "pycbc.workflow.jobsetup.PycbcInferenceExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbcsplitbankexecutable attribute)": [[79, "pycbc.workflow.jobsetup.PycbcSplitBankExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbcsplitinspinjexecutable attribute)": [[79, "pycbc.workflow.jobsetup.PycbcSplitInspinjExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.plotting.plotexecutable attribute)": [[79, "pycbc.workflow.plotting.PlotExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.versioning.versioningexecutable attribute)": [[79, "pycbc.workflow.versioning.VersioningExecutable.current_retention_level"]], "cut_distant_injections() (in module pycbc.workflow.injection)": [[79, "pycbc.workflow.injection.cut_distant_injections"]], "datafind_keep_unique_backups() (in module pycbc.workflow.datafind)": [[79, "pycbc.workflow.datafind.datafind_keep_unique_backups"]], "dax_repr (pycbc.workflow.pegasus_workflow.file property)": [[79, "pycbc.workflow.pegasus_workflow.File.dax_repr"]], "dump() (pycbc.workflow.core.filelist method)": [[79, "pycbc.workflow.core.FileList.dump"]], "entry_class (pycbc.workflow.core.filelist attribute)": [[79, "pycbc.workflow.core.FileList.entry_class"]], "excludestr() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.excludestr"]], "exec_sites_str (pycbc.workflow.core.workflow property)": [[79, "pycbc.workflow.core.Workflow.exec_sites_str"]], "execute_node() (pycbc.workflow.core.workflow method)": [[79, "pycbc.workflow.core.Workflow.execute_node"]], "extension (pycbc.workflow.jobsetup.lalappsinspinjexecutable attribute)": [[79, "pycbc.workflow.jobsetup.LalappsInspinjExecutable.extension"]], "extension (pycbc.workflow.jobsetup.pycbccreateinjectionsexecutable attribute)": [[79, "pycbc.workflow.jobsetup.PycbcCreateInjectionsExecutable.extension"]], "extension (pycbc.workflow.jobsetup.pycbcsplitbankexecutable attribute)": [[79, "pycbc.workflow.jobsetup.PycbcSplitBankExecutable.extension"]], "extension (pycbc.workflow.jobsetup.pycbcsplitbankxmlexecutable attribute)": [[79, "pycbc.workflow.jobsetup.PycbcSplitBankXmlExecutable.extension"]], "fermi_core_tail_model() (in module pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.fermi_core_tail_model"]], "file_input_options (pycbc.workflow.coincidence.pycbcfindsnglsexecutable attribute)": [[79, "pycbc.workflow.coincidence.PyCBCFindSnglsExecutable.file_input_options"]], "file_input_options (pycbc.workflow.core.executable attribute)": [[79, "pycbc.workflow.core.Executable.file_input_options"]], "file_input_options (pycbc.workflow.jobsetup.pycbcmultiinspiralexecutable attribute)": [[79, "pycbc.workflow.jobsetup.PyCBCMultiInspiralExecutable.file_input_options"]], "find_all_output_in_range() (pycbc.workflow.core.filelist method)": [[79, "pycbc.workflow.core.FileList.find_all_output_in_range"]], "find_injections_in_hdf_coinc() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.find_injections_in_hdf_coinc"]], "find_output() (pycbc.workflow.core.filelist method)": [[79, "pycbc.workflow.core.FileList.find_output"]], "find_output_at_time() (pycbc.workflow.core.filelist method)": [[79, "pycbc.workflow.core.FileList.find_output_at_time"]], "find_output_in_range() (pycbc.workflow.core.filelist method)": [[79, "pycbc.workflow.core.FileList.find_output_in_range"]], "find_output_with_ifo() (pycbc.workflow.core.filelist method)": [[79, "pycbc.workflow.core.FileList.find_output_with_ifo"]], "find_output_with_tag() (pycbc.workflow.core.filelist method)": [[79, "pycbc.workflow.core.FileList.find_output_with_tag"]], "find_output_without_tag() (pycbc.workflow.core.filelist method)": [[79, "pycbc.workflow.core.FileList.find_output_without_tag"]], "find_outputs_in_range() (pycbc.workflow.core.filelist method)": [[79, "pycbc.workflow.core.FileList.find_outputs_in_range"]], "from_multi_segment_list() (pycbc.workflow.core.segfile class method)": [[79, "pycbc.workflow.core.SegFile.from_multi_segment_list"]], "from_path() (pycbc.workflow.core.file class method)": [[79, "pycbc.workflow.core.File.from_path"]], "from_path() (pycbc.workflow.pegasus_workflow.file class method)": [[79, "pycbc.workflow.pegasus_workflow.File.from_path"]], "from_segment_list() (pycbc.workflow.core.segfile class method)": [[79, "pycbc.workflow.core.SegFile.from_segment_list"]], "from_segment_list_dict() (pycbc.workflow.core.segfile class method)": [[79, "pycbc.workflow.core.SegFile.from_segment_list_dict"]], "from_segment_xml() (pycbc.workflow.core.segfile class method)": [[79, "pycbc.workflow.core.SegFile.from_segment_xml"]], "generate_triggered_segment() (in module pycbc.workflow.segment)": [[79, "pycbc.workflow.segment.generate_triggered_segment"]], "get_cli_option() (pycbc.workflow.configuration.workflowconfigparser method)": [[79, "pycbc.workflow.configuration.WorkflowConfigParser.get_cli_option"]], "get_command_line() (pycbc.workflow.core.node method)": [[79, "pycbc.workflow.core.Node.get_command_line"]], "get_data_times_for_job() (pycbc.workflow.jobsetup.jobsegmenter method)": [[79, "pycbc.workflow.jobsetup.JobSegmenter.get_data_times_for_job"]], "get_diagnostic_plots() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.get_diagnostic_plots"]], "get_flag_segments_file() (in module pycbc.workflow.segment)": [[79, "pycbc.workflow.segment.get_flag_segments_file"]], "get_full_analysis_chunk() (in module pycbc.workflow.core)": [[79, "pycbc.workflow.core.get_full_analysis_chunk"]], "get_ifo_combinations() (pycbc.workflow.core.workflow method)": [[79, "pycbc.workflow.core.Workflow.get_ifo_combinations"]], "get_missing_segs_from_frame_file_cache() (in module pycbc.workflow.datafind)": [[79, "pycbc.workflow.datafind.get_missing_segs_from_frame_file_cache"]], "get_opt() (pycbc.workflow.core.executable method)": [[79, "pycbc.workflow.core.Executable.get_opt"]], "get_ordered_ifo_list() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.get_ordered_ifo_list"]], "get_plot_group() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.get_plot_group"]], "get_random_label() (in module pycbc.workflow.core)": [[79, "pycbc.workflow.core.get_random_label"]], "get_science_segs_from_datafind_outs() (in module pycbc.workflow.datafind)": [[79, "pycbc.workflow.datafind.get_science_segs_from_datafind_outs"]], "get_segment_summary_times() (in module pycbc.workflow.datafind)": [[79, "pycbc.workflow.datafind.get_segment_summary_times"]], "get_segments_file() (in module pycbc.workflow.segment)": [[79, "pycbc.workflow.segment.get_segments_file"]], "get_single_template_params() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.get_single_template_params"]], "get_sky_grid_scale() (in module pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.get_sky_grid_scale"]], "get_times_covered_by_files() (pycbc.workflow.core.filelist method)": [[79, "pycbc.workflow.core.FileList.get_times_covered_by_files"]], "get_transformation() (pycbc.workflow.core.executable method)": [[79, "pycbc.workflow.core.Executable.get_transformation"]], "get_triggered_coherent_segment() (in module pycbc.workflow.segment)": [[79, "pycbc.workflow.segment.get_triggered_coherent_segment"]], "get_valid_times() (pycbc.workflow.jobsetup.pycbcinspiralexecutable method)": [[79, "pycbc.workflow.jobsetup.PyCBCInspiralExecutable.get_valid_times"]], "get_valid_times() (pycbc.workflow.jobsetup.pycbcmultiinspiralexecutable method)": [[79, "pycbc.workflow.jobsetup.PyCBCMultiInspiralExecutable.get_valid_times"]], "get_valid_times() (pycbc.workflow.jobsetup.pycbctmpltbankexecutable method)": [[79, "pycbc.workflow.jobsetup.PyCBCTmpltbankExecutable.get_valid_times"]], "get_valid_times_for_job() (pycbc.workflow.jobsetup.jobsegmenter method)": [[79, "pycbc.workflow.jobsetup.JobSegmenter.get_valid_times_for_job"]], "grouper() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.grouper"]], "has_opt() (pycbc.workflow.core.executable method)": [[79, "pycbc.workflow.core.Executable.has_opt"]], "has_pfn() (pycbc.workflow.pegasus_workflow.file method)": [[79, "pycbc.workflow.pegasus_workflow.File.has_pfn"]], "id (pycbc.workflow.pegasus_workflow.executable attribute)": [[79, "pycbc.workflow.pegasus_workflow.Executable.id"]], "identify_needed_data() (in module pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.identify_needed_data"]], "ifo (pycbc.workflow.core.executable property)": [[79, "pycbc.workflow.core.Executable.ifo"]], "ifo (pycbc.workflow.core.file property)": [[79, "pycbc.workflow.core.File.ifo"]], "inj_to_hdf() (in module pycbc.workflow.injection)": [[79, "pycbc.workflow.injection.inj_to_hdf"]], "insert_into_dax() (pycbc.workflow.pegasus_workflow.file method)": [[79, "pycbc.workflow.pegasus_workflow.File.insert_into_dax"]], "int_gps_time_to_str() (in module pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.int_gps_time_to_str"]], "interpolate_exe() (pycbc.workflow.configuration.workflowconfigparser method)": [[79, "pycbc.workflow.configuration.WorkflowConfigParser.interpolate_exe"]], "interpolate_string() (in module pycbc.workflow.configparser_test)": [[79, "pycbc.workflow.configparser_test.interpolate_string"]], "is_same_as() (pycbc.workflow.pegasus_workflow.transformation method)": [[79, "pycbc.workflow.pegasus_workflow.Transformation.is_same_as"]], "load() (pycbc.workflow.core.filelist class method)": [[79, "pycbc.workflow.core.FileList.load"]], "log_datafind_command() (in module pycbc.workflow.datafind)": [[79, "pycbc.workflow.datafind.log_datafind_command"]], "make_analysis_dir() (in module pycbc.workflow.core)": [[79, "pycbc.workflow.core.make_analysis_dir"]], "make_average_psd() (in module pycbc.workflow.psd)": [[79, "pycbc.workflow.psd.make_average_psd"]], "make_binned_hist() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_binned_hist"]], "make_catalog() (in module pycbc.workflow.pegasus_sites)": [[79, "pycbc.workflow.pegasus_sites.make_catalog"]], "make_coinc_info() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.make_coinc_info"]], "make_coinc_snrchi_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_coinc_snrchi_plot"]], "make_diagnostic_plots() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.make_diagnostic_plots"]], "make_dq_flag_trigger_rate_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_dq_flag_trigger_rate_plot"]], "make_dq_segment_table() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_dq_segment_table"]], "make_external_call() (in module pycbc.workflow.core)": [[79, "pycbc.workflow.core.make_external_call"]], "make_foreground_censored_veto() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.make_foreground_censored_veto"]], "make_foreground_table() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_foreground_table"]], "make_foundmissed_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_foundmissed_plot"]], "make_gating_node() (in module pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.make_gating_node"]], "make_gating_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_gating_plot"]], "make_ifar_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_ifar_plot"]], "make_inference_acceptance_rate_plot() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.make_inference_acceptance_rate_plot"]], "make_inference_dynesty_run_plot() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.make_inference_dynesty_run_plot"]], "make_inference_dynesty_trace_plot() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.make_inference_dynesty_trace_plot"]], "make_inference_inj_recovery_plot() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.make_inference_inj_recovery_plot"]], "make_inference_plot() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.make_inference_plot"]], "make_inference_plot_mcmc_history() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.make_inference_plot_mcmc_history"]], "make_inference_posterior_plot() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.make_inference_posterior_plot"]], "make_inference_pp_plot() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.make_inference_pp_plot"]], "make_inference_pp_table() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.make_inference_pp_table"]], "make_inference_prior_plot() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.make_inference_prior_plot"]], "make_inference_samples_plot() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.make_inference_samples_plot"]], "make_inference_skymap() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.make_inference_skymap"]], "make_inference_summary_table() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.make_inference_summary_table"]], "make_info_table() (in module pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.make_info_table"]], "make_inj_info() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.make_inj_info"]], "make_inj_table() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_inj_table"]], "make_plot_waveform_plot() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.make_plot_waveform_plot"]], "make_posterior_workflow() (in module pycbc.workflow.inference_followups)": [[79, "pycbc.workflow.inference_followups.make_posterior_workflow"]], "make_psd_file() (in module pycbc.workflow.psd)": [[79, "pycbc.workflow.psd.make_psd_file"]], "make_pygrb_injs_tables() (in module pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.make_pygrb_injs_tables"]], "make_pygrb_plot() (in module pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.make_pygrb_plot"]], "make_qscan_plot() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.make_qscan_plot"]], "make_range_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_range_plot"]], "make_results_web_page() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_results_web_page"]], "make_seg_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_seg_plot"]], "make_seg_table() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_seg_table"]], "make_segments_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_segments_plot"]], "make_sensitivity_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_sensitivity_plot"]], "make_single_hist() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_single_hist"]], "make_single_template_files() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.make_single_template_files"]], "make_single_template_plots() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.make_single_template_plots"]], "make_singles_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_singles_plot"]], "make_singles_timefreq() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.make_singles_timefreq"]], "make_skipped_html() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.make_skipped_html"]], "make_sngl_ifo() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.make_sngl_ifo"]], "make_snrchi_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_snrchi_plot"]], "make_snrifar_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_snrifar_plot"]], "make_snrratehist_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_snrratehist_plot"]], "make_spectrum_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_spectrum_plot"]], "make_template_bin_table() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_template_bin_table"]], "make_template_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_template_plot"]], "make_throughput_plot() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_throughput_plot"]], "make_trigger_timeseries() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.make_trigger_timeseries"]], "make_upload_files() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.make_upload_files"]], "make_versioning_page() (in module pycbc.workflow.versioning)": [[79, "pycbc.workflow.versioning.make_versioning_page"]], "make_veto_table() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.make_veto_table"]], "merge_psds() (in module pycbc.workflow.psd)": [[79, "pycbc.workflow.psd.merge_psds"]], "merge_single_detector_hdf_files() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.merge_single_detector_hdf_files"]], "multi_ifo_coherent_job_setup() (in module pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.multi_ifo_coherent_job_setup"]], "new_multiifo_output_list_opt() (pycbc.workflow.core.node method)": [[79, "pycbc.workflow.core.Node.new_multiifo_output_list_opt"]], "new_output_file_opt() (pycbc.workflow.core.node method)": [[79, "pycbc.workflow.core.Node.new_output_file_opt"]], "new_output_file_opt() (pycbc.workflow.pegasus_workflow.node method)": [[79, "pycbc.workflow.pegasus_workflow.Node.new_output_file_opt"]], "output_file (pycbc.workflow.core.node property)": [[79, "pycbc.workflow.core.Node.output_file"]], "output_files (pycbc.workflow.core.node property)": [[79, "pycbc.workflow.core.Node.output_files"]], "output_map (pycbc.workflow.core.workflow property)": [[79, "pycbc.workflow.core.Workflow.output_map"]], "output_map_str() (pycbc.workflow.pegasus_workflow.file method)": [[79, "pycbc.workflow.pegasus_workflow.File.output_map_str"]], "parse_segdict_key() (pycbc.workflow.core.segfile method)": [[79, "pycbc.workflow.core.SegFile.parse_segdict_key"]], "parse_workflow_ini_file() (in module pycbc.workflow.configparser_test)": [[79, "pycbc.workflow.configparser_test.parse_workflow_ini_file"]], "perform_exe_expansion() (pycbc.workflow.configuration.workflowconfigparser method)": [[79, "pycbc.workflow.configuration.WorkflowConfigParser.perform_exe_expansion"]], "perform_extended_interpolation() (in module pycbc.workflow.configparser_test)": [[79, "pycbc.workflow.configparser_test.perform_extended_interpolation"]], "pick_tile_size() (pycbc.workflow.jobsetup.jobsegmenter method)": [[79, "pycbc.workflow.jobsetup.JobSegmenter.pick_tile_size"]], "plan_and_submit() (pycbc.workflow.pegasus_workflow.workflow method)": [[79, "pycbc.workflow.pegasus_workflow.Workflow.plan_and_submit"]], "pycbc.workflow": [[79, "module-pycbc.workflow"]], "pycbc.workflow.coincidence": [[79, "module-pycbc.workflow.coincidence"]], "pycbc.workflow.configparser_test": [[79, "module-pycbc.workflow.configparser_test"]], "pycbc.workflow.configuration": [[79, "module-pycbc.workflow.configuration"]], "pycbc.workflow.core": [[79, "module-pycbc.workflow.core"]], "pycbc.workflow.datafind": [[79, "module-pycbc.workflow.datafind"]], "pycbc.workflow.dq": [[79, "module-pycbc.workflow.dq"]], "pycbc.workflow.grb_utils": [[79, "module-pycbc.workflow.grb_utils"]], "pycbc.workflow.inference_followups": [[79, "module-pycbc.workflow.inference_followups"]], "pycbc.workflow.injection": [[79, "module-pycbc.workflow.injection"]], "pycbc.workflow.jobsetup": [[79, "module-pycbc.workflow.jobsetup"]], "pycbc.workflow.matched_filter": [[79, "module-pycbc.workflow.matched_filter"]], "pycbc.workflow.minifollowups": [[79, "module-pycbc.workflow.minifollowups"]], "pycbc.workflow.pegasus_sites": [[79, "module-pycbc.workflow.pegasus_sites"]], "pycbc.workflow.pegasus_workflow": [[79, "module-pycbc.workflow.pegasus_workflow"]], "pycbc.workflow.plotting": [[79, "module-pycbc.workflow.plotting"]], "pycbc.workflow.psd": [[79, "module-pycbc.workflow.psd"]], "pycbc.workflow.psdfiles": [[79, "module-pycbc.workflow.psdfiles"]], "pycbc.workflow.segment": [[79, "module-pycbc.workflow.segment"]], "pycbc.workflow.splittable": [[79, "module-pycbc.workflow.splittable"]], "pycbc.workflow.tmpltbank": [[79, "module-pycbc.workflow.tmpltbank"]], "pycbc.workflow.versioning": [[79, "module-pycbc.workflow.versioning"]], "read_ini_file() (in module pycbc.workflow.configparser_test)": [[79, "pycbc.workflow.configparser_test.read_ini_file"]], "remove_short_sci_segs() (pycbc.workflow.core.segfile method)": [[79, "pycbc.workflow.core.SegFile.remove_short_sci_segs"]], "requirestr() (in module pycbc.workflow.plotting)": [[79, "pycbc.workflow.plotting.requirestr"]], "rerank_coinc_followup() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.rerank_coinc_followup"]], "resolve_file_url() (pycbc.workflow.configuration.workflowconfigparser method)": [[79, "pycbc.workflow.configuration.WorkflowConfigParser.resolve_file_url"]], "resolve_td_option() (in module pycbc.workflow.core)": [[79, "pycbc.workflow.core.resolve_td_option"]], "resolve_td_options() (pycbc.workflow.core.node method)": [[79, "pycbc.workflow.core.Node.resolve_td_options"]], "resolve_url() (in module pycbc.workflow.configuration)": [[79, "pycbc.workflow.configuration.resolve_url"]], "resolve_url_to_file() (in module pycbc.workflow.core)": [[79, "pycbc.workflow.core.resolve_url_to_file"]], "resolve_urls() (pycbc.workflow.configuration.workflowconfigparser method)": [[79, "pycbc.workflow.configuration.WorkflowConfigParser.resolve_urls"]], "return_union_seglist() (pycbc.workflow.core.segfile method)": [[79, "pycbc.workflow.core.SegFile.return_union_seglist"]], "run_datafind_instance() (in module pycbc.workflow.datafind)": [[79, "pycbc.workflow.datafind.run_datafind_instance"]], "sanity_check_subsections() (in module pycbc.workflow.configparser_test)": [[79, "pycbc.workflow.configparser_test.sanity_check_subsections"]], "save() (pycbc.workflow.core.workflow method)": [[79, "pycbc.workflow.core.Workflow.save"]], "save() (pycbc.workflow.pegasus_workflow.workflow method)": [[79, "pycbc.workflow.pegasus_workflow.Workflow.save"]], "save_config() (pycbc.workflow.core.workflow method)": [[79, "pycbc.workflow.core.Workflow.save_config"]], "save_veto_definer() (in module pycbc.workflow.segment)": [[79, "pycbc.workflow.segment.save_veto_definer"]], "section_to_cli() (pycbc.workflow.configuration.workflowconfigparser method)": [[79, "pycbc.workflow.configuration.WorkflowConfigParser.section_to_cli"]], "segment (pycbc.workflow.core.file property)": [[79, "pycbc.workflow.core.File.segment"]], "select_files_by_ifo_combination() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.select_files_by_ifo_combination"]], "select_generic_executable() (in module pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.select_generic_executable"]], "select_matchedfilter_class() (in module pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.select_matchedfilter_class"]], "select_splitfilejob_instance() (in module pycbc.workflow.splittable)": [[79, "pycbc.workflow.splittable.select_splitfilejob_instance"]], "select_tmpltbank_class() (in module pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.select_tmpltbank_class"]], "set_category() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[79, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_category"]], "set_execution_site() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[79, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_execution_site"]], "set_grb_start_end() (in module pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.set_grb_start_end"]], "set_memory() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[79, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_memory"]], "set_num_cpus() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[79, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_num_cpus"]], "set_num_retries() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[79, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_num_retries"]], "set_priority() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[79, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_priority"]], "set_storage() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[79, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_storage"]], "set_subworkflow_properties() (pycbc.workflow.pegasus_workflow.subworkflow method)": [[79, "pycbc.workflow.pegasus_workflow.SubWorkflow.set_subworkflow_properties"]], "set_universe() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[79, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_universe"]], "setup_combine_statmap() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.setup_combine_statmap"]], "setup_datafind_from_pregenerated_lcf_files() (in module pycbc.workflow.datafind)": [[79, "pycbc.workflow.datafind.setup_datafind_from_pregenerated_lcf_files"]], "setup_datafind_runtime_cache_multi_calls_perifo() (in module pycbc.workflow.datafind)": [[79, "pycbc.workflow.datafind.setup_datafind_runtime_cache_multi_calls_perifo"]], "setup_datafind_runtime_cache_single_call_perifo() (in module pycbc.workflow.datafind)": [[79, "pycbc.workflow.datafind.setup_datafind_runtime_cache_single_call_perifo"]], "setup_datafind_runtime_frames_multi_calls_perifo() (in module pycbc.workflow.datafind)": [[79, "pycbc.workflow.datafind.setup_datafind_runtime_frames_multi_calls_perifo"]], "setup_datafind_runtime_frames_single_call_perifo() (in module pycbc.workflow.datafind)": [[79, "pycbc.workflow.datafind.setup_datafind_runtime_frames_single_call_perifo"]], "setup_datafind_workflow() (in module pycbc.workflow.datafind)": [[79, "pycbc.workflow.datafind.setup_datafind_workflow"]], "setup_dq_reranking() (in module pycbc.workflow.dq)": [[79, "pycbc.workflow.dq.setup_dq_reranking"]], "setup_exclude_zerolag() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.setup_exclude_zerolag"]], "setup_foreground_minifollowups() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.setup_foreground_minifollowups"]], "setup_injection_minifollowups() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.setup_injection_minifollowups"]], "setup_injection_workflow() (in module pycbc.workflow.injection)": [[79, "pycbc.workflow.injection.setup_injection_workflow"]], "setup_interval_coinc() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.setup_interval_coinc"]], "setup_interval_coinc_inj() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.setup_interval_coinc_inj"]], "setup_matchedfltr_dax_generated() (in module pycbc.workflow.matched_filter)": [[79, "pycbc.workflow.matched_filter.setup_matchedfltr_dax_generated"]], "setup_matchedfltr_dax_generated_multi() (in module pycbc.workflow.matched_filter)": [[79, "pycbc.workflow.matched_filter.setup_matchedfltr_dax_generated_multi"]], "setup_matchedfltr_workflow() (in module pycbc.workflow.matched_filter)": [[79, "pycbc.workflow.matched_filter.setup_matchedfltr_workflow"]], "setup_psd_calculate() (in module pycbc.workflow.psd)": [[79, "pycbc.workflow.psd.setup_psd_calculate"]], "setup_psd_pregenerated() (in module pycbc.workflow.psdfiles)": [[79, "pycbc.workflow.psdfiles.setup_psd_pregenerated"]], "setup_psd_workflow() (in module pycbc.workflow.psdfiles)": [[79, "pycbc.workflow.psdfiles.setup_psd_workflow"]], "setup_pygrb_minifollowups() (in module pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.setup_pygrb_minifollowups"]], "setup_pygrb_pp_workflow() (in module pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.setup_pygrb_pp_workflow"]], "setup_pygrb_results_workflow() (in module pycbc.workflow.grb_utils)": [[79, "pycbc.workflow.grb_utils.setup_pygrb_results_workflow"]], "setup_single_det_minifollowups() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.setup_single_det_minifollowups"]], "setup_sngls() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.setup_sngls"]], "setup_sngls_inj() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.setup_sngls_inj"]], "setup_sngls_statmap() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.setup_sngls_statmap"]], "setup_sngls_statmap_inj() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.setup_sngls_statmap_inj"]], "setup_splittable_dax_generated() (in module pycbc.workflow.splittable)": [[79, "pycbc.workflow.splittable.setup_splittable_dax_generated"]], "setup_splittable_workflow() (in module pycbc.workflow.splittable)": [[79, "pycbc.workflow.splittable.setup_splittable_workflow"]], "setup_statmap() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.setup_statmap"]], "setup_statmap_inj() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.setup_statmap_inj"]], "setup_tmpltbank_dax_generated() (in module pycbc.workflow.tmpltbank)": [[79, "pycbc.workflow.tmpltbank.setup_tmpltbank_dax_generated"]], "setup_tmpltbank_pregenerated() (in module pycbc.workflow.tmpltbank)": [[79, "pycbc.workflow.tmpltbank.setup_tmpltbank_pregenerated"]], "setup_tmpltbank_without_frames() (in module pycbc.workflow.tmpltbank)": [[79, "pycbc.workflow.tmpltbank.setup_tmpltbank_without_frames"]], "setup_tmpltbank_workflow() (in module pycbc.workflow.tmpltbank)": [[79, "pycbc.workflow.tmpltbank.setup_tmpltbank_workflow"]], "setup_trigger_fitting() (in module pycbc.workflow.coincidence)": [[79, "pycbc.workflow.coincidence.setup_trigger_fitting"]], "setup_upload_prep_minifollowups() (in module pycbc.workflow.minifollowups)": [[79, "pycbc.workflow.minifollowups.setup_upload_prep_minifollowups"]], "sites (pycbc.workflow.core.workflow property)": [[79, "pycbc.workflow.core.Workflow.sites"]], "sngl_ifo_job_setup() (in module pycbc.workflow.jobsetup)": [[79, "pycbc.workflow.jobsetup.sngl_ifo_job_setup"]], "split_multi_sections() (in module pycbc.workflow.configparser_test)": [[79, "pycbc.workflow.configparser_test.split_multi_sections"]], "staging_site (pycbc.workflow.core.workflow property)": [[79, "pycbc.workflow.core.Workflow.staging_site"]], "staging_site_str (pycbc.workflow.core.workflow property)": [[79, "pycbc.workflow.core.Workflow.staging_site_str"]], "time_dependent_options (pycbc.workflow.core.executable attribute)": [[79, "pycbc.workflow.core.Executable.time_dependent_options"]], "time_dependent_options (pycbc.workflow.jobsetup.pycbcinspiralexecutable attribute)": [[79, "pycbc.workflow.jobsetup.PyCBCInspiralExecutable.time_dependent_options"]], "time_dependent_options (pycbc.workflow.minifollowups.plotqscanexecutable attribute)": [[79, "pycbc.workflow.minifollowups.PlotQScanExecutable.time_dependent_options"]], "time_dependent_options (pycbc.workflow.minifollowups.singletemplateexecutable attribute)": [[79, "pycbc.workflow.minifollowups.SingleTemplateExecutable.time_dependent_options"]], "time_dependent_options (pycbc.workflow.minifollowups.singletimefreqexecutable attribute)": [[79, "pycbc.workflow.minifollowups.SingleTimeFreqExecutable.time_dependent_options"]], "to_file_object() (pycbc.workflow.core.filelist method)": [[79, "pycbc.workflow.core.FileList.to_file_object"]], "to_segment_xml() (pycbc.workflow.core.segfile method)": [[79, "pycbc.workflow.core.SegFile.to_segment_xml"]], "traverse_workflow_io() (pycbc.workflow.pegasus_workflow.workflow method)": [[79, "pycbc.workflow.pegasus_workflow.Workflow.traverse_workflow_io"]], "update_current_retention_level() (pycbc.workflow.core.executable method)": [[79, "pycbc.workflow.core.Executable.update_current_retention_level"]], "update_current_tags() (pycbc.workflow.core.executable method)": [[79, "pycbc.workflow.core.Executable.update_current_tags"]], "update_output_directory() (pycbc.workflow.core.executable method)": [[79, "pycbc.workflow.core.Executable.update_output_directory"]], "veto_injections() (in module pycbc.workflow.injection)": [[79, "pycbc.workflow.injection.veto_injections"]], "zero_pad_data_extend() (pycbc.workflow.jobsetup.pycbcinspiralexecutable method)": [[79, "pycbc.workflow.jobsetup.PyCBCInspiralExecutable.zero_pad_data_extend"]]}})